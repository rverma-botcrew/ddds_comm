/****************************************************************

  Generated by Eclipse Cyclone DDS IDL to CXX Translator
  File name: point.idl
  Source: point.hpp
  Cyclone DDS: v0.10.5

*****************************************************************/
#ifndef DDSCXX_POINT_HPP
#define DDSCXX_POINT_HPP


namespace pose_msgs
{
class Point
{
private:
 double x_ = 0.0;
 double y_ = 0.0;
 double z_ = 0.0;

public:
  Point() = default;

  explicit Point(
    double x,
    double y,
    double z) :
    x_(x),
    y_(y),
    z_(z) { }

  double x() const { return this->x_; }
  double& x() { return this->x_; }
  void x(double _val_) { this->x_ = _val_; }
  double y() const { return this->y_; }
  double& y() { return this->y_; }
  void y(double _val_) { this->y_ = _val_; }
  double z() const { return this->z_; }
  double& z() { return this->z_; }
  void z(double _val_) { this->z_ = _val_; }

  bool operator==(const Point& _other) const
  {
    (void) _other;
    return x_ == _other.x_ &&
      y_ == _other.y_ &&
      z_ == _other.z_;
  }

  bool operator!=(const Point& _other) const
  {
    return !(*this == _other);
  }

};

}

#include "dds/topic/TopicTraits.hpp"
#include "org/eclipse/cyclonedds/topic/datatopic.hpp"

namespace org {
namespace eclipse {
namespace cyclonedds {
namespace topic {

template <> constexpr const char* TopicTraits<::pose_msgs::Point>::getTypeName()
{
  return "pose_msgs::Point";
}

template <> constexpr allowable_encodings_t TopicTraits<::pose_msgs::Point>::allowableEncodings()
{
  return 0xFFFFFFFEu;
}

template <> constexpr bool TopicTraits<::pose_msgs::Point>::isKeyless()
{
  return true;
}

template <> constexpr extensibility TopicTraits<::pose_msgs::Point>::getExtensibility()
{
  return extensibility::ext_appendable;
}

#ifdef DDSCXX_HAS_TYPE_DISCOVERY
template<> constexpr unsigned int TopicTraits<::pose_msgs::Point>::type_map_blob_sz() { return 266; }
template<> constexpr unsigned int TopicTraits<::pose_msgs::Point>::type_info_blob_sz() { return 100; }
template<> inline const uint8_t * TopicTraits<::pose_msgs::Point>::type_map_blob() {
  static const uint8_t blob[] = {
 0x5b,  0x00,  0x00,  0x00,  0x01,  0x00,  0x00,  0x00,  0xf1,  0xb4,  0x9c,  0x4d,  0x1f,  0x9e,  0x94,  0xb3, 
 0x8f,  0x94,  0x8d,  0xe3,  0x00,  0xef,  0x1d,  0x00,  0x43,  0x00,  0x00,  0x00,  0xf1,  0x51,  0x02,  0x00, 
 0x01,  0x00,  0x00,  0x00,  0x00,  0x00,  0x00,  0x00,  0x33,  0x00,  0x00,  0x00,  0x03,  0x00,  0x00,  0x00, 
 0x0b,  0x00,  0x00,  0x00,  0x00,  0x00,  0x00,  0x00,  0x01,  0x00,  0x0a,  0x9d,  0xd4,  0xe4,  0x61,  0x00, 
 0x0b,  0x00,  0x00,  0x00,  0x01,  0x00,  0x00,  0x00,  0x01,  0x00,  0x0a,  0x41,  0x52,  0x90,  0x76,  0x00, 
 0x0b,  0x00,  0x00,  0x00,  0x02,  0x00,  0x00,  0x00,  0x01,  0x00,  0x0a,  0xfb,  0xad,  0xe9,  0xe3,  0x00, 
 0x80,  0x00,  0x00,  0x00,  0x01,  0x00,  0x00,  0x00,  0xf2,  0x0d,  0x4d,  0x80,  0x25,  0x96,  0xf4,  0x36, 
 0xd0,  0xe2,  0x09,  0xeb,  0x22,  0x5f,  0x86,  0x00,  0x68,  0x00,  0x00,  0x00,  0xf2,  0x51,  0x02,  0x00, 
 0x19,  0x00,  0x00,  0x00,  0x00,  0x00,  0x00,  0x00,  0x11,  0x00,  0x00,  0x00,  0x70,  0x6f,  0x73,  0x65, 
 0x5f,  0x6d,  0x73,  0x67,  0x73,  0x3a,  0x3a,  0x50,  0x6f,  0x69,  0x6e,  0x74,  0x00,  0x00,  0x00,  0x00, 
 0x40,  0x00,  0x00,  0x00,  0x03,  0x00,  0x00,  0x00,  0x10,  0x00,  0x00,  0x00,  0x00,  0x00,  0x00,  0x00, 
 0x01,  0x00,  0x0a,  0x00,  0x02,  0x00,  0x00,  0x00,  0x78,  0x00,  0x00,  0x00,  0x10,  0x00,  0x00,  0x00, 
 0x01,  0x00,  0x00,  0x00,  0x01,  0x00,  0x0a,  0x00,  0x02,  0x00,  0x00,  0x00,  0x79,  0x00,  0x00,  0x00, 
 0x10,  0x00,  0x00,  0x00,  0x02,  0x00,  0x00,  0x00,  0x01,  0x00,  0x0a,  0x00,  0x02,  0x00,  0x00,  0x00, 
 0x7a,  0x00,  0x00,  0x00,  0x22,  0x00,  0x00,  0x00,  0x01,  0x00,  0x00,  0x00,  0xf2,  0x0d,  0x4d,  0x80, 
 0x25,  0x96,  0xf4,  0x36,  0xd0,  0xe2,  0x09,  0xeb,  0x22,  0x5f,  0x86,  0xf1,  0xb4,  0x9c,  0x4d,  0x1f, 
 0x9e,  0x94,  0xb3,  0x8f,  0x94,  0x8d,  0xe3,  0x00,  0xef,  0x1d, };
  return blob;
}
template<> inline const uint8_t * TopicTraits<::pose_msgs::Point>::type_info_blob() {
  static const uint8_t blob[] = {
 0x60,  0x00,  0x00,  0x00,  0x01,  0x10,  0x00,  0x40,  0x28,  0x00,  0x00,  0x00,  0x24,  0x00,  0x00,  0x00, 
 0x14,  0x00,  0x00,  0x00,  0xf1,  0xb4,  0x9c,  0x4d,  0x1f,  0x9e,  0x94,  0xb3,  0x8f,  0x94,  0x8d,  0xe3, 
 0x00,  0xef,  0x1d,  0x00,  0x47,  0x00,  0x00,  0x00,  0x00,  0x00,  0x00,  0x00,  0x04,  0x00,  0x00,  0x00, 
 0x00,  0x00,  0x00,  0x00,  0x02,  0x10,  0x00,  0x40,  0x28,  0x00,  0x00,  0x00,  0x24,  0x00,  0x00,  0x00, 
 0x14,  0x00,  0x00,  0x00,  0xf2,  0x0d,  0x4d,  0x80,  0x25,  0x96,  0xf4,  0x36,  0xd0,  0xe2,  0x09,  0xeb, 
 0x22,  0x5f,  0x86,  0x00,  0x6c,  0x00,  0x00,  0x00,  0x00,  0x00,  0x00,  0x00,  0x04,  0x00,  0x00,  0x00, 
 0x00,  0x00,  0x00,  0x00, };
  return blob;
}
#endif //DDSCXX_HAS_TYPE_DISCOVERY

} //namespace topic
} //namespace cyclonedds
} //namespace eclipse
} //namespace org

namespace dds {
namespace topic {

template <>
struct topic_type_name<::pose_msgs::Point>
{
    static std::string value()
    {
      return org::eclipse::cyclonedds::topic::TopicTraits<::pose_msgs::Point>::getTypeName();
    }
};

}
}

REGISTER_TOPIC_TYPE(::pose_msgs::Point)

namespace org{
namespace eclipse{
namespace cyclonedds{
namespace core{
namespace cdr{

template<>
propvec &get_type_props<::pose_msgs::Point>();

template<typename T, std::enable_if_t<std::is_base_of<cdr_stream, T>::value, bool> = true >
bool write(T& streamer, const ::pose_msgs::Point& instance, entity_properties_t *props) {
  (void)instance;
  if (!streamer.start_struct(*props))
    return false;
  auto prop = streamer.first_entity(props);
  while (prop) {
    switch (prop->m_id) {
      case 0:
      if (!streamer.start_member(*prop))
        return false;
      if (!write(streamer, instance.x()))
        return false;
      if (!streamer.finish_member(*prop))
        return false;
      break;
      case 1:
      if (!streamer.start_member(*prop))
        return false;
      if (!write(streamer, instance.y()))
        return false;
      if (!streamer.finish_member(*prop))
        return false;
      break;
      case 2:
      if (!streamer.start_member(*prop))
        return false;
      if (!write(streamer, instance.z()))
        return false;
      if (!streamer.finish_member(*prop))
        return false;
      break;
    }
    prop = streamer.next_entity(prop);
  }
  return streamer.finish_struct(*props);
}

template<typename S, std::enable_if_t<std::is_base_of<cdr_stream, S>::value, bool> = true >
bool write(S& str, const ::pose_msgs::Point& instance, bool as_key) {
  auto &props = get_type_props<::pose_msgs::Point>();
  str.set_mode(cdr_stream::stream_mode::write, as_key);
  return write(str, instance, props.data()); 
}

template<typename T, std::enable_if_t<std::is_base_of<cdr_stream, T>::value, bool> = true >
bool read(T& streamer, ::pose_msgs::Point& instance, entity_properties_t *props) {
  (void)instance;
  if (!streamer.start_struct(*props))
    return false;
  auto prop = streamer.first_entity(props);
  while (prop) {
    switch (prop->m_id) {
      case 0:
      if (!streamer.start_member(*prop))
        return false;
      if (!read(streamer, instance.x()))
        return false;
      if (!streamer.finish_member(*prop))
        return false;
      break;
      case 1:
      if (!streamer.start_member(*prop))
        return false;
      if (!read(streamer, instance.y()))
        return false;
      if (!streamer.finish_member(*prop))
        return false;
      break;
      case 2:
      if (!streamer.start_member(*prop))
        return false;
      if (!read(streamer, instance.z()))
        return false;
      if (!streamer.finish_member(*prop))
        return false;
      break;
    }
    prop = streamer.next_entity(prop);
  }
  return streamer.finish_struct(*props);
}

template<typename S, std::enable_if_t<std::is_base_of<cdr_stream, S>::value, bool> = true >
bool read(S& str, ::pose_msgs::Point& instance, bool as_key) {
  auto &props = get_type_props<::pose_msgs::Point>();
  str.set_mode(cdr_stream::stream_mode::read, as_key);
  return read(str, instance, props.data()); 
}

template<typename T, std::enable_if_t<std::is_base_of<cdr_stream, T>::value, bool> = true >
bool move(T& streamer, const ::pose_msgs::Point& instance, entity_properties_t *props) {
  (void)instance;
  if (!streamer.start_struct(*props))
    return false;
  auto prop = streamer.first_entity(props);
  while (prop) {
    switch (prop->m_id) {
      case 0:
      if (!streamer.start_member(*prop))
        return false;
      if (!move(streamer, instance.x()))
        return false;
      if (!streamer.finish_member(*prop))
        return false;
      break;
      case 1:
      if (!streamer.start_member(*prop))
        return false;
      if (!move(streamer, instance.y()))
        return false;
      if (!streamer.finish_member(*prop))
        return false;
      break;
      case 2:
      if (!streamer.start_member(*prop))
        return false;
      if (!move(streamer, instance.z()))
        return false;
      if (!streamer.finish_member(*prop))
        return false;
      break;
    }
    prop = streamer.next_entity(prop);
  }
  return streamer.finish_struct(*props);
}

template<typename S, std::enable_if_t<std::is_base_of<cdr_stream, S>::value, bool> = true >
bool move(S& str, const ::pose_msgs::Point& instance, bool as_key) {
  auto &props = get_type_props<::pose_msgs::Point>();
  str.set_mode(cdr_stream::stream_mode::move, as_key);
  return move(str, instance, props.data()); 
}

template<typename T, std::enable_if_t<std::is_base_of<cdr_stream, T>::value, bool> = true >
bool max(T& streamer, const ::pose_msgs::Point& instance, entity_properties_t *props) {
  (void)instance;
  if (!streamer.start_struct(*props))
    return false;
  auto prop = streamer.first_entity(props);
  while (prop) {
    switch (prop->m_id) {
      case 0:
      if (!streamer.start_member(*prop))
        return false;
      if (!max(streamer, instance.x()))
        return false;
      if (!streamer.finish_member(*prop))
        return false;
      break;
      case 1:
      if (!streamer.start_member(*prop))
        return false;
      if (!max(streamer, instance.y()))
        return false;
      if (!streamer.finish_member(*prop))
        return false;
      break;
      case 2:
      if (!streamer.start_member(*prop))
        return false;
      if (!max(streamer, instance.z()))
        return false;
      if (!streamer.finish_member(*prop))
        return false;
      break;
    }
    prop = streamer.next_entity(prop);
  }
  return streamer.finish_struct(*props);
}

template<typename S, std::enable_if_t<std::is_base_of<cdr_stream, S>::value, bool> = true >
bool max(S& str, const ::pose_msgs::Point& instance, bool as_key) {
  auto &props = get_type_props<::pose_msgs::Point>();
  str.set_mode(cdr_stream::stream_mode::max, as_key);
  return max(str, instance, props.data()); 
}

} //namespace cdr
} //namespace core
} //namespace cyclonedds
} //namespace eclipse
} //namespace org

#endif // DDSCXX_POINT_HPP
