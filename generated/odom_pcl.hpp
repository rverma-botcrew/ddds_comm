/****************************************************************

  Generated by Eclipse Cyclone DDS IDL to CXX Translator
  File name: odom_pcl.idl
  Source: odom_pcl.hpp
  Cyclone DDS: v0.10.5

*****************************************************************/
#ifndef DDSCXX_ODOM_PCL_HPP
#define DDSCXX_ODOM_PCL_HPP

#include <cstdint>
#include <array>
#include <vector>
#include <string>

namespace odom_msgs
{
class Time
{
private:
 int32_t sec_ = 0;
 uint32_t nanosec_ = 0;

public:
  Time() = default;

  explicit Time(
    int32_t sec,
    uint32_t nanosec) :
    sec_(sec),
    nanosec_(nanosec) { }

  int32_t sec() const { return this->sec_; }
  int32_t& sec() { return this->sec_; }
  void sec(int32_t _val_) { this->sec_ = _val_; }
  uint32_t nanosec() const { return this->nanosec_; }
  uint32_t& nanosec() { return this->nanosec_; }
  void nanosec(uint32_t _val_) { this->nanosec_ = _val_; }

  bool operator==(const Time& _other) const
  {
    (void) _other;
    return sec_ == _other.sec_ &&
      nanosec_ == _other.nanosec_;
  }

  bool operator!=(const Time& _other) const
  {
    return !(*this == _other);
  }

};

class Header
{
private:
 ::odom_msgs::Time stamp_;
 std::string frame_id_;

public:
  Header() = default;

  explicit Header(
    const ::odom_msgs::Time& stamp,
    const std::string& frame_id) :
    stamp_(stamp),
    frame_id_(frame_id) { }

  const ::odom_msgs::Time& stamp() const { return this->stamp_; }
  ::odom_msgs::Time& stamp() { return this->stamp_; }
  void stamp(const ::odom_msgs::Time& _val_) { this->stamp_ = _val_; }
  void stamp(::odom_msgs::Time&& _val_) { this->stamp_ = _val_; }
  const std::string& frame_id() const { return this->frame_id_; }
  std::string& frame_id() { return this->frame_id_; }
  void frame_id(const std::string& _val_) { this->frame_id_ = _val_; }
  void frame_id(std::string&& _val_) { this->frame_id_ = _val_; }

  bool operator==(const Header& _other) const
  {
    (void) _other;
    return stamp_ == _other.stamp_ &&
      frame_id_ == _other.frame_id_;
  }

  bool operator!=(const Header& _other) const
  {
    return !(*this == _other);
  }

};

class Point
{
private:
 double x_ = 0.0;
 double y_ = 0.0;
 double z_ = 0.0;

public:
  Point() = default;

  explicit Point(
    double x,
    double y,
    double z) :
    x_(x),
    y_(y),
    z_(z) { }

  double x() const { return this->x_; }
  double& x() { return this->x_; }
  void x(double _val_) { this->x_ = _val_; }
  double y() const { return this->y_; }
  double& y() { return this->y_; }
  void y(double _val_) { this->y_ = _val_; }
  double z() const { return this->z_; }
  double& z() { return this->z_; }
  void z(double _val_) { this->z_ = _val_; }

  bool operator==(const Point& _other) const
  {
    (void) _other;
    return x_ == _other.x_ &&
      y_ == _other.y_ &&
      z_ == _other.z_;
  }

  bool operator!=(const Point& _other) const
  {
    return !(*this == _other);
  }

};

class Quaternion
{
private:
 double x_ = 0.0;
 double y_ = 0.0;
 double z_ = 0.0;
 double w_ = 0.0;

public:
  Quaternion() = default;

  explicit Quaternion(
    double x,
    double y,
    double z,
    double w) :
    x_(x),
    y_(y),
    z_(z),
    w_(w) { }

  double x() const { return this->x_; }
  double& x() { return this->x_; }
  void x(double _val_) { this->x_ = _val_; }
  double y() const { return this->y_; }
  double& y() { return this->y_; }
  void y(double _val_) { this->y_ = _val_; }
  double z() const { return this->z_; }
  double& z() { return this->z_; }
  void z(double _val_) { this->z_ = _val_; }
  double w() const { return this->w_; }
  double& w() { return this->w_; }
  void w(double _val_) { this->w_ = _val_; }

  bool operator==(const Quaternion& _other) const
  {
    (void) _other;
    return x_ == _other.x_ &&
      y_ == _other.y_ &&
      z_ == _other.z_ &&
      w_ == _other.w_;
  }

  bool operator!=(const Quaternion& _other) const
  {
    return !(*this == _other);
  }

};

class Pose
{
private:
 ::odom_msgs::Point position_;
 ::odom_msgs::Quaternion orientation_;

public:
  Pose() = default;

  explicit Pose(
    const ::odom_msgs::Point& position,
    const ::odom_msgs::Quaternion& orientation) :
    position_(position),
    orientation_(orientation) { }

  const ::odom_msgs::Point& position() const { return this->position_; }
  ::odom_msgs::Point& position() { return this->position_; }
  void position(const ::odom_msgs::Point& _val_) { this->position_ = _val_; }
  void position(::odom_msgs::Point&& _val_) { this->position_ = _val_; }
  const ::odom_msgs::Quaternion& orientation() const { return this->orientation_; }
  ::odom_msgs::Quaternion& orientation() { return this->orientation_; }
  void orientation(const ::odom_msgs::Quaternion& _val_) { this->orientation_ = _val_; }
  void orientation(::odom_msgs::Quaternion&& _val_) { this->orientation_ = _val_; }

  bool operator==(const Pose& _other) const
  {
    (void) _other;
    return position_ == _other.position_ &&
      orientation_ == _other.orientation_;
  }

  bool operator!=(const Pose& _other) const
  {
    return !(*this == _other);
  }

};

class Twist
{
private:
 ::odom_msgs::Point linear_;
 ::odom_msgs::Point angular_;

public:
  Twist() = default;

  explicit Twist(
    const ::odom_msgs::Point& linear,
    const ::odom_msgs::Point& angular) :
    linear_(linear),
    angular_(angular) { }

  const ::odom_msgs::Point& linear() const { return this->linear_; }
  ::odom_msgs::Point& linear() { return this->linear_; }
  void linear(const ::odom_msgs::Point& _val_) { this->linear_ = _val_; }
  void linear(::odom_msgs::Point&& _val_) { this->linear_ = _val_; }
  const ::odom_msgs::Point& angular() const { return this->angular_; }
  ::odom_msgs::Point& angular() { return this->angular_; }
  void angular(const ::odom_msgs::Point& _val_) { this->angular_ = _val_; }
  void angular(::odom_msgs::Point&& _val_) { this->angular_ = _val_; }

  bool operator==(const Twist& _other) const
  {
    (void) _other;
    return linear_ == _other.linear_ &&
      angular_ == _other.angular_;
  }

  bool operator!=(const Twist& _other) const
  {
    return !(*this == _other);
  }

};

class PoseWithCovariance
{
private:
 ::odom_msgs::Pose pose_;
 std::array<double, 36> covariance_ = { };

public:
  PoseWithCovariance() = default;

  explicit PoseWithCovariance(
    const ::odom_msgs::Pose& pose,
    const std::array<double, 36>& covariance) :
    pose_(pose),
    covariance_(covariance) { }

  const ::odom_msgs::Pose& pose() const { return this->pose_; }
  ::odom_msgs::Pose& pose() { return this->pose_; }
  void pose(const ::odom_msgs::Pose& _val_) { this->pose_ = _val_; }
  void pose(::odom_msgs::Pose&& _val_) { this->pose_ = _val_; }
  const std::array<double, 36>& covariance() const { return this->covariance_; }
  std::array<double, 36>& covariance() { return this->covariance_; }
  void covariance(const std::array<double, 36>& _val_) { this->covariance_ = _val_; }
  void covariance(std::array<double, 36>&& _val_) { this->covariance_ = _val_; }

  bool operator==(const PoseWithCovariance& _other) const
  {
    (void) _other;
    return pose_ == _other.pose_ &&
      covariance_ == _other.covariance_;
  }

  bool operator!=(const PoseWithCovariance& _other) const
  {
    return !(*this == _other);
  }

};

class TwistWithCovariance
{
private:
 ::odom_msgs::Twist twist_;
 std::array<double, 36> covariance_ = { };

public:
  TwistWithCovariance() = default;

  explicit TwistWithCovariance(
    const ::odom_msgs::Twist& twist,
    const std::array<double, 36>& covariance) :
    twist_(twist),
    covariance_(covariance) { }

  const ::odom_msgs::Twist& twist() const { return this->twist_; }
  ::odom_msgs::Twist& twist() { return this->twist_; }
  void twist(const ::odom_msgs::Twist& _val_) { this->twist_ = _val_; }
  void twist(::odom_msgs::Twist&& _val_) { this->twist_ = _val_; }
  const std::array<double, 36>& covariance() const { return this->covariance_; }
  std::array<double, 36>& covariance() { return this->covariance_; }
  void covariance(const std::array<double, 36>& _val_) { this->covariance_ = _val_; }
  void covariance(std::array<double, 36>&& _val_) { this->covariance_ = _val_; }

  bool operator==(const TwistWithCovariance& _other) const
  {
    (void) _other;
    return twist_ == _other.twist_ &&
      covariance_ == _other.covariance_;
  }

  bool operator!=(const TwistWithCovariance& _other) const
  {
    return !(*this == _other);
  }

};

class Odometry
{
private:
 ::odom_msgs::Header header_;
 std::string child_frame_id_;
 ::odom_msgs::PoseWithCovariance pose_;
 ::odom_msgs::TwistWithCovariance twist_;

public:
  Odometry() = default;

  explicit Odometry(
    const ::odom_msgs::Header& header,
    const std::string& child_frame_id,
    const ::odom_msgs::PoseWithCovariance& pose,
    const ::odom_msgs::TwistWithCovariance& twist) :
    header_(header),
    child_frame_id_(child_frame_id),
    pose_(pose),
    twist_(twist) { }

  const ::odom_msgs::Header& header() const { return this->header_; }
  ::odom_msgs::Header& header() { return this->header_; }
  void header(const ::odom_msgs::Header& _val_) { this->header_ = _val_; }
  void header(::odom_msgs::Header&& _val_) { this->header_ = _val_; }
  const std::string& child_frame_id() const { return this->child_frame_id_; }
  std::string& child_frame_id() { return this->child_frame_id_; }
  void child_frame_id(const std::string& _val_) { this->child_frame_id_ = _val_; }
  void child_frame_id(std::string&& _val_) { this->child_frame_id_ = _val_; }
  const ::odom_msgs::PoseWithCovariance& pose() const { return this->pose_; }
  ::odom_msgs::PoseWithCovariance& pose() { return this->pose_; }
  void pose(const ::odom_msgs::PoseWithCovariance& _val_) { this->pose_ = _val_; }
  void pose(::odom_msgs::PoseWithCovariance&& _val_) { this->pose_ = _val_; }
  const ::odom_msgs::TwistWithCovariance& twist() const { return this->twist_; }
  ::odom_msgs::TwistWithCovariance& twist() { return this->twist_; }
  void twist(const ::odom_msgs::TwistWithCovariance& _val_) { this->twist_ = _val_; }
  void twist(::odom_msgs::TwistWithCovariance&& _val_) { this->twist_ = _val_; }

  bool operator==(const Odometry& _other) const
  {
    (void) _other;
    return header_ == _other.header_ &&
      child_frame_id_ == _other.child_frame_id_ &&
      pose_ == _other.pose_ &&
      twist_ == _other.twist_;
  }

  bool operator!=(const Odometry& _other) const
  {
    return !(*this == _other);
  }

};

class PointField
{
private:
 std::string name_;
 uint32_t offset_ = 0;
 uint8_t datatype_ = 0;
 uint32_t count_ = 0;

public:
  PointField() = default;

  explicit PointField(
    const std::string& name,
    uint32_t offset,
    uint8_t datatype,
    uint32_t count) :
    name_(name),
    offset_(offset),
    datatype_(datatype),
    count_(count) { }

  const std::string& name() const { return this->name_; }
  std::string& name() { return this->name_; }
  void name(const std::string& _val_) { this->name_ = _val_; }
  void name(std::string&& _val_) { this->name_ = _val_; }
  uint32_t offset() const { return this->offset_; }
  uint32_t& offset() { return this->offset_; }
  void offset(uint32_t _val_) { this->offset_ = _val_; }
  uint8_t datatype() const { return this->datatype_; }
  uint8_t& datatype() { return this->datatype_; }
  void datatype(uint8_t _val_) { this->datatype_ = _val_; }
  uint32_t count() const { return this->count_; }
  uint32_t& count() { return this->count_; }
  void count(uint32_t _val_) { this->count_ = _val_; }

  bool operator==(const PointField& _other) const
  {
    (void) _other;
    return name_ == _other.name_ &&
      offset_ == _other.offset_ &&
      datatype_ == _other.datatype_ &&
      count_ == _other.count_;
  }

  bool operator!=(const PointField& _other) const
  {
    return !(*this == _other);
  }

};

class PointCloud2
{
private:
 ::odom_msgs::Header header_;
 uint32_t height_ = 0;
 uint32_t width_ = 0;
 std::vector<::odom_msgs::PointField> fields_;
 bool is_bigendian_ = false;
 uint32_t point_step_ = 0;
 uint32_t row_step_ = 0;
 std::vector<uint8_t> data_;
 bool is_dense_ = false;

public:
  PointCloud2() = default;

  explicit PointCloud2(
    const ::odom_msgs::Header& header,
    uint32_t height,
    uint32_t width,
    const std::vector<::odom_msgs::PointField>& fields,
    bool is_bigendian,
    uint32_t point_step,
    uint32_t row_step,
    const std::vector<uint8_t>& data,
    bool is_dense) :
    header_(header),
    height_(height),
    width_(width),
    fields_(fields),
    is_bigendian_(is_bigendian),
    point_step_(point_step),
    row_step_(row_step),
    data_(data),
    is_dense_(is_dense) { }

  const ::odom_msgs::Header& header() const { return this->header_; }
  ::odom_msgs::Header& header() { return this->header_; }
  void header(const ::odom_msgs::Header& _val_) { this->header_ = _val_; }
  void header(::odom_msgs::Header&& _val_) { this->header_ = _val_; }
  uint32_t height() const { return this->height_; }
  uint32_t& height() { return this->height_; }
  void height(uint32_t _val_) { this->height_ = _val_; }
  uint32_t width() const { return this->width_; }
  uint32_t& width() { return this->width_; }
  void width(uint32_t _val_) { this->width_ = _val_; }
  const std::vector<::odom_msgs::PointField>& fields() const { return this->fields_; }
  std::vector<::odom_msgs::PointField>& fields() { return this->fields_; }
  void fields(const std::vector<::odom_msgs::PointField>& _val_) { this->fields_ = _val_; }
  void fields(std::vector<::odom_msgs::PointField>&& _val_) { this->fields_ = _val_; }
  bool is_bigendian() const { return this->is_bigendian_; }
  bool& is_bigendian() { return this->is_bigendian_; }
  void is_bigendian(bool _val_) { this->is_bigendian_ = _val_; }
  uint32_t point_step() const { return this->point_step_; }
  uint32_t& point_step() { return this->point_step_; }
  void point_step(uint32_t _val_) { this->point_step_ = _val_; }
  uint32_t row_step() const { return this->row_step_; }
  uint32_t& row_step() { return this->row_step_; }
  void row_step(uint32_t _val_) { this->row_step_ = _val_; }
  const std::vector<uint8_t>& data() const { return this->data_; }
  std::vector<uint8_t>& data() { return this->data_; }
  void data(const std::vector<uint8_t>& _val_) { this->data_ = _val_; }
  void data(std::vector<uint8_t>&& _val_) { this->data_ = _val_; }
  bool is_dense() const { return this->is_dense_; }
  bool& is_dense() { return this->is_dense_; }
  void is_dense(bool _val_) { this->is_dense_ = _val_; }

  bool operator==(const PointCloud2& _other) const
  {
    (void) _other;
    return header_ == _other.header_ &&
      height_ == _other.height_ &&
      width_ == _other.width_ &&
      fields_ == _other.fields_ &&
      is_bigendian_ == _other.is_bigendian_ &&
      point_step_ == _other.point_step_ &&
      row_step_ == _other.row_step_ &&
      data_ == _other.data_ &&
      is_dense_ == _other.is_dense_;
  }

  bool operator!=(const PointCloud2& _other) const
  {
    return !(*this == _other);
  }

};

class OdometryPointCloud
{
private:
 ::odom_msgs::Odometry odom_;
 ::odom_msgs::PointCloud2 pcl_;

public:
  OdometryPointCloud() = default;

  explicit OdometryPointCloud(
    const ::odom_msgs::Odometry& odom,
    const ::odom_msgs::PointCloud2& pcl) :
    odom_(odom),
    pcl_(pcl) { }

  const ::odom_msgs::Odometry& odom() const { return this->odom_; }
  ::odom_msgs::Odometry& odom() { return this->odom_; }
  void odom(const ::odom_msgs::Odometry& _val_) { this->odom_ = _val_; }
  void odom(::odom_msgs::Odometry&& _val_) { this->odom_ = _val_; }
  const ::odom_msgs::PointCloud2& pcl() const { return this->pcl_; }
  ::odom_msgs::PointCloud2& pcl() { return this->pcl_; }
  void pcl(const ::odom_msgs::PointCloud2& _val_) { this->pcl_ = _val_; }
  void pcl(::odom_msgs::PointCloud2&& _val_) { this->pcl_ = _val_; }

  bool operator==(const OdometryPointCloud& _other) const
  {
    (void) _other;
    return odom_ == _other.odom_ &&
      pcl_ == _other.pcl_;
  }

  bool operator!=(const OdometryPointCloud& _other) const
  {
    return !(*this == _other);
  }

};

}

#include "dds/topic/TopicTraits.hpp"
#include "org/eclipse/cyclonedds/topic/datatopic.hpp"

namespace org {
namespace eclipse {
namespace cyclonedds {
namespace topic {

template <> constexpr const char* TopicTraits<::odom_msgs::Time>::getTypeName()
{
  return "odom_msgs::Time";
}

template <> constexpr allowable_encodings_t TopicTraits<::odom_msgs::Time>::allowableEncodings()
{
  return 0xFFFFFFFEu;
}

template <> constexpr bool TopicTraits<::odom_msgs::Time>::isKeyless()
{
  return true;
}

template <> constexpr extensibility TopicTraits<::odom_msgs::Time>::getExtensibility()
{
  return extensibility::ext_appendable;
}

#ifdef DDSCXX_HAS_TYPE_DISCOVERY
template<> constexpr unsigned int TopicTraits<::odom_msgs::Time>::type_map_blob_sz() { return 238; }
template<> constexpr unsigned int TopicTraits<::odom_msgs::Time>::type_info_blob_sz() { return 100; }
template<> inline const uint8_t * TopicTraits<::odom_msgs::Time>::type_map_blob() {
  static const uint8_t blob[] = {
 0x4b,  0x00,  0x00,  0x00,  0x01,  0x00,  0x00,  0x00,  0xf1,  0xba,  0xde,  0x67,  0x63,  0xb1,  0xd6,  0xa7, 
 0x2e,  0xce,  0x8a,  0x0e,  0x5d,  0x69,  0x42,  0x00,  0x33,  0x00,  0x00,  0x00,  0xf1,  0x51,  0x02,  0x00, 
 0x01,  0x00,  0x00,  0x00,  0x00,  0x00,  0x00,  0x00,  0x23,  0x00,  0x00,  0x00,  0x02,  0x00,  0x00,  0x00, 
 0x0b,  0x00,  0x00,  0x00,  0x00,  0x00,  0x00,  0x00,  0x01,  0x00,  0x04,  0x74,  0x45,  0x9c,  0xa3,  0x00, 
 0x0b,  0x00,  0x00,  0x00,  0x01,  0x00,  0x00,  0x00,  0x01,  0x00,  0x07,  0xe2,  0x04,  0x64,  0xd5,  0x00, 
 0x72,  0x00,  0x00,  0x00,  0x01,  0x00,  0x00,  0x00,  0xf2,  0xcb,  0xe0,  0x76,  0xc6,  0x49,  0xc0,  0xee, 
 0x9d,  0x34,  0xdb,  0xaa,  0x1a,  0x2f,  0xe8,  0x00,  0x5a,  0x00,  0x00,  0x00,  0xf2,  0x51,  0x02,  0x00, 
 0x18,  0x00,  0x00,  0x00,  0x00,  0x00,  0x00,  0x00,  0x10,  0x00,  0x00,  0x00,  0x6f,  0x64,  0x6f,  0x6d, 
 0x5f,  0x6d,  0x73,  0x67,  0x73,  0x3a,  0x3a,  0x54,  0x69,  0x6d,  0x65,  0x00,  0x36,  0x00,  0x00,  0x00, 
 0x02,  0x00,  0x00,  0x00,  0x12,  0x00,  0x00,  0x00,  0x00,  0x00,  0x00,  0x00,  0x01,  0x00,  0x04,  0x00, 
 0x04,  0x00,  0x00,  0x00,  0x73,  0x65,  0x63,  0x00,  0x00,  0x00,  0x00,  0x00,  0x16,  0x00,  0x00,  0x00, 
 0x01,  0x00,  0x00,  0x00,  0x01,  0x00,  0x07,  0x00,  0x08,  0x00,  0x00,  0x00,  0x6e,  0x61,  0x6e,  0x6f, 
 0x73,  0x65,  0x63,  0x00,  0x00,  0x00,  0x00,  0x00,  0x22,  0x00,  0x00,  0x00,  0x01,  0x00,  0x00,  0x00, 
 0xf2,  0xcb,  0xe0,  0x76,  0xc6,  0x49,  0xc0,  0xee,  0x9d,  0x34,  0xdb,  0xaa,  0x1a,  0x2f,  0xe8,  0xf1, 
 0xba,  0xde,  0x67,  0x63,  0xb1,  0xd6,  0xa7,  0x2e,  0xce,  0x8a,  0x0e,  0x5d,  0x69,  0x42, };
  return blob;
}
template<> inline const uint8_t * TopicTraits<::odom_msgs::Time>::type_info_blob() {
  static const uint8_t blob[] = {
 0x60,  0x00,  0x00,  0x00,  0x01,  0x10,  0x00,  0x40,  0x28,  0x00,  0x00,  0x00,  0x24,  0x00,  0x00,  0x00, 
 0x14,  0x00,  0x00,  0x00,  0xf1,  0xba,  0xde,  0x67,  0x63,  0xb1,  0xd6,  0xa7,  0x2e,  0xce,  0x8a,  0x0e, 
 0x5d,  0x69,  0x42,  0x00,  0x37,  0x00,  0x00,  0x00,  0x00,  0x00,  0x00,  0x00,  0x04,  0x00,  0x00,  0x00, 
 0x00,  0x00,  0x00,  0x00,  0x02,  0x10,  0x00,  0x40,  0x28,  0x00,  0x00,  0x00,  0x24,  0x00,  0x00,  0x00, 
 0x14,  0x00,  0x00,  0x00,  0xf2,  0xcb,  0xe0,  0x76,  0xc6,  0x49,  0xc0,  0xee,  0x9d,  0x34,  0xdb,  0xaa, 
 0x1a,  0x2f,  0xe8,  0x00,  0x5e,  0x00,  0x00,  0x00,  0x00,  0x00,  0x00,  0x00,  0x04,  0x00,  0x00,  0x00, 
 0x00,  0x00,  0x00,  0x00, };
  return blob;
}
#endif //DDSCXX_HAS_TYPE_DISCOVERY

template <> constexpr const char* TopicTraits<::odom_msgs::Header>::getTypeName()
{
  return "odom_msgs::Header";
}

template <> constexpr allowable_encodings_t TopicTraits<::odom_msgs::Header>::allowableEncodings()
{
  return 0xFFFFFFFEu;
}

template <> constexpr bool TopicTraits<::odom_msgs::Header>::isSelfContained()
{
  return false;
}

template <> constexpr bool TopicTraits<::odom_msgs::Header>::isKeyless()
{
  return true;
}

template <> constexpr extensibility TopicTraits<::odom_msgs::Header>::getExtensibility()
{
  return extensibility::ext_appendable;
}

#ifdef DDSCXX_HAS_TYPE_DISCOVERY
template<> constexpr unsigned int TopicTraits<::odom_msgs::Header>::type_map_blob_sz() { return 496; }
template<> constexpr unsigned int TopicTraits<::odom_msgs::Header>::type_info_blob_sz() { return 148; }
template<> inline const uint8_t * TopicTraits<::odom_msgs::Header>::type_map_blob() {
  static const uint8_t blob[] = {
 0xa7,  0x00,  0x00,  0x00,  0x02,  0x00,  0x00,  0x00,  0xf1,  0xb8,  0x99,  0xcd,  0xa8,  0x04,  0x50,  0x32, 
 0xd2,  0x4a,  0x47,  0xeb,  0x3b,  0xa6,  0x1f,  0x00,  0x48,  0x00,  0x00,  0x00,  0xf1,  0x51,  0x02,  0x00, 
 0x01,  0x00,  0x00,  0x00,  0x00,  0x00,  0x00,  0x00,  0x38,  0x00,  0x00,  0x00,  0x02,  0x00,  0x00,  0x00, 
 0x19,  0x00,  0x00,  0x00,  0x00,  0x00,  0x00,  0x00,  0x01,  0x00,  0xf1,  0xba,  0xde,  0x67,  0x63,  0xb1, 
 0xd6,  0xa7,  0x2e,  0xce,  0x8a,  0x0e,  0x5d,  0x69,  0x42,  0x96,  0xb8,  0xc7,  0x8d,  0x00,  0x00,  0x00, 
 0x10,  0x00,  0x00,  0x00,  0x01,  0x00,  0x00,  0x00,  0x01,  0x00,  0x71,  0x00,  0x00,  0x01,  0x00,  0x00, 
 0x4b,  0xb3,  0x9c,  0x5c,  0xf1,  0xba,  0xde,  0x67,  0x63,  0xb1,  0xd6,  0xa7,  0x2e,  0xce,  0x8a,  0x0e, 
 0x5d,  0x69,  0x42,  0x00,  0x33,  0x00,  0x00,  0x00,  0xf1,  0x51,  0x02,  0x00,  0x01,  0x00,  0x00,  0x00, 
 0x00,  0x00,  0x00,  0x00,  0x23,  0x00,  0x00,  0x00,  0x02,  0x00,  0x00,  0x00,  0x0b,  0x00,  0x00,  0x00, 
 0x00,  0x00,  0x00,  0x00,  0x01,  0x00,  0x04,  0x74,  0x45,  0x9c,  0xa3,  0x00,  0x0b,  0x00,  0x00,  0x00, 
 0x01,  0x00,  0x00,  0x00,  0x01,  0x00,  0x07,  0xe2,  0x04,  0x64,  0xd5,  0x00,  0xfa,  0x00,  0x00,  0x00, 
 0x02,  0x00,  0x00,  0x00,  0xf2,  0xa0,  0x7b,  0x6c,  0x10,  0x56,  0xfe,  0xcf,  0xc3,  0x7a,  0xb0,  0x80, 
 0x18,  0xf2,  0xb3,  0x00,  0x73,  0x00,  0x00,  0x00,  0xf2,  0x51,  0x02,  0x00,  0x1a,  0x00,  0x00,  0x00, 
 0x00,  0x00,  0x00,  0x00,  0x12,  0x00,  0x00,  0x00,  0x6f,  0x64,  0x6f,  0x6d,  0x5f,  0x6d,  0x73,  0x67, 
 0x73,  0x3a,  0x3a,  0x48,  0x65,  0x61,  0x64,  0x65,  0x72,  0x00,  0x00,  0x00,  0x4b,  0x00,  0x00,  0x00, 
 0x02,  0x00,  0x00,  0x00,  0x24,  0x00,  0x00,  0x00,  0x00,  0x00,  0x00,  0x00,  0x01,  0x00,  0xf2,  0xcb, 
 0xe0,  0x76,  0xc6,  0x49,  0xc0,  0xee,  0x9d,  0x34,  0xdb,  0xaa,  0x1a,  0x2f,  0xe8,  0x00,  0x00,  0x00, 
 0x06,  0x00,  0x00,  0x00,  0x73,  0x74,  0x61,  0x6d,  0x70,  0x00,  0x00,  0x00,  0x1b,  0x00,  0x00,  0x00, 
 0x01,  0x00,  0x00,  0x00,  0x01,  0x00,  0x71,  0x00,  0x00,  0x01,  0x00,  0x00,  0x09,  0x00,  0x00,  0x00, 
 0x66,  0x72,  0x61,  0x6d,  0x65,  0x5f,  0x69,  0x64,  0x00,  0x00,  0x00,  0xf2,  0xcb,  0xe0,  0x76,  0xc6, 
 0x49,  0xc0,  0xee,  0x9d,  0x34,  0xdb,  0xaa,  0x1a,  0x2f,  0xe8,  0x00,  0x00,  0x5a,  0x00,  0x00,  0x00, 
 0xf2,  0x51,  0x02,  0x00,  0x18,  0x00,  0x00,  0x00,  0x00,  0x00,  0x00,  0x00,  0x10,  0x00,  0x00,  0x00, 
 0x6f,  0x64,  0x6f,  0x6d,  0x5f,  0x6d,  0x73,  0x67,  0x73,  0x3a,  0x3a,  0x54,  0x69,  0x6d,  0x65,  0x00, 
 0x36,  0x00,  0x00,  0x00,  0x02,  0x00,  0x00,  0x00,  0x12,  0x00,  0x00,  0x00,  0x00,  0x00,  0x00,  0x00, 
 0x01,  0x00,  0x04,  0x00,  0x04,  0x00,  0x00,  0x00,  0x73,  0x65,  0x63,  0x00,  0x00,  0x00,  0x00,  0x00, 
 0x16,  0x00,  0x00,  0x00,  0x01,  0x00,  0x00,  0x00,  0x01,  0x00,  0x07,  0x00,  0x08,  0x00,  0x00,  0x00, 
 0x6e,  0x61,  0x6e,  0x6f,  0x73,  0x65,  0x63,  0x00,  0x00,  0x00,  0x00,  0x00,  0x40,  0x00,  0x00,  0x00, 
 0x02,  0x00,  0x00,  0x00,  0xf2,  0xa0,  0x7b,  0x6c,  0x10,  0x56,  0xfe,  0xcf,  0xc3,  0x7a,  0xb0,  0x80, 
 0x18,  0xf2,  0xb3,  0xf1,  0xb8,  0x99,  0xcd,  0xa8,  0x04,  0x50,  0x32,  0xd2,  0x4a,  0x47,  0xeb,  0x3b, 
 0xa6,  0x1f,  0xf2,  0xcb,  0xe0,  0x76,  0xc6,  0x49,  0xc0,  0xee,  0x9d,  0x34,  0xdb,  0xaa,  0x1a,  0x2f, 
 0xe8,  0xf1,  0xba,  0xde,  0x67,  0x63,  0xb1,  0xd6,  0xa7,  0x2e,  0xce,  0x8a,  0x0e,  0x5d,  0x69,  0x42, 
};
  return blob;
}
template<> inline const uint8_t * TopicTraits<::odom_msgs::Header>::type_info_blob() {
  static const uint8_t blob[] = {
 0x90,  0x00,  0x00,  0x00,  0x01,  0x10,  0x00,  0x40,  0x40,  0x00,  0x00,  0x00,  0x3c,  0x00,  0x00,  0x00, 
 0x14,  0x00,  0x00,  0x00,  0xf1,  0xb8,  0x99,  0xcd,  0xa8,  0x04,  0x50,  0x32,  0xd2,  0x4a,  0x47,  0xeb, 
 0x3b,  0xa6,  0x1f,  0x00,  0x4c,  0x00,  0x00,  0x00,  0x01,  0x00,  0x00,  0x00,  0x1c,  0x00,  0x00,  0x00, 
 0x01,  0x00,  0x00,  0x00,  0x14,  0x00,  0x00,  0x00,  0xf1,  0xba,  0xde,  0x67,  0x63,  0xb1,  0xd6,  0xa7, 
 0x2e,  0xce,  0x8a,  0x0e,  0x5d,  0x69,  0x42,  0x00,  0x37,  0x00,  0x00,  0x00,  0x02,  0x10,  0x00,  0x40, 
 0x40,  0x00,  0x00,  0x00,  0x3c,  0x00,  0x00,  0x00,  0x14,  0x00,  0x00,  0x00,  0xf2,  0xa0,  0x7b,  0x6c, 
 0x10,  0x56,  0xfe,  0xcf,  0xc3,  0x7a,  0xb0,  0x80,  0x18,  0xf2,  0xb3,  0x00,  0x77,  0x00,  0x00,  0x00, 
 0x01,  0x00,  0x00,  0x00,  0x1c,  0x00,  0x00,  0x00,  0x01,  0x00,  0x00,  0x00,  0x14,  0x00,  0x00,  0x00, 
 0xf2,  0xcb,  0xe0,  0x76,  0xc6,  0x49,  0xc0,  0xee,  0x9d,  0x34,  0xdb,  0xaa,  0x1a,  0x2f,  0xe8,  0x00, 
 0x5e,  0x00,  0x00,  0x00, };
  return blob;
}
#endif //DDSCXX_HAS_TYPE_DISCOVERY

template <> constexpr const char* TopicTraits<::odom_msgs::Point>::getTypeName()
{
  return "odom_msgs::Point";
}

template <> constexpr allowable_encodings_t TopicTraits<::odom_msgs::Point>::allowableEncodings()
{
  return 0xFFFFFFFEu;
}

template <> constexpr bool TopicTraits<::odom_msgs::Point>::isKeyless()
{
  return true;
}

template <> constexpr extensibility TopicTraits<::odom_msgs::Point>::getExtensibility()
{
  return extensibility::ext_appendable;
}

#ifdef DDSCXX_HAS_TYPE_DISCOVERY
template<> constexpr unsigned int TopicTraits<::odom_msgs::Point>::type_map_blob_sz() { return 266; }
template<> constexpr unsigned int TopicTraits<::odom_msgs::Point>::type_info_blob_sz() { return 100; }
template<> inline const uint8_t * TopicTraits<::odom_msgs::Point>::type_map_blob() {
  static const uint8_t blob[] = {
 0x5b,  0x00,  0x00,  0x00,  0x01,  0x00,  0x00,  0x00,  0xf1,  0xb4,  0x9c,  0x4d,  0x1f,  0x9e,  0x94,  0xb3, 
 0x8f,  0x94,  0x8d,  0xe3,  0x00,  0xef,  0x1d,  0x00,  0x43,  0x00,  0x00,  0x00,  0xf1,  0x51,  0x02,  0x00, 
 0x01,  0x00,  0x00,  0x00,  0x00,  0x00,  0x00,  0x00,  0x33,  0x00,  0x00,  0x00,  0x03,  0x00,  0x00,  0x00, 
 0x0b,  0x00,  0x00,  0x00,  0x00,  0x00,  0x00,  0x00,  0x01,  0x00,  0x0a,  0x9d,  0xd4,  0xe4,  0x61,  0x00, 
 0x0b,  0x00,  0x00,  0x00,  0x01,  0x00,  0x00,  0x00,  0x01,  0x00,  0x0a,  0x41,  0x52,  0x90,  0x76,  0x00, 
 0x0b,  0x00,  0x00,  0x00,  0x02,  0x00,  0x00,  0x00,  0x01,  0x00,  0x0a,  0xfb,  0xad,  0xe9,  0xe3,  0x00, 
 0x80,  0x00,  0x00,  0x00,  0x01,  0x00,  0x00,  0x00,  0xf2,  0x16,  0xaa,  0x86,  0x34,  0x2d,  0xa1,  0x5d, 
 0x83,  0x46,  0x5e,  0xdf,  0x84,  0x94,  0x94,  0x00,  0x68,  0x00,  0x00,  0x00,  0xf2,  0x51,  0x02,  0x00, 
 0x19,  0x00,  0x00,  0x00,  0x00,  0x00,  0x00,  0x00,  0x11,  0x00,  0x00,  0x00,  0x6f,  0x64,  0x6f,  0x6d, 
 0x5f,  0x6d,  0x73,  0x67,  0x73,  0x3a,  0x3a,  0x50,  0x6f,  0x69,  0x6e,  0x74,  0x00,  0x00,  0x00,  0x00, 
 0x40,  0x00,  0x00,  0x00,  0x03,  0x00,  0x00,  0x00,  0x10,  0x00,  0x00,  0x00,  0x00,  0x00,  0x00,  0x00, 
 0x01,  0x00,  0x0a,  0x00,  0x02,  0x00,  0x00,  0x00,  0x78,  0x00,  0x00,  0x00,  0x10,  0x00,  0x00,  0x00, 
 0x01,  0x00,  0x00,  0x00,  0x01,  0x00,  0x0a,  0x00,  0x02,  0x00,  0x00,  0x00,  0x79,  0x00,  0x00,  0x00, 
 0x10,  0x00,  0x00,  0x00,  0x02,  0x00,  0x00,  0x00,  0x01,  0x00,  0x0a,  0x00,  0x02,  0x00,  0x00,  0x00, 
 0x7a,  0x00,  0x00,  0x00,  0x22,  0x00,  0x00,  0x00,  0x01,  0x00,  0x00,  0x00,  0xf2,  0x16,  0xaa,  0x86, 
 0x34,  0x2d,  0xa1,  0x5d,  0x83,  0x46,  0x5e,  0xdf,  0x84,  0x94,  0x94,  0xf1,  0xb4,  0x9c,  0x4d,  0x1f, 
 0x9e,  0x94,  0xb3,  0x8f,  0x94,  0x8d,  0xe3,  0x00,  0xef,  0x1d, };
  return blob;
}
template<> inline const uint8_t * TopicTraits<::odom_msgs::Point>::type_info_blob() {
  static const uint8_t blob[] = {
 0x60,  0x00,  0x00,  0x00,  0x01,  0x10,  0x00,  0x40,  0x28,  0x00,  0x00,  0x00,  0x24,  0x00,  0x00,  0x00, 
 0x14,  0x00,  0x00,  0x00,  0xf1,  0xb4,  0x9c,  0x4d,  0x1f,  0x9e,  0x94,  0xb3,  0x8f,  0x94,  0x8d,  0xe3, 
 0x00,  0xef,  0x1d,  0x00,  0x47,  0x00,  0x00,  0x00,  0x00,  0x00,  0x00,  0x00,  0x04,  0x00,  0x00,  0x00, 
 0x00,  0x00,  0x00,  0x00,  0x02,  0x10,  0x00,  0x40,  0x28,  0x00,  0x00,  0x00,  0x24,  0x00,  0x00,  0x00, 
 0x14,  0x00,  0x00,  0x00,  0xf2,  0x16,  0xaa,  0x86,  0x34,  0x2d,  0xa1,  0x5d,  0x83,  0x46,  0x5e,  0xdf, 
 0x84,  0x94,  0x94,  0x00,  0x6c,  0x00,  0x00,  0x00,  0x00,  0x00,  0x00,  0x00,  0x04,  0x00,  0x00,  0x00, 
 0x00,  0x00,  0x00,  0x00, };
  return blob;
}
#endif //DDSCXX_HAS_TYPE_DISCOVERY

template <> constexpr const char* TopicTraits<::odom_msgs::Quaternion>::getTypeName()
{
  return "odom_msgs::Quaternion";
}

template <> constexpr allowable_encodings_t TopicTraits<::odom_msgs::Quaternion>::allowableEncodings()
{
  return 0xFFFFFFFEu;
}

template <> constexpr bool TopicTraits<::odom_msgs::Quaternion>::isKeyless()
{
  return true;
}

template <> constexpr extensibility TopicTraits<::odom_msgs::Quaternion>::getExtensibility()
{
  return extensibility::ext_appendable;
}

#ifdef DDSCXX_HAS_TYPE_DISCOVERY
template<> constexpr unsigned int TopicTraits<::odom_msgs::Quaternion>::type_map_blob_sz() { return 306; }
template<> constexpr unsigned int TopicTraits<::odom_msgs::Quaternion>::type_info_blob_sz() { return 100; }
template<> inline const uint8_t * TopicTraits<::odom_msgs::Quaternion>::type_map_blob() {
  static const uint8_t blob[] = {
 0x6b,  0x00,  0x00,  0x00,  0x01,  0x00,  0x00,  0x00,  0xf1,  0x33,  0x19,  0xf5,  0x25,  0xa9,  0x0e,  0xfb, 
 0x3c,  0x49,  0x08,  0x3e,  0x5d,  0xd9,  0x26,  0x00,  0x53,  0x00,  0x00,  0x00,  0xf1,  0x51,  0x02,  0x00, 
 0x01,  0x00,  0x00,  0x00,  0x00,  0x00,  0x00,  0x00,  0x43,  0x00,  0x00,  0x00,  0x04,  0x00,  0x00,  0x00, 
 0x0b,  0x00,  0x00,  0x00,  0x00,  0x00,  0x00,  0x00,  0x01,  0x00,  0x0a,  0x9d,  0xd4,  0xe4,  0x61,  0x00, 
 0x0b,  0x00,  0x00,  0x00,  0x01,  0x00,  0x00,  0x00,  0x01,  0x00,  0x0a,  0x41,  0x52,  0x90,  0x76,  0x00, 
 0x0b,  0x00,  0x00,  0x00,  0x02,  0x00,  0x00,  0x00,  0x01,  0x00,  0x0a,  0xfb,  0xad,  0xe9,  0xe3,  0x00, 
 0x0b,  0x00,  0x00,  0x00,  0x03,  0x00,  0x00,  0x00,  0x01,  0x00,  0x0a,  0xf1,  0x29,  0x01,  0x86,  0x00, 
 0x98,  0x00,  0x00,  0x00,  0x01,  0x00,  0x00,  0x00,  0xf2,  0x3b,  0xc4,  0x62,  0xe4,  0x6e,  0xa4,  0x1c, 
 0x7e,  0xdd,  0x59,  0x05,  0x5d,  0xd3,  0x0e,  0x00,  0x80,  0x00,  0x00,  0x00,  0xf2,  0x51,  0x02,  0x00, 
 0x1e,  0x00,  0x00,  0x00,  0x00,  0x00,  0x00,  0x00,  0x16,  0x00,  0x00,  0x00,  0x6f,  0x64,  0x6f,  0x6d, 
 0x5f,  0x6d,  0x73,  0x67,  0x73,  0x3a,  0x3a,  0x51,  0x75,  0x61,  0x74,  0x65,  0x72,  0x6e,  0x69,  0x6f, 
 0x6e,  0x00,  0x00,  0x00,  0x54,  0x00,  0x00,  0x00,  0x04,  0x00,  0x00,  0x00,  0x10,  0x00,  0x00,  0x00, 
 0x00,  0x00,  0x00,  0x00,  0x01,  0x00,  0x0a,  0x00,  0x02,  0x00,  0x00,  0x00,  0x78,  0x00,  0x00,  0x00, 
 0x10,  0x00,  0x00,  0x00,  0x01,  0x00,  0x00,  0x00,  0x01,  0x00,  0x0a,  0x00,  0x02,  0x00,  0x00,  0x00, 
 0x79,  0x00,  0x00,  0x00,  0x10,  0x00,  0x00,  0x00,  0x02,  0x00,  0x00,  0x00,  0x01,  0x00,  0x0a,  0x00, 
 0x02,  0x00,  0x00,  0x00,  0x7a,  0x00,  0x00,  0x00,  0x10,  0x00,  0x00,  0x00,  0x03,  0x00,  0x00,  0x00, 
 0x01,  0x00,  0x0a,  0x00,  0x02,  0x00,  0x00,  0x00,  0x77,  0x00,  0x00,  0x00,  0x22,  0x00,  0x00,  0x00, 
 0x01,  0x00,  0x00,  0x00,  0xf2,  0x3b,  0xc4,  0x62,  0xe4,  0x6e,  0xa4,  0x1c,  0x7e,  0xdd,  0x59,  0x05, 
 0x5d,  0xd3,  0x0e,  0xf1,  0x33,  0x19,  0xf5,  0x25,  0xa9,  0x0e,  0xfb,  0x3c,  0x49,  0x08,  0x3e,  0x5d, 
 0xd9,  0x26, };
  return blob;
}
template<> inline const uint8_t * TopicTraits<::odom_msgs::Quaternion>::type_info_blob() {
  static const uint8_t blob[] = {
 0x60,  0x00,  0x00,  0x00,  0x01,  0x10,  0x00,  0x40,  0x28,  0x00,  0x00,  0x00,  0x24,  0x00,  0x00,  0x00, 
 0x14,  0x00,  0x00,  0x00,  0xf1,  0x33,  0x19,  0xf5,  0x25,  0xa9,  0x0e,  0xfb,  0x3c,  0x49,  0x08,  0x3e, 
 0x5d,  0xd9,  0x26,  0x00,  0x57,  0x00,  0x00,  0x00,  0x00,  0x00,  0x00,  0x00,  0x04,  0x00,  0x00,  0x00, 
 0x00,  0x00,  0x00,  0x00,  0x02,  0x10,  0x00,  0x40,  0x28,  0x00,  0x00,  0x00,  0x24,  0x00,  0x00,  0x00, 
 0x14,  0x00,  0x00,  0x00,  0xf2,  0x3b,  0xc4,  0x62,  0xe4,  0x6e,  0xa4,  0x1c,  0x7e,  0xdd,  0x59,  0x05, 
 0x5d,  0xd3,  0x0e,  0x00,  0x84,  0x00,  0x00,  0x00,  0x00,  0x00,  0x00,  0x00,  0x04,  0x00,  0x00,  0x00, 
 0x00,  0x00,  0x00,  0x00, };
  return blob;
}
#endif //DDSCXX_HAS_TYPE_DISCOVERY

template <> constexpr const char* TopicTraits<::odom_msgs::Pose>::getTypeName()
{
  return "odom_msgs::Pose";
}

template <> constexpr allowable_encodings_t TopicTraits<::odom_msgs::Pose>::allowableEncodings()
{
  return 0xFFFFFFFEu;
}

template <> constexpr bool TopicTraits<::odom_msgs::Pose>::isKeyless()
{
  return true;
}

template <> constexpr extensibility TopicTraits<::odom_msgs::Pose>::getExtensibility()
{
  return extensibility::ext_appendable;
}

#ifdef DDSCXX_HAS_TYPE_DISCOVERY
template<> constexpr unsigned int TopicTraits<::odom_msgs::Pose>::type_map_blob_sz() { return 830; }
template<> constexpr unsigned int TopicTraits<::odom_msgs::Pose>::type_info_blob_sz() { return 196; }
template<> inline const uint8_t * TopicTraits<::odom_msgs::Pose>::type_map_blob() {
  static const uint8_t blob[] = {
 0x27,  0x01,  0x00,  0x00,  0x03,  0x00,  0x00,  0x00,  0xf1,  0xbe,  0xdb,  0xdd,  0xbd,  0x08,  0xba,  0xcb, 
 0xdd,  0x2e,  0xc2,  0xef,  0xad,  0x80,  0x24,  0x00,  0x51,  0x00,  0x00,  0x00,  0xf1,  0x51,  0x02,  0x00, 
 0x01,  0x00,  0x00,  0x00,  0x00,  0x00,  0x00,  0x00,  0x41,  0x00,  0x00,  0x00,  0x02,  0x00,  0x00,  0x00, 
 0x19,  0x00,  0x00,  0x00,  0x00,  0x00,  0x00,  0x00,  0x01,  0x00,  0xf1,  0xb4,  0x9c,  0x4d,  0x1f,  0x9e, 
 0x94,  0xb3,  0x8f,  0x94,  0x8d,  0xe3,  0x00,  0xef,  0x1d,  0x47,  0x57,  0xfe,  0x07,  0x00,  0x00,  0x00, 
 0x19,  0x00,  0x00,  0x00,  0x01,  0x00,  0x00,  0x00,  0x01,  0x00,  0xf1,  0x33,  0x19,  0xf5,  0x25,  0xa9, 
 0x0e,  0xfb,  0x3c,  0x49,  0x08,  0x3e,  0x5d,  0xd9,  0x26,  0xda,  0x16,  0x39,  0x42,  0xf1,  0xb4,  0x9c, 
 0x4d,  0x1f,  0x9e,  0x94,  0xb3,  0x8f,  0x94,  0x8d,  0xe3,  0x00,  0xef,  0x1d,  0x43,  0x00,  0x00,  0x00, 
 0xf1,  0x51,  0x02,  0x00,  0x01,  0x00,  0x00,  0x00,  0x00,  0x00,  0x00,  0x00,  0x33,  0x00,  0x00,  0x00, 
 0x03,  0x00,  0x00,  0x00,  0x0b,  0x00,  0x00,  0x00,  0x00,  0x00,  0x00,  0x00,  0x01,  0x00,  0x0a,  0x9d, 
 0xd4,  0xe4,  0x61,  0x00,  0x0b,  0x00,  0x00,  0x00,  0x01,  0x00,  0x00,  0x00,  0x01,  0x00,  0x0a,  0x41, 
 0x52,  0x90,  0x76,  0x00,  0x0b,  0x00,  0x00,  0x00,  0x02,  0x00,  0x00,  0x00,  0x01,  0x00,  0x0a,  0xfb, 
 0xad,  0xe9,  0xe3,  0xf1,  0x33,  0x19,  0xf5,  0x25,  0xa9,  0x0e,  0xfb,  0x3c,  0x49,  0x08,  0x3e,  0x5d, 
 0xd9,  0x26,  0x00,  0x00,  0x53,  0x00,  0x00,  0x00,  0xf1,  0x51,  0x02,  0x00,  0x01,  0x00,  0x00,  0x00, 
 0x00,  0x00,  0x00,  0x00,  0x43,  0x00,  0x00,  0x00,  0x04,  0x00,  0x00,  0x00,  0x0b,  0x00,  0x00,  0x00, 
 0x00,  0x00,  0x00,  0x00,  0x01,  0x00,  0x0a,  0x9d,  0xd4,  0xe4,  0x61,  0x00,  0x0b,  0x00,  0x00,  0x00, 
 0x01,  0x00,  0x00,  0x00,  0x01,  0x00,  0x0a,  0x41,  0x52,  0x90,  0x76,  0x00,  0x0b,  0x00,  0x00,  0x00, 
 0x02,  0x00,  0x00,  0x00,  0x01,  0x00,  0x0a,  0xfb,  0xad,  0xe9,  0xe3,  0x00,  0x0b,  0x00,  0x00,  0x00, 
 0x03,  0x00,  0x00,  0x00,  0x01,  0x00,  0x0a,  0xf1,  0x29,  0x01,  0x86,  0x00,  0xac,  0x01,  0x00,  0x00, 
 0x03,  0x00,  0x00,  0x00,  0xf2,  0x8d,  0x5f,  0x8c,  0xe7,  0x67,  0x92,  0x58,  0x97,  0xa8,  0xd5,  0xcb, 
 0x60,  0x14,  0xa9,  0x00,  0x82,  0x00,  0x00,  0x00,  0xf2,  0x51,  0x02,  0x00,  0x18,  0x00,  0x00,  0x00, 
 0x00,  0x00,  0x00,  0x00,  0x10,  0x00,  0x00,  0x00,  0x6f,  0x64,  0x6f,  0x6d,  0x5f,  0x6d,  0x73,  0x67, 
 0x73,  0x3a,  0x3a,  0x50,  0x6f,  0x73,  0x65,  0x00,  0x5e,  0x00,  0x00,  0x00,  0x02,  0x00,  0x00,  0x00, 
 0x27,  0x00,  0x00,  0x00,  0x00,  0x00,  0x00,  0x00,  0x01,  0x00,  0xf2,  0x16,  0xaa,  0x86,  0x34,  0x2d, 
 0xa1,  0x5d,  0x83,  0x46,  0x5e,  0xdf,  0x84,  0x94,  0x94,  0x00,  0x00,  0x00,  0x09,  0x00,  0x00,  0x00, 
 0x70,  0x6f,  0x73,  0x69,  0x74,  0x69,  0x6f,  0x6e,  0x00,  0x00,  0x00,  0x00,  0x2a,  0x00,  0x00,  0x00, 
 0x01,  0x00,  0x00,  0x00,  0x01,  0x00,  0xf2,  0x3b,  0xc4,  0x62,  0xe4,  0x6e,  0xa4,  0x1c,  0x7e,  0xdd, 
 0x59,  0x05,  0x5d,  0xd3,  0x0e,  0x00,  0x00,  0x00,  0x0c,  0x00,  0x00,  0x00,  0x6f,  0x72,  0x69,  0x65, 
 0x6e,  0x74,  0x61,  0x74,  0x69,  0x6f,  0x6e,  0x00,  0x00,  0x00,  0xf2,  0x16,  0xaa,  0x86,  0x34,  0x2d, 
 0xa1,  0x5d,  0x83,  0x46,  0x5e,  0xdf,  0x84,  0x94,  0x94,  0x00,  0x00,  0x00,  0x68,  0x00,  0x00,  0x00, 
 0xf2,  0x51,  0x02,  0x00,  0x19,  0x00,  0x00,  0x00,  0x00,  0x00,  0x00,  0x00,  0x11,  0x00,  0x00,  0x00, 
 0x6f,  0x64,  0x6f,  0x6d,  0x5f,  0x6d,  0x73,  0x67,  0x73,  0x3a,  0x3a,  0x50,  0x6f,  0x69,  0x6e,  0x74, 
 0x00,  0x00,  0x00,  0x00,  0x40,  0x00,  0x00,  0x00,  0x03,  0x00,  0x00,  0x00,  0x10,  0x00,  0x00,  0x00, 
 0x00,  0x00,  0x00,  0x00,  0x01,  0x00,  0x0a,  0x00,  0x02,  0x00,  0x00,  0x00,  0x78,  0x00,  0x00,  0x00, 
 0x10,  0x00,  0x00,  0x00,  0x01,  0x00,  0x00,  0x00,  0x01,  0x00,  0x0a,  0x00,  0x02,  0x00,  0x00,  0x00, 
 0x79,  0x00,  0x00,  0x00,  0x10,  0x00,  0x00,  0x00,  0x02,  0x00,  0x00,  0x00,  0x01,  0x00,  0x0a,  0x00, 
 0x02,  0x00,  0x00,  0x00,  0x7a,  0x00,  0x00,  0x00,  0xf2,  0x3b,  0xc4,  0x62,  0xe4,  0x6e,  0xa4,  0x1c, 
 0x7e,  0xdd,  0x59,  0x05,  0x5d,  0xd3,  0x0e,  0x00,  0x80,  0x00,  0x00,  0x00,  0xf2,  0x51,  0x02,  0x00, 
 0x1e,  0x00,  0x00,  0x00,  0x00,  0x00,  0x00,  0x00,  0x16,  0x00,  0x00,  0x00,  0x6f,  0x64,  0x6f,  0x6d, 
 0x5f,  0x6d,  0x73,  0x67,  0x73,  0x3a,  0x3a,  0x51,  0x75,  0x61,  0x74,  0x65,  0x72,  0x6e,  0x69,  0x6f, 
 0x6e,  0x00,  0x00,  0x00,  0x54,  0x00,  0x00,  0x00,  0x04,  0x00,  0x00,  0x00,  0x10,  0x00,  0x00,  0x00, 
 0x00,  0x00,  0x00,  0x00,  0x01,  0x00,  0x0a,  0x00,  0x02,  0x00,  0x00,  0x00,  0x78,  0x00,  0x00,  0x00, 
 0x10,  0x00,  0x00,  0x00,  0x01,  0x00,  0x00,  0x00,  0x01,  0x00,  0x0a,  0x00,  0x02,  0x00,  0x00,  0x00, 
 0x79,  0x00,  0x00,  0x00,  0x10,  0x00,  0x00,  0x00,  0x02,  0x00,  0x00,  0x00,  0x01,  0x00,  0x0a,  0x00, 
 0x02,  0x00,  0x00,  0x00,  0x7a,  0x00,  0x00,  0x00,  0x10,  0x00,  0x00,  0x00,  0x03,  0x00,  0x00,  0x00, 
 0x01,  0x00,  0x0a,  0x00,  0x02,  0x00,  0x00,  0x00,  0x77,  0x00,  0x00,  0x00,  0x5e,  0x00,  0x00,  0x00, 
 0x03,  0x00,  0x00,  0x00,  0xf2,  0x8d,  0x5f,  0x8c,  0xe7,  0x67,  0x92,  0x58,  0x97,  0xa8,  0xd5,  0xcb, 
 0x60,  0x14,  0xa9,  0xf1,  0xbe,  0xdb,  0xdd,  0xbd,  0x08,  0xba,  0xcb,  0xdd,  0x2e,  0xc2,  0xef,  0xad, 
 0x80,  0x24,  0xf2,  0x16,  0xaa,  0x86,  0x34,  0x2d,  0xa1,  0x5d,  0x83,  0x46,  0x5e,  0xdf,  0x84,  0x94, 
 0x94,  0xf1,  0xb4,  0x9c,  0x4d,  0x1f,  0x9e,  0x94,  0xb3,  0x8f,  0x94,  0x8d,  0xe3,  0x00,  0xef,  0x1d, 
 0xf2,  0x3b,  0xc4,  0x62,  0xe4,  0x6e,  0xa4,  0x1c,  0x7e,  0xdd,  0x59,  0x05,  0x5d,  0xd3,  0x0e,  0xf1, 
 0x33,  0x19,  0xf5,  0x25,  0xa9,  0x0e,  0xfb,  0x3c,  0x49,  0x08,  0x3e,  0x5d,  0xd9,  0x26, };
  return blob;
}
template<> inline const uint8_t * TopicTraits<::odom_msgs::Pose>::type_info_blob() {
  static const uint8_t blob[] = {
 0xc0,  0x00,  0x00,  0x00,  0x01,  0x10,  0x00,  0x40,  0x58,  0x00,  0x00,  0x00,  0x54,  0x00,  0x00,  0x00, 
 0x14,  0x00,  0x00,  0x00,  0xf1,  0xbe,  0xdb,  0xdd,  0xbd,  0x08,  0xba,  0xcb,  0xdd,  0x2e,  0xc2,  0xef, 
 0xad,  0x80,  0x24,  0x00,  0x55,  0x00,  0x00,  0x00,  0x02,  0x00,  0x00,  0x00,  0x34,  0x00,  0x00,  0x00, 
 0x02,  0x00,  0x00,  0x00,  0x14,  0x00,  0x00,  0x00,  0xf1,  0xb4,  0x9c,  0x4d,  0x1f,  0x9e,  0x94,  0xb3, 
 0x8f,  0x94,  0x8d,  0xe3,  0x00,  0xef,  0x1d,  0x00,  0x47,  0x00,  0x00,  0x00,  0x14,  0x00,  0x00,  0x00, 
 0xf1,  0x33,  0x19,  0xf5,  0x25,  0xa9,  0x0e,  0xfb,  0x3c,  0x49,  0x08,  0x3e,  0x5d,  0xd9,  0x26,  0x00, 
 0x57,  0x00,  0x00,  0x00,  0x02,  0x10,  0x00,  0x40,  0x58,  0x00,  0x00,  0x00,  0x54,  0x00,  0x00,  0x00, 
 0x14,  0x00,  0x00,  0x00,  0xf2,  0x8d,  0x5f,  0x8c,  0xe7,  0x67,  0x92,  0x58,  0x97,  0xa8,  0xd5,  0xcb, 
 0x60,  0x14,  0xa9,  0x00,  0x86,  0x00,  0x00,  0x00,  0x02,  0x00,  0x00,  0x00,  0x34,  0x00,  0x00,  0x00, 
 0x02,  0x00,  0x00,  0x00,  0x14,  0x00,  0x00,  0x00,  0xf2,  0x16,  0xaa,  0x86,  0x34,  0x2d,  0xa1,  0x5d, 
 0x83,  0x46,  0x5e,  0xdf,  0x84,  0x94,  0x94,  0x00,  0x6c,  0x00,  0x00,  0x00,  0x14,  0x00,  0x00,  0x00, 
 0xf2,  0x3b,  0xc4,  0x62,  0xe4,  0x6e,  0xa4,  0x1c,  0x7e,  0xdd,  0x59,  0x05,  0x5d,  0xd3,  0x0e,  0x00, 
 0x84,  0x00,  0x00,  0x00, };
  return blob;
}
#endif //DDSCXX_HAS_TYPE_DISCOVERY

template <> constexpr const char* TopicTraits<::odom_msgs::Twist>::getTypeName()
{
  return "odom_msgs::Twist";
}

template <> constexpr allowable_encodings_t TopicTraits<::odom_msgs::Twist>::allowableEncodings()
{
  return 0xFFFFFFFEu;
}

template <> constexpr bool TopicTraits<::odom_msgs::Twist>::isKeyless()
{
  return true;
}

template <> constexpr extensibility TopicTraits<::odom_msgs::Twist>::getExtensibility()
{
  return extensibility::ext_appendable;
}

#ifdef DDSCXX_HAS_TYPE_DISCOVERY
template<> constexpr unsigned int TopicTraits<::odom_msgs::Twist>::type_map_blob_sz() { return 548; }
template<> constexpr unsigned int TopicTraits<::odom_msgs::Twist>::type_info_blob_sz() { return 148; }
template<> inline const uint8_t * TopicTraits<::odom_msgs::Twist>::type_map_blob() {
  static const uint8_t blob[] = {
 0xbf,  0x00,  0x00,  0x00,  0x02,  0x00,  0x00,  0x00,  0xf1,  0xfe,  0xbb,  0x45,  0xea,  0x92,  0x8f,  0x46, 
 0x28,  0xd5,  0x90,  0xef,  0x77,  0x51,  0x0c,  0x00,  0x51,  0x00,  0x00,  0x00,  0xf1,  0x51,  0x02,  0x00, 
 0x01,  0x00,  0x00,  0x00,  0x00,  0x00,  0x00,  0x00,  0x41,  0x00,  0x00,  0x00,  0x02,  0x00,  0x00,  0x00, 
 0x19,  0x00,  0x00,  0x00,  0x00,  0x00,  0x00,  0x00,  0x01,  0x00,  0xf1,  0xb4,  0x9c,  0x4d,  0x1f,  0x9e, 
 0x94,  0xb3,  0x8f,  0x94,  0x8d,  0xe3,  0x00,  0xef,  0x1d,  0x9a,  0x93,  0x2b,  0x3c,  0x00,  0x00,  0x00, 
 0x19,  0x00,  0x00,  0x00,  0x01,  0x00,  0x00,  0x00,  0x01,  0x00,  0xf1,  0xb4,  0x9c,  0x4d,  0x1f,  0x9e, 
 0x94,  0xb3,  0x8f,  0x94,  0x8d,  0xe3,  0x00,  0xef,  0x1d,  0xd1,  0x8b,  0x86,  0x24,  0xf1,  0xb4,  0x9c, 
 0x4d,  0x1f,  0x9e,  0x94,  0xb3,  0x8f,  0x94,  0x8d,  0xe3,  0x00,  0xef,  0x1d,  0x43,  0x00,  0x00,  0x00, 
 0xf1,  0x51,  0x02,  0x00,  0x01,  0x00,  0x00,  0x00,  0x00,  0x00,  0x00,  0x00,  0x33,  0x00,  0x00,  0x00, 
 0x03,  0x00,  0x00,  0x00,  0x0b,  0x00,  0x00,  0x00,  0x00,  0x00,  0x00,  0x00,  0x01,  0x00,  0x0a,  0x9d, 
 0xd4,  0xe4,  0x61,  0x00,  0x0b,  0x00,  0x00,  0x00,  0x01,  0x00,  0x00,  0x00,  0x01,  0x00,  0x0a,  0x41, 
 0x52,  0x90,  0x76,  0x00,  0x0b,  0x00,  0x00,  0x00,  0x02,  0x00,  0x00,  0x00,  0x01,  0x00,  0x0a,  0xfb, 
 0xad,  0xe9,  0xe3,  0x00,  0x18,  0x01,  0x00,  0x00,  0x02,  0x00,  0x00,  0x00,  0xf2,  0x23,  0xa4,  0xe2, 
 0x0c,  0x54,  0xc2,  0x21,  0x6e,  0x04,  0x60,  0xad,  0x3f,  0x44,  0x75,  0x00,  0x82,  0x00,  0x00,  0x00, 
 0xf2,  0x51,  0x02,  0x00,  0x19,  0x00,  0x00,  0x00,  0x00,  0x00,  0x00,  0x00,  0x11,  0x00,  0x00,  0x00, 
 0x6f,  0x64,  0x6f,  0x6d,  0x5f,  0x6d,  0x73,  0x67,  0x73,  0x3a,  0x3a,  0x54,  0x77,  0x69,  0x73,  0x74, 
 0x00,  0x00,  0x00,  0x00,  0x5a,  0x00,  0x00,  0x00,  0x02,  0x00,  0x00,  0x00,  0x25,  0x00,  0x00,  0x00, 
 0x00,  0x00,  0x00,  0x00,  0x01,  0x00,  0xf2,  0x16,  0xaa,  0x86,  0x34,  0x2d,  0xa1,  0x5d,  0x83,  0x46, 
 0x5e,  0xdf,  0x84,  0x94,  0x94,  0x00,  0x00,  0x00,  0x07,  0x00,  0x00,  0x00,  0x6c,  0x69,  0x6e,  0x65, 
 0x61,  0x72,  0x00,  0x00,  0x00,  0x00,  0x00,  0x00,  0x26,  0x00,  0x00,  0x00,  0x01,  0x00,  0x00,  0x00, 
 0x01,  0x00,  0xf2,  0x16,  0xaa,  0x86,  0x34,  0x2d,  0xa1,  0x5d,  0x83,  0x46,  0x5e,  0xdf,  0x84,  0x94, 
 0x94,  0x00,  0x00,  0x00,  0x08,  0x00,  0x00,  0x00,  0x61,  0x6e,  0x67,  0x75,  0x6c,  0x61,  0x72,  0x00, 
 0x00,  0x00,  0xf2,  0x16,  0xaa,  0x86,  0x34,  0x2d,  0xa1,  0x5d,  0x83,  0x46,  0x5e,  0xdf,  0x84,  0x94, 
 0x94,  0x00,  0x00,  0x00,  0x68,  0x00,  0x00,  0x00,  0xf2,  0x51,  0x02,  0x00,  0x19,  0x00,  0x00,  0x00, 
 0x00,  0x00,  0x00,  0x00,  0x11,  0x00,  0x00,  0x00,  0x6f,  0x64,  0x6f,  0x6d,  0x5f,  0x6d,  0x73,  0x67, 
 0x73,  0x3a,  0x3a,  0x50,  0x6f,  0x69,  0x6e,  0x74,  0x00,  0x00,  0x00,  0x00,  0x40,  0x00,  0x00,  0x00, 
 0x03,  0x00,  0x00,  0x00,  0x10,  0x00,  0x00,  0x00,  0x00,  0x00,  0x00,  0x00,  0x01,  0x00,  0x0a,  0x00, 
 0x02,  0x00,  0x00,  0x00,  0x78,  0x00,  0x00,  0x00,  0x10,  0x00,  0x00,  0x00,  0x01,  0x00,  0x00,  0x00, 
 0x01,  0x00,  0x0a,  0x00,  0x02,  0x00,  0x00,  0x00,  0x79,  0x00,  0x00,  0x00,  0x10,  0x00,  0x00,  0x00, 
 0x02,  0x00,  0x00,  0x00,  0x01,  0x00,  0x0a,  0x00,  0x02,  0x00,  0x00,  0x00,  0x7a,  0x00,  0x00,  0x00, 
 0x40,  0x00,  0x00,  0x00,  0x02,  0x00,  0x00,  0x00,  0xf2,  0x23,  0xa4,  0xe2,  0x0c,  0x54,  0xc2,  0x21, 
 0x6e,  0x04,  0x60,  0xad,  0x3f,  0x44,  0x75,  0xf1,  0xfe,  0xbb,  0x45,  0xea,  0x92,  0x8f,  0x46,  0x28, 
 0xd5,  0x90,  0xef,  0x77,  0x51,  0x0c,  0xf2,  0x16,  0xaa,  0x86,  0x34,  0x2d,  0xa1,  0x5d,  0x83,  0x46, 
 0x5e,  0xdf,  0x84,  0x94,  0x94,  0xf1,  0xb4,  0x9c,  0x4d,  0x1f,  0x9e,  0x94,  0xb3,  0x8f,  0x94,  0x8d, 
 0xe3,  0x00,  0xef,  0x1d, };
  return blob;
}
template<> inline const uint8_t * TopicTraits<::odom_msgs::Twist>::type_info_blob() {
  static const uint8_t blob[] = {
 0x90,  0x00,  0x00,  0x00,  0x01,  0x10,  0x00,  0x40,  0x40,  0x00,  0x00,  0x00,  0x3c,  0x00,  0x00,  0x00, 
 0x14,  0x00,  0x00,  0x00,  0xf1,  0xfe,  0xbb,  0x45,  0xea,  0x92,  0x8f,  0x46,  0x28,  0xd5,  0x90,  0xef, 
 0x77,  0x51,  0x0c,  0x00,  0x55,  0x00,  0x00,  0x00,  0x01,  0x00,  0x00,  0x00,  0x1c,  0x00,  0x00,  0x00, 
 0x01,  0x00,  0x00,  0x00,  0x14,  0x00,  0x00,  0x00,  0xf1,  0xb4,  0x9c,  0x4d,  0x1f,  0x9e,  0x94,  0xb3, 
 0x8f,  0x94,  0x8d,  0xe3,  0x00,  0xef,  0x1d,  0x00,  0x47,  0x00,  0x00,  0x00,  0x02,  0x10,  0x00,  0x40, 
 0x40,  0x00,  0x00,  0x00,  0x3c,  0x00,  0x00,  0x00,  0x14,  0x00,  0x00,  0x00,  0xf2,  0x23,  0xa4,  0xe2, 
 0x0c,  0x54,  0xc2,  0x21,  0x6e,  0x04,  0x60,  0xad,  0x3f,  0x44,  0x75,  0x00,  0x86,  0x00,  0x00,  0x00, 
 0x01,  0x00,  0x00,  0x00,  0x1c,  0x00,  0x00,  0x00,  0x01,  0x00,  0x00,  0x00,  0x14,  0x00,  0x00,  0x00, 
 0xf2,  0x16,  0xaa,  0x86,  0x34,  0x2d,  0xa1,  0x5d,  0x83,  0x46,  0x5e,  0xdf,  0x84,  0x94,  0x94,  0x00, 
 0x6c,  0x00,  0x00,  0x00, };
  return blob;
}
#endif //DDSCXX_HAS_TYPE_DISCOVERY

template <> constexpr const char* TopicTraits<::odom_msgs::PoseWithCovariance>::getTypeName()
{
  return "odom_msgs::PoseWithCovariance";
}

template <> constexpr allowable_encodings_t TopicTraits<::odom_msgs::PoseWithCovariance>::allowableEncodings()
{
  return 0xFFFFFFFEu;
}

template <> constexpr bool TopicTraits<::odom_msgs::PoseWithCovariance>::isKeyless()
{
  return true;
}

template <> constexpr extensibility TopicTraits<::odom_msgs::PoseWithCovariance>::getExtensibility()
{
  return extensibility::ext_appendable;
}

#ifdef DDSCXX_HAS_TYPE_DISCOVERY
template<> constexpr unsigned int TopicTraits<::odom_msgs::PoseWithCovariance>::type_map_blob_sz() { return 1116; }
template<> constexpr unsigned int TopicTraits<::odom_msgs::PoseWithCovariance>::type_info_blob_sz() { return 244; }
template<> inline const uint8_t * TopicTraits<::odom_msgs::PoseWithCovariance>::type_map_blob() {
  static const uint8_t blob[] = {
 0x8b,  0x01,  0x00,  0x00,  0x04,  0x00,  0x00,  0x00,  0xf1,  0xe4,  0x4d,  0x68,  0x96,  0x1b,  0xe9,  0x1a, 
 0xd5,  0x9d,  0x0d,  0x41,  0x34,  0xba,  0x7d,  0x00,  0x4e,  0x00,  0x00,  0x00,  0xf1,  0x51,  0x02,  0x00, 
 0x01,  0x00,  0x00,  0x00,  0x00,  0x00,  0x00,  0x00,  0x3e,  0x00,  0x00,  0x00,  0x02,  0x00,  0x00,  0x00, 
 0x19,  0x00,  0x00,  0x00,  0x00,  0x00,  0x00,  0x00,  0x01,  0x00,  0xf1,  0xbe,  0xdb,  0xdd,  0xbd,  0x08, 
 0xba,  0xcb,  0xdd,  0x2e,  0xc2,  0xef,  0xad,  0x80,  0x24,  0x2d,  0x5f,  0x8a,  0xe9,  0x00,  0x00,  0x00, 
 0x16,  0x00,  0x00,  0x00,  0x01,  0x00,  0x00,  0x00,  0x01,  0x00,  0x90,  0xf3,  0x01,  0x00,  0x00,  0x00, 
 0x01,  0x00,  0x00,  0x00,  0x24,  0x0a,  0xac,  0xdb,  0x06,  0x55,  0xf1,  0xbe,  0xdb,  0xdd,  0xbd,  0x08, 
 0xba,  0xcb,  0xdd,  0x2e,  0xc2,  0xef,  0xad,  0x80,  0x24,  0x00,  0x00,  0x00,  0x51,  0x00,  0x00,  0x00, 
 0xf1,  0x51,  0x02,  0x00,  0x01,  0x00,  0x00,  0x00,  0x00,  0x00,  0x00,  0x00,  0x41,  0x00,  0x00,  0x00, 
 0x02,  0x00,  0x00,  0x00,  0x19,  0x00,  0x00,  0x00,  0x00,  0x00,  0x00,  0x00,  0x01,  0x00,  0xf1,  0xb4, 
 0x9c,  0x4d,  0x1f,  0x9e,  0x94,  0xb3,  0x8f,  0x94,  0x8d,  0xe3,  0x00,  0xef,  0x1d,  0x47,  0x57,  0xfe, 
 0x07,  0x00,  0x00,  0x00,  0x19,  0x00,  0x00,  0x00,  0x01,  0x00,  0x00,  0x00,  0x01,  0x00,  0xf1,  0x33, 
 0x19,  0xf5,  0x25,  0xa9,  0x0e,  0xfb,  0x3c,  0x49,  0x08,  0x3e,  0x5d,  0xd9,  0x26,  0xda,  0x16,  0x39, 
 0x42,  0xf1,  0xb4,  0x9c,  0x4d,  0x1f,  0x9e,  0x94,  0xb3,  0x8f,  0x94,  0x8d,  0xe3,  0x00,  0xef,  0x1d, 
 0x43,  0x00,  0x00,  0x00,  0xf1,  0x51,  0x02,  0x00,  0x01,  0x00,  0x00,  0x00,  0x00,  0x00,  0x00,  0x00, 
 0x33,  0x00,  0x00,  0x00,  0x03,  0x00,  0x00,  0x00,  0x0b,  0x00,  0x00,  0x00,  0x00,  0x00,  0x00,  0x00, 
 0x01,  0x00,  0x0a,  0x9d,  0xd4,  0xe4,  0x61,  0x00,  0x0b,  0x00,  0x00,  0x00,  0x01,  0x00,  0x00,  0x00, 
 0x01,  0x00,  0x0a,  0x41,  0x52,  0x90,  0x76,  0x00,  0x0b,  0x00,  0x00,  0x00,  0x02,  0x00,  0x00,  0x00, 
 0x01,  0x00,  0x0a,  0xfb,  0xad,  0xe9,  0xe3,  0xf1,  0x33,  0x19,  0xf5,  0x25,  0xa9,  0x0e,  0xfb,  0x3c, 
 0x49,  0x08,  0x3e,  0x5d,  0xd9,  0x26,  0x00,  0x00,  0x53,  0x00,  0x00,  0x00,  0xf1,  0x51,  0x02,  0x00, 
 0x01,  0x00,  0x00,  0x00,  0x00,  0x00,  0x00,  0x00,  0x43,  0x00,  0x00,  0x00,  0x04,  0x00,  0x00,  0x00, 
 0x0b,  0x00,  0x00,  0x00,  0x00,  0x00,  0x00,  0x00,  0x01,  0x00,  0x0a,  0x9d,  0xd4,  0xe4,  0x61,  0x00, 
 0x0b,  0x00,  0x00,  0x00,  0x01,  0x00,  0x00,  0x00,  0x01,  0x00,  0x0a,  0x41,  0x52,  0x90,  0x76,  0x00, 
 0x0b,  0x00,  0x00,  0x00,  0x02,  0x00,  0x00,  0x00,  0x01,  0x00,  0x0a,  0xfb,  0xad,  0xe9,  0xe3,  0x00, 
 0x0b,  0x00,  0x00,  0x00,  0x03,  0x00,  0x00,  0x00,  0x01,  0x00,  0x0a,  0xf1,  0x29,  0x01,  0x86,  0x00, 
 0x48,  0x02,  0x00,  0x00,  0x04,  0x00,  0x00,  0x00,  0xf2,  0x33,  0x15,  0x07,  0xf7,  0x71,  0x4f,  0xf9, 
 0x53,  0x4c,  0x39,  0x97,  0xc6,  0xaa,  0x2e,  0x00,  0x89,  0x00,  0x00,  0x00,  0xf2,  0x51,  0x02,  0x00, 
 0x26,  0x00,  0x00,  0x00,  0x00,  0x00,  0x00,  0x00,  0x1e,  0x00,  0x00,  0x00,  0x6f,  0x64,  0x6f,  0x6d, 
 0x5f,  0x6d,  0x73,  0x67,  0x73,  0x3a,  0x3a,  0x50,  0x6f,  0x73,  0x65,  0x57,  0x69,  0x74,  0x68,  0x43, 
 0x6f,  0x76,  0x61,  0x72,  0x69,  0x61,  0x6e,  0x63,  0x65,  0x00,  0x00,  0x00,  0x55,  0x00,  0x00,  0x00, 
 0x02,  0x00,  0x00,  0x00,  0x23,  0x00,  0x00,  0x00,  0x00,  0x00,  0x00,  0x00,  0x01,  0x00,  0xf2,  0x8d, 
 0x5f,  0x8c,  0xe7,  0x67,  0x92,  0x58,  0x97,  0xa8,  0xd5,  0xcb,  0x60,  0x14,  0xa9,  0x00,  0x00,  0x00, 
 0x05,  0x00,  0x00,  0x00,  0x70,  0x6f,  0x73,  0x65,  0x00,  0x00,  0x00,  0x00,  0x25,  0x00,  0x00,  0x00, 
 0x01,  0x00,  0x00,  0x00,  0x01,  0x00,  0x90,  0xf3,  0x01,  0x00,  0x00,  0x00,  0x01,  0x00,  0x00,  0x00, 
 0x24,  0x0a,  0x00,  0x00,  0x0b,  0x00,  0x00,  0x00,  0x63,  0x6f,  0x76,  0x61,  0x72,  0x69,  0x61,  0x6e, 
 0x63,  0x65,  0x00,  0x00,  0x00,  0xf2,  0x8d,  0x5f,  0x8c,  0xe7,  0x67,  0x92,  0x58,  0x97,  0xa8,  0xd5, 
 0xcb,  0x60,  0x14,  0xa9,  0x82,  0x00,  0x00,  0x00,  0xf2,  0x51,  0x02,  0x00,  0x18,  0x00,  0x00,  0x00, 
 0x00,  0x00,  0x00,  0x00,  0x10,  0x00,  0x00,  0x00,  0x6f,  0x64,  0x6f,  0x6d,  0x5f,  0x6d,  0x73,  0x67, 
 0x73,  0x3a,  0x3a,  0x50,  0x6f,  0x73,  0x65,  0x00,  0x5e,  0x00,  0x00,  0x00,  0x02,  0x00,  0x00,  0x00, 
 0x27,  0x00,  0x00,  0x00,  0x00,  0x00,  0x00,  0x00,  0x01,  0x00,  0xf2,  0x16,  0xaa,  0x86,  0x34,  0x2d, 
 0xa1,  0x5d,  0x83,  0x46,  0x5e,  0xdf,  0x84,  0x94,  0x94,  0x00,  0x00,  0x00,  0x09,  0x00,  0x00,  0x00, 
 0x70,  0x6f,  0x73,  0x69,  0x74,  0x69,  0x6f,  0x6e,  0x00,  0x00,  0x00,  0x00,  0x2a,  0x00,  0x00,  0x00, 
 0x01,  0x00,  0x00,  0x00,  0x01,  0x00,  0xf2,  0x3b,  0xc4,  0x62,  0xe4,  0x6e,  0xa4,  0x1c,  0x7e,  0xdd, 
 0x59,  0x05,  0x5d,  0xd3,  0x0e,  0x00,  0x00,  0x00,  0x0c,  0x00,  0x00,  0x00,  0x6f,  0x72,  0x69,  0x65, 
 0x6e,  0x74,  0x61,  0x74,  0x69,  0x6f,  0x6e,  0x00,  0x00,  0x00,  0xf2,  0x16,  0xaa,  0x86,  0x34,  0x2d, 
 0xa1,  0x5d,  0x83,  0x46,  0x5e,  0xdf,  0x84,  0x94,  0x94,  0x00,  0x00,  0x00,  0x68,  0x00,  0x00,  0x00, 
 0xf2,  0x51,  0x02,  0x00,  0x19,  0x00,  0x00,  0x00,  0x00,  0x00,  0x00,  0x00,  0x11,  0x00,  0x00,  0x00, 
 0x6f,  0x64,  0x6f,  0x6d,  0x5f,  0x6d,  0x73,  0x67,  0x73,  0x3a,  0x3a,  0x50,  0x6f,  0x69,  0x6e,  0x74, 
 0x00,  0x00,  0x00,  0x00,  0x40,  0x00,  0x00,  0x00,  0x03,  0x00,  0x00,  0x00,  0x10,  0x00,  0x00,  0x00, 
 0x00,  0x00,  0x00,  0x00,  0x01,  0x00,  0x0a,  0x00,  0x02,  0x00,  0x00,  0x00,  0x78,  0x00,  0x00,  0x00, 
 0x10,  0x00,  0x00,  0x00,  0x01,  0x00,  0x00,  0x00,  0x01,  0x00,  0x0a,  0x00,  0x02,  0x00,  0x00,  0x00, 
 0x79,  0x00,  0x00,  0x00,  0x10,  0x00,  0x00,  0x00,  0x02,  0x00,  0x00,  0x00,  0x01,  0x00,  0x0a,  0x00, 
 0x02,  0x00,  0x00,  0x00,  0x7a,  0x00,  0x00,  0x00,  0xf2,  0x3b,  0xc4,  0x62,  0xe4,  0x6e,  0xa4,  0x1c, 
 0x7e,  0xdd,  0x59,  0x05,  0x5d,  0xd3,  0x0e,  0x00,  0x80,  0x00,  0x00,  0x00,  0xf2,  0x51,  0x02,  0x00, 
 0x1e,  0x00,  0x00,  0x00,  0x00,  0x00,  0x00,  0x00,  0x16,  0x00,  0x00,  0x00,  0x6f,  0x64,  0x6f,  0x6d, 
 0x5f,  0x6d,  0x73,  0x67,  0x73,  0x3a,  0x3a,  0x51,  0x75,  0x61,  0x74,  0x65,  0x72,  0x6e,  0x69,  0x6f, 
 0x6e,  0x00,  0x00,  0x00,  0x54,  0x00,  0x00,  0x00,  0x04,  0x00,  0x00,  0x00,  0x10,  0x00,  0x00,  0x00, 
 0x00,  0x00,  0x00,  0x00,  0x01,  0x00,  0x0a,  0x00,  0x02,  0x00,  0x00,  0x00,  0x78,  0x00,  0x00,  0x00, 
 0x10,  0x00,  0x00,  0x00,  0x01,  0x00,  0x00,  0x00,  0x01,  0x00,  0x0a,  0x00,  0x02,  0x00,  0x00,  0x00, 
 0x79,  0x00,  0x00,  0x00,  0x10,  0x00,  0x00,  0x00,  0x02,  0x00,  0x00,  0x00,  0x01,  0x00,  0x0a,  0x00, 
 0x02,  0x00,  0x00,  0x00,  0x7a,  0x00,  0x00,  0x00,  0x10,  0x00,  0x00,  0x00,  0x03,  0x00,  0x00,  0x00, 
 0x01,  0x00,  0x0a,  0x00,  0x02,  0x00,  0x00,  0x00,  0x77,  0x00,  0x00,  0x00,  0x7c,  0x00,  0x00,  0x00, 
 0x04,  0x00,  0x00,  0x00,  0xf2,  0x33,  0x15,  0x07,  0xf7,  0x71,  0x4f,  0xf9,  0x53,  0x4c,  0x39,  0x97, 
 0xc6,  0xaa,  0x2e,  0xf1,  0xe4,  0x4d,  0x68,  0x96,  0x1b,  0xe9,  0x1a,  0xd5,  0x9d,  0x0d,  0x41,  0x34, 
 0xba,  0x7d,  0xf2,  0x8d,  0x5f,  0x8c,  0xe7,  0x67,  0x92,  0x58,  0x97,  0xa8,  0xd5,  0xcb,  0x60,  0x14, 
 0xa9,  0xf1,  0xbe,  0xdb,  0xdd,  0xbd,  0x08,  0xba,  0xcb,  0xdd,  0x2e,  0xc2,  0xef,  0xad,  0x80,  0x24, 
 0xf2,  0x16,  0xaa,  0x86,  0x34,  0x2d,  0xa1,  0x5d,  0x83,  0x46,  0x5e,  0xdf,  0x84,  0x94,  0x94,  0xf1, 
 0xb4,  0x9c,  0x4d,  0x1f,  0x9e,  0x94,  0xb3,  0x8f,  0x94,  0x8d,  0xe3,  0x00,  0xef,  0x1d,  0xf2,  0x3b, 
 0xc4,  0x62,  0xe4,  0x6e,  0xa4,  0x1c,  0x7e,  0xdd,  0x59,  0x05,  0x5d,  0xd3,  0x0e,  0xf1,  0x33,  0x19, 
 0xf5,  0x25,  0xa9,  0x0e,  0xfb,  0x3c,  0x49,  0x08,  0x3e,  0x5d,  0xd9,  0x26, };
  return blob;
}
template<> inline const uint8_t * TopicTraits<::odom_msgs::PoseWithCovariance>::type_info_blob() {
  static const uint8_t blob[] = {
 0xf0,  0x00,  0x00,  0x00,  0x01,  0x10,  0x00,  0x40,  0x70,  0x00,  0x00,  0x00,  0x6c,  0x00,  0x00,  0x00, 
 0x14,  0x00,  0x00,  0x00,  0xf1,  0xe4,  0x4d,  0x68,  0x96,  0x1b,  0xe9,  0x1a,  0xd5,  0x9d,  0x0d,  0x41, 
 0x34,  0xba,  0x7d,  0x00,  0x52,  0x00,  0x00,  0x00,  0x03,  0x00,  0x00,  0x00,  0x4c,  0x00,  0x00,  0x00, 
 0x03,  0x00,  0x00,  0x00,  0x14,  0x00,  0x00,  0x00,  0xf1,  0xbe,  0xdb,  0xdd,  0xbd,  0x08,  0xba,  0xcb, 
 0xdd,  0x2e,  0xc2,  0xef,  0xad,  0x80,  0x24,  0x00,  0x55,  0x00,  0x00,  0x00,  0x14,  0x00,  0x00,  0x00, 
 0xf1,  0xb4,  0x9c,  0x4d,  0x1f,  0x9e,  0x94,  0xb3,  0x8f,  0x94,  0x8d,  0xe3,  0x00,  0xef,  0x1d,  0x00, 
 0x47,  0x00,  0x00,  0x00,  0x14,  0x00,  0x00,  0x00,  0xf1,  0x33,  0x19,  0xf5,  0x25,  0xa9,  0x0e,  0xfb, 
 0x3c,  0x49,  0x08,  0x3e,  0x5d,  0xd9,  0x26,  0x00,  0x57,  0x00,  0x00,  0x00,  0x02,  0x10,  0x00,  0x40, 
 0x70,  0x00,  0x00,  0x00,  0x6c,  0x00,  0x00,  0x00,  0x14,  0x00,  0x00,  0x00,  0xf2,  0x33,  0x15,  0x07, 
 0xf7,  0x71,  0x4f,  0xf9,  0x53,  0x4c,  0x39,  0x97,  0xc6,  0xaa,  0x2e,  0x00,  0x8d,  0x00,  0x00,  0x00, 
 0x03,  0x00,  0x00,  0x00,  0x4c,  0x00,  0x00,  0x00,  0x03,  0x00,  0x00,  0x00,  0x14,  0x00,  0x00,  0x00, 
 0xf2,  0x8d,  0x5f,  0x8c,  0xe7,  0x67,  0x92,  0x58,  0x97,  0xa8,  0xd5,  0xcb,  0x60,  0x14,  0xa9,  0x00, 
 0x86,  0x00,  0x00,  0x00,  0x14,  0x00,  0x00,  0x00,  0xf2,  0x16,  0xaa,  0x86,  0x34,  0x2d,  0xa1,  0x5d, 
 0x83,  0x46,  0x5e,  0xdf,  0x84,  0x94,  0x94,  0x00,  0x6c,  0x00,  0x00,  0x00,  0x14,  0x00,  0x00,  0x00, 
 0xf2,  0x3b,  0xc4,  0x62,  0xe4,  0x6e,  0xa4,  0x1c,  0x7e,  0xdd,  0x59,  0x05,  0x5d,  0xd3,  0x0e,  0x00, 
 0x84,  0x00,  0x00,  0x00, };
  return blob;
}
#endif //DDSCXX_HAS_TYPE_DISCOVERY

template <> constexpr const char* TopicTraits<::odom_msgs::TwistWithCovariance>::getTypeName()
{
  return "odom_msgs::TwistWithCovariance";
}

template <> constexpr allowable_encodings_t TopicTraits<::odom_msgs::TwistWithCovariance>::allowableEncodings()
{
  return 0xFFFFFFFEu;
}

template <> constexpr bool TopicTraits<::odom_msgs::TwistWithCovariance>::isKeyless()
{
  return true;
}

template <> constexpr extensibility TopicTraits<::odom_msgs::TwistWithCovariance>::getExtensibility()
{
  return extensibility::ext_appendable;
}

#ifdef DDSCXX_HAS_TYPE_DISCOVERY
template<> constexpr unsigned int TopicTraits<::odom_msgs::TwistWithCovariance>::type_map_blob_sz() { return 834; }
template<> constexpr unsigned int TopicTraits<::odom_msgs::TwistWithCovariance>::type_info_blob_sz() { return 196; }
template<> inline const uint8_t * TopicTraits<::odom_msgs::TwistWithCovariance>::type_map_blob() {
  static const uint8_t blob[] = {
 0x23,  0x01,  0x00,  0x00,  0x03,  0x00,  0x00,  0x00,  0xf1,  0xa9,  0xef,  0xae,  0x1c,  0x47,  0x86,  0x59, 
 0xb1,  0x19,  0x5b,  0x0c,  0x4d,  0xdf,  0x1c,  0x00,  0x4e,  0x00,  0x00,  0x00,  0xf1,  0x51,  0x02,  0x00, 
 0x01,  0x00,  0x00,  0x00,  0x00,  0x00,  0x00,  0x00,  0x3e,  0x00,  0x00,  0x00,  0x02,  0x00,  0x00,  0x00, 
 0x19,  0x00,  0x00,  0x00,  0x00,  0x00,  0x00,  0x00,  0x01,  0x00,  0xf1,  0xfe,  0xbb,  0x45,  0xea,  0x92, 
 0x8f,  0x46,  0x28,  0xd5,  0x90,  0xef,  0x77,  0x51,  0x0c,  0xeb,  0x3b,  0xac,  0x16,  0x00,  0x00,  0x00, 
 0x16,  0x00,  0x00,  0x00,  0x01,  0x00,  0x00,  0x00,  0x01,  0x00,  0x90,  0xf3,  0x01,  0x00,  0x00,  0x00, 
 0x01,  0x00,  0x00,  0x00,  0x24,  0x0a,  0xac,  0xdb,  0x06,  0x55,  0xf1,  0xfe,  0xbb,  0x45,  0xea,  0x92, 
 0x8f,  0x46,  0x28,  0xd5,  0x90,  0xef,  0x77,  0x51,  0x0c,  0x00,  0x00,  0x00,  0x51,  0x00,  0x00,  0x00, 
 0xf1,  0x51,  0x02,  0x00,  0x01,  0x00,  0x00,  0x00,  0x00,  0x00,  0x00,  0x00,  0x41,  0x00,  0x00,  0x00, 
 0x02,  0x00,  0x00,  0x00,  0x19,  0x00,  0x00,  0x00,  0x00,  0x00,  0x00,  0x00,  0x01,  0x00,  0xf1,  0xb4, 
 0x9c,  0x4d,  0x1f,  0x9e,  0x94,  0xb3,  0x8f,  0x94,  0x8d,  0xe3,  0x00,  0xef,  0x1d,  0x9a,  0x93,  0x2b, 
 0x3c,  0x00,  0x00,  0x00,  0x19,  0x00,  0x00,  0x00,  0x01,  0x00,  0x00,  0x00,  0x01,  0x00,  0xf1,  0xb4, 
 0x9c,  0x4d,  0x1f,  0x9e,  0x94,  0xb3,  0x8f,  0x94,  0x8d,  0xe3,  0x00,  0xef,  0x1d,  0xd1,  0x8b,  0x86, 
 0x24,  0xf1,  0xb4,  0x9c,  0x4d,  0x1f,  0x9e,  0x94,  0xb3,  0x8f,  0x94,  0x8d,  0xe3,  0x00,  0xef,  0x1d, 
 0x43,  0x00,  0x00,  0x00,  0xf1,  0x51,  0x02,  0x00,  0x01,  0x00,  0x00,  0x00,  0x00,  0x00,  0x00,  0x00, 
 0x33,  0x00,  0x00,  0x00,  0x03,  0x00,  0x00,  0x00,  0x0b,  0x00,  0x00,  0x00,  0x00,  0x00,  0x00,  0x00, 
 0x01,  0x00,  0x0a,  0x9d,  0xd4,  0xe4,  0x61,  0x00,  0x0b,  0x00,  0x00,  0x00,  0x01,  0x00,  0x00,  0x00, 
 0x01,  0x00,  0x0a,  0x41,  0x52,  0x90,  0x76,  0x00,  0x0b,  0x00,  0x00,  0x00,  0x02,  0x00,  0x00,  0x00, 
 0x01,  0x00,  0x0a,  0xfb,  0xad,  0xe9,  0xe3,  0x00,  0xb4,  0x01,  0x00,  0x00,  0x03,  0x00,  0x00,  0x00, 
 0xf2,  0x49,  0x77,  0xd2,  0x02,  0x2a,  0xbf,  0x12,  0x20,  0x10,  0x31,  0xca,  0x36,  0xa4,  0x25,  0x00, 
 0x89,  0x00,  0x00,  0x00,  0xf2,  0x51,  0x02,  0x00,  0x27,  0x00,  0x00,  0x00,  0x00,  0x00,  0x00,  0x00, 
 0x1f,  0x00,  0x00,  0x00,  0x6f,  0x64,  0x6f,  0x6d,  0x5f,  0x6d,  0x73,  0x67,  0x73,  0x3a,  0x3a,  0x54, 
 0x77,  0x69,  0x73,  0x74,  0x57,  0x69,  0x74,  0x68,  0x43,  0x6f,  0x76,  0x61,  0x72,  0x69,  0x61,  0x6e, 
 0x63,  0x65,  0x00,  0x00,  0x55,  0x00,  0x00,  0x00,  0x02,  0x00,  0x00,  0x00,  0x24,  0x00,  0x00,  0x00, 
 0x00,  0x00,  0x00,  0x00,  0x01,  0x00,  0xf2,  0x23,  0xa4,  0xe2,  0x0c,  0x54,  0xc2,  0x21,  0x6e,  0x04, 
 0x60,  0xad,  0x3f,  0x44,  0x75,  0x00,  0x00,  0x00,  0x06,  0x00,  0x00,  0x00,  0x74,  0x77,  0x69,  0x73, 
 0x74,  0x00,  0x00,  0x00,  0x25,  0x00,  0x00,  0x00,  0x01,  0x00,  0x00,  0x00,  0x01,  0x00,  0x90,  0xf3, 
 0x01,  0x00,  0x00,  0x00,  0x01,  0x00,  0x00,  0x00,  0x24,  0x0a,  0x00,  0x00,  0x0b,  0x00,  0x00,  0x00, 
 0x63,  0x6f,  0x76,  0x61,  0x72,  0x69,  0x61,  0x6e,  0x63,  0x65,  0x00,  0x00,  0x00,  0xf2,  0x23,  0xa4, 
 0xe2,  0x0c,  0x54,  0xc2,  0x21,  0x6e,  0x04,  0x60,  0xad,  0x3f,  0x44,  0x75,  0x82,  0x00,  0x00,  0x00, 
 0xf2,  0x51,  0x02,  0x00,  0x19,  0x00,  0x00,  0x00,  0x00,  0x00,  0x00,  0x00,  0x11,  0x00,  0x00,  0x00, 
 0x6f,  0x64,  0x6f,  0x6d,  0x5f,  0x6d,  0x73,  0x67,  0x73,  0x3a,  0x3a,  0x54,  0x77,  0x69,  0x73,  0x74, 
 0x00,  0x00,  0x00,  0x00,  0x5a,  0x00,  0x00,  0x00,  0x02,  0x00,  0x00,  0x00,  0x25,  0x00,  0x00,  0x00, 
 0x00,  0x00,  0x00,  0x00,  0x01,  0x00,  0xf2,  0x16,  0xaa,  0x86,  0x34,  0x2d,  0xa1,  0x5d,  0x83,  0x46, 
 0x5e,  0xdf,  0x84,  0x94,  0x94,  0x00,  0x00,  0x00,  0x07,  0x00,  0x00,  0x00,  0x6c,  0x69,  0x6e,  0x65, 
 0x61,  0x72,  0x00,  0x00,  0x00,  0x00,  0x00,  0x00,  0x26,  0x00,  0x00,  0x00,  0x01,  0x00,  0x00,  0x00, 
 0x01,  0x00,  0xf2,  0x16,  0xaa,  0x86,  0x34,  0x2d,  0xa1,  0x5d,  0x83,  0x46,  0x5e,  0xdf,  0x84,  0x94, 
 0x94,  0x00,  0x00,  0x00,  0x08,  0x00,  0x00,  0x00,  0x61,  0x6e,  0x67,  0x75,  0x6c,  0x61,  0x72,  0x00, 
 0x00,  0x00,  0xf2,  0x16,  0xaa,  0x86,  0x34,  0x2d,  0xa1,  0x5d,  0x83,  0x46,  0x5e,  0xdf,  0x84,  0x94, 
 0x94,  0x00,  0x00,  0x00,  0x68,  0x00,  0x00,  0x00,  0xf2,  0x51,  0x02,  0x00,  0x19,  0x00,  0x00,  0x00, 
 0x00,  0x00,  0x00,  0x00,  0x11,  0x00,  0x00,  0x00,  0x6f,  0x64,  0x6f,  0x6d,  0x5f,  0x6d,  0x73,  0x67, 
 0x73,  0x3a,  0x3a,  0x50,  0x6f,  0x69,  0x6e,  0x74,  0x00,  0x00,  0x00,  0x00,  0x40,  0x00,  0x00,  0x00, 
 0x03,  0x00,  0x00,  0x00,  0x10,  0x00,  0x00,  0x00,  0x00,  0x00,  0x00,  0x00,  0x01,  0x00,  0x0a,  0x00, 
 0x02,  0x00,  0x00,  0x00,  0x78,  0x00,  0x00,  0x00,  0x10,  0x00,  0x00,  0x00,  0x01,  0x00,  0x00,  0x00, 
 0x01,  0x00,  0x0a,  0x00,  0x02,  0x00,  0x00,  0x00,  0x79,  0x00,  0x00,  0x00,  0x10,  0x00,  0x00,  0x00, 
 0x02,  0x00,  0x00,  0x00,  0x01,  0x00,  0x0a,  0x00,  0x02,  0x00,  0x00,  0x00,  0x7a,  0x00,  0x00,  0x00, 
 0x5e,  0x00,  0x00,  0x00,  0x03,  0x00,  0x00,  0x00,  0xf2,  0x49,  0x77,  0xd2,  0x02,  0x2a,  0xbf,  0x12, 
 0x20,  0x10,  0x31,  0xca,  0x36,  0xa4,  0x25,  0xf1,  0xa9,  0xef,  0xae,  0x1c,  0x47,  0x86,  0x59,  0xb1, 
 0x19,  0x5b,  0x0c,  0x4d,  0xdf,  0x1c,  0xf2,  0x23,  0xa4,  0xe2,  0x0c,  0x54,  0xc2,  0x21,  0x6e,  0x04, 
 0x60,  0xad,  0x3f,  0x44,  0x75,  0xf1,  0xfe,  0xbb,  0x45,  0xea,  0x92,  0x8f,  0x46,  0x28,  0xd5,  0x90, 
 0xef,  0x77,  0x51,  0x0c,  0xf2,  0x16,  0xaa,  0x86,  0x34,  0x2d,  0xa1,  0x5d,  0x83,  0x46,  0x5e,  0xdf, 
 0x84,  0x94,  0x94,  0xf1,  0xb4,  0x9c,  0x4d,  0x1f,  0x9e,  0x94,  0xb3,  0x8f,  0x94,  0x8d,  0xe3,  0x00, 
 0xef,  0x1d, };
  return blob;
}
template<> inline const uint8_t * TopicTraits<::odom_msgs::TwistWithCovariance>::type_info_blob() {
  static const uint8_t blob[] = {
 0xc0,  0x00,  0x00,  0x00,  0x01,  0x10,  0x00,  0x40,  0x58,  0x00,  0x00,  0x00,  0x54,  0x00,  0x00,  0x00, 
 0x14,  0x00,  0x00,  0x00,  0xf1,  0xa9,  0xef,  0xae,  0x1c,  0x47,  0x86,  0x59,  0xb1,  0x19,  0x5b,  0x0c, 
 0x4d,  0xdf,  0x1c,  0x00,  0x52,  0x00,  0x00,  0x00,  0x02,  0x00,  0x00,  0x00,  0x34,  0x00,  0x00,  0x00, 
 0x02,  0x00,  0x00,  0x00,  0x14,  0x00,  0x00,  0x00,  0xf1,  0xfe,  0xbb,  0x45,  0xea,  0x92,  0x8f,  0x46, 
 0x28,  0xd5,  0x90,  0xef,  0x77,  0x51,  0x0c,  0x00,  0x55,  0x00,  0x00,  0x00,  0x14,  0x00,  0x00,  0x00, 
 0xf1,  0xb4,  0x9c,  0x4d,  0x1f,  0x9e,  0x94,  0xb3,  0x8f,  0x94,  0x8d,  0xe3,  0x00,  0xef,  0x1d,  0x00, 
 0x47,  0x00,  0x00,  0x00,  0x02,  0x10,  0x00,  0x40,  0x58,  0x00,  0x00,  0x00,  0x54,  0x00,  0x00,  0x00, 
 0x14,  0x00,  0x00,  0x00,  0xf2,  0x49,  0x77,  0xd2,  0x02,  0x2a,  0xbf,  0x12,  0x20,  0x10,  0x31,  0xca, 
 0x36,  0xa4,  0x25,  0x00,  0x8d,  0x00,  0x00,  0x00,  0x02,  0x00,  0x00,  0x00,  0x34,  0x00,  0x00,  0x00, 
 0x02,  0x00,  0x00,  0x00,  0x14,  0x00,  0x00,  0x00,  0xf2,  0x23,  0xa4,  0xe2,  0x0c,  0x54,  0xc2,  0x21, 
 0x6e,  0x04,  0x60,  0xad,  0x3f,  0x44,  0x75,  0x00,  0x86,  0x00,  0x00,  0x00,  0x14,  0x00,  0x00,  0x00, 
 0xf2,  0x16,  0xaa,  0x86,  0x34,  0x2d,  0xa1,  0x5d,  0x83,  0x46,  0x5e,  0xdf,  0x84,  0x94,  0x94,  0x00, 
 0x6c,  0x00,  0x00,  0x00, };
  return blob;
}
#endif //DDSCXX_HAS_TYPE_DISCOVERY

template <> constexpr const char* TopicTraits<::odom_msgs::Odometry>::getTypeName()
{
  return "odom_msgs::Odometry";
}

template <> constexpr allowable_encodings_t TopicTraits<::odom_msgs::Odometry>::allowableEncodings()
{
  return 0xFFFFFFFEu;
}

template <> constexpr bool TopicTraits<::odom_msgs::Odometry>::isSelfContained()
{
  return false;
}

template <> constexpr bool TopicTraits<::odom_msgs::Odometry>::isKeyless()
{
  return true;
}

template <> constexpr extensibility TopicTraits<::odom_msgs::Odometry>::getExtensibility()
{
  return extensibility::ext_appendable;
}

#ifdef DDSCXX_HAS_TYPE_DISCOVERY
template<> constexpr unsigned int TopicTraits<::odom_msgs::Odometry>::type_map_blob_sz() { return 2570; }
template<> constexpr unsigned int TopicTraits<::odom_msgs::Odometry>::type_info_blob_sz() { return 484; }
template<> inline const uint8_t * TopicTraits<::odom_msgs::Odometry>::type_map_blob() {
  static const uint8_t blob[] = {
 0x91,  0x03,  0x00,  0x00,  0x09,  0x00,  0x00,  0x00,  0xf1,  0x3a,  0xf9,  0xcd,  0x2d,  0x05,  0x73,  0x23, 
 0x98,  0xc2,  0x45,  0xc9,  0x6c,  0x4f,  0x4a,  0x00,  0x85,  0x00,  0x00,  0x00,  0xf1,  0x51,  0x02,  0x00, 
 0x01,  0x00,  0x00,  0x00,  0x00,  0x00,  0x00,  0x00,  0x75,  0x00,  0x00,  0x00,  0x04,  0x00,  0x00,  0x00, 
 0x19,  0x00,  0x00,  0x00,  0x00,  0x00,  0x00,  0x00,  0x01,  0x00,  0xf1,  0xb8,  0x99,  0xcd,  0xa8,  0x04, 
 0x50,  0x32,  0xd2,  0x4a,  0x47,  0xeb,  0x3b,  0xa6,  0x1f,  0x09,  0x9f,  0xb9,  0x95,  0x00,  0x00,  0x00, 
 0x10,  0x00,  0x00,  0x00,  0x01,  0x00,  0x00,  0x00,  0x01,  0x00,  0x71,  0x00,  0x00,  0x01,  0x00,  0x00, 
 0x8d,  0x9f,  0x65,  0x1d,  0x19,  0x00,  0x00,  0x00,  0x02,  0x00,  0x00,  0x00,  0x01,  0x00,  0xf1,  0xe4, 
 0x4d,  0x68,  0x96,  0x1b,  0xe9,  0x1a,  0xd5,  0x9d,  0x0d,  0x41,  0x34,  0xba,  0x7d,  0x2d,  0x5f,  0x8a, 
 0xe9,  0x00,  0x00,  0x00,  0x19,  0x00,  0x00,  0x00,  0x03,  0x00,  0x00,  0x00,  0x01,  0x00,  0xf1,  0xa9, 
 0xef,  0xae,  0x1c,  0x47,  0x86,  0x59,  0xb1,  0x19,  0x5b,  0x0c,  0x4d,  0xdf,  0x1c,  0xeb,  0x3b,  0xac, 
 0x16,  0xf1,  0xb8,  0x99,  0xcd,  0xa8,  0x04,  0x50,  0x32,  0xd2,  0x4a,  0x47,  0xeb,  0x3b,  0xa6,  0x1f, 
 0x48,  0x00,  0x00,  0x00,  0xf1,  0x51,  0x02,  0x00,  0x01,  0x00,  0x00,  0x00,  0x00,  0x00,  0x00,  0x00, 
 0x38,  0x00,  0x00,  0x00,  0x02,  0x00,  0x00,  0x00,  0x19,  0x00,  0x00,  0x00,  0x00,  0x00,  0x00,  0x00, 
 0x01,  0x00,  0xf1,  0xba,  0xde,  0x67,  0x63,  0xb1,  0xd6,  0xa7,  0x2e,  0xce,  0x8a,  0x0e,  0x5d,  0x69, 
 0x42,  0x96,  0xb8,  0xc7,  0x8d,  0x00,  0x00,  0x00,  0x10,  0x00,  0x00,  0x00,  0x01,  0x00,  0x00,  0x00, 
 0x01,  0x00,  0x71,  0x00,  0x00,  0x01,  0x00,  0x00,  0x4b,  0xb3,  0x9c,  0x5c,  0xf1,  0xba,  0xde,  0x67, 
 0x63,  0xb1,  0xd6,  0xa7,  0x2e,  0xce,  0x8a,  0x0e,  0x5d,  0x69,  0x42,  0x00,  0x33,  0x00,  0x00,  0x00, 
 0xf1,  0x51,  0x02,  0x00,  0x01,  0x00,  0x00,  0x00,  0x00,  0x00,  0x00,  0x00,  0x23,  0x00,  0x00,  0x00, 
 0x02,  0x00,  0x00,  0x00,  0x0b,  0x00,  0x00,  0x00,  0x00,  0x00,  0x00,  0x00,  0x01,  0x00,  0x04,  0x74, 
 0x45,  0x9c,  0xa3,  0x00,  0x0b,  0x00,  0x00,  0x00,  0x01,  0x00,  0x00,  0x00,  0x01,  0x00,  0x07,  0xe2, 
 0x04,  0x64,  0xd5,  0xf1,  0xe4,  0x4d,  0x68,  0x96,  0x1b,  0xe9,  0x1a,  0xd5,  0x9d,  0x0d,  0x41,  0x34, 
 0xba,  0x7d,  0x00,  0x00,  0x4e,  0x00,  0x00,  0x00,  0xf1,  0x51,  0x02,  0x00,  0x01,  0x00,  0x00,  0x00, 
 0x00,  0x00,  0x00,  0x00,  0x3e,  0x00,  0x00,  0x00,  0x02,  0x00,  0x00,  0x00,  0x19,  0x00,  0x00,  0x00, 
 0x00,  0x00,  0x00,  0x00,  0x01,  0x00,  0xf1,  0xbe,  0xdb,  0xdd,  0xbd,  0x08,  0xba,  0xcb,  0xdd,  0x2e, 
 0xc2,  0xef,  0xad,  0x80,  0x24,  0x2d,  0x5f,  0x8a,  0xe9,  0x00,  0x00,  0x00,  0x16,  0x00,  0x00,  0x00, 
 0x01,  0x00,  0x00,  0x00,  0x01,  0x00,  0x90,  0xf3,  0x01,  0x00,  0x00,  0x00,  0x01,  0x00,  0x00,  0x00, 
 0x24,  0x0a,  0xac,  0xdb,  0x06,  0x55,  0xf1,  0xbe,  0xdb,  0xdd,  0xbd,  0x08,  0xba,  0xcb,  0xdd,  0x2e, 
 0xc2,  0xef,  0xad,  0x80,  0x24,  0x00,  0x00,  0x00,  0x51,  0x00,  0x00,  0x00,  0xf1,  0x51,  0x02,  0x00, 
 0x01,  0x00,  0x00,  0x00,  0x00,  0x00,  0x00,  0x00,  0x41,  0x00,  0x00,  0x00,  0x02,  0x00,  0x00,  0x00, 
 0x19,  0x00,  0x00,  0x00,  0x00,  0x00,  0x00,  0x00,  0x01,  0x00,  0xf1,  0xb4,  0x9c,  0x4d,  0x1f,  0x9e, 
 0x94,  0xb3,  0x8f,  0x94,  0x8d,  0xe3,  0x00,  0xef,  0x1d,  0x47,  0x57,  0xfe,  0x07,  0x00,  0x00,  0x00, 
 0x19,  0x00,  0x00,  0x00,  0x01,  0x00,  0x00,  0x00,  0x01,  0x00,  0xf1,  0x33,  0x19,  0xf5,  0x25,  0xa9, 
 0x0e,  0xfb,  0x3c,  0x49,  0x08,  0x3e,  0x5d,  0xd9,  0x26,  0xda,  0x16,  0x39,  0x42,  0xf1,  0xb4,  0x9c, 
 0x4d,  0x1f,  0x9e,  0x94,  0xb3,  0x8f,  0x94,  0x8d,  0xe3,  0x00,  0xef,  0x1d,  0x43,  0x00,  0x00,  0x00, 
 0xf1,  0x51,  0x02,  0x00,  0x01,  0x00,  0x00,  0x00,  0x00,  0x00,  0x00,  0x00,  0x33,  0x00,  0x00,  0x00, 
 0x03,  0x00,  0x00,  0x00,  0x0b,  0x00,  0x00,  0x00,  0x00,  0x00,  0x00,  0x00,  0x01,  0x00,  0x0a,  0x9d, 
 0xd4,  0xe4,  0x61,  0x00,  0x0b,  0x00,  0x00,  0x00,  0x01,  0x00,  0x00,  0x00,  0x01,  0x00,  0x0a,  0x41, 
 0x52,  0x90,  0x76,  0x00,  0x0b,  0x00,  0x00,  0x00,  0x02,  0x00,  0x00,  0x00,  0x01,  0x00,  0x0a,  0xfb, 
 0xad,  0xe9,  0xe3,  0xf1,  0x33,  0x19,  0xf5,  0x25,  0xa9,  0x0e,  0xfb,  0x3c,  0x49,  0x08,  0x3e,  0x5d, 
 0xd9,  0x26,  0x00,  0x00,  0x53,  0x00,  0x00,  0x00,  0xf1,  0x51,  0x02,  0x00,  0x01,  0x00,  0x00,  0x00, 
 0x00,  0x00,  0x00,  0x00,  0x43,  0x00,  0x00,  0x00,  0x04,  0x00,  0x00,  0x00,  0x0b,  0x00,  0x00,  0x00, 
 0x00,  0x00,  0x00,  0x00,  0x01,  0x00,  0x0a,  0x9d,  0xd4,  0xe4,  0x61,  0x00,  0x0b,  0x00,  0x00,  0x00, 
 0x01,  0x00,  0x00,  0x00,  0x01,  0x00,  0x0a,  0x41,  0x52,  0x90,  0x76,  0x00,  0x0b,  0x00,  0x00,  0x00, 
 0x02,  0x00,  0x00,  0x00,  0x01,  0x00,  0x0a,  0xfb,  0xad,  0xe9,  0xe3,  0x00,  0x0b,  0x00,  0x00,  0x00, 
 0x03,  0x00,  0x00,  0x00,  0x01,  0x00,  0x0a,  0xf1,  0x29,  0x01,  0x86,  0xf1,  0xa9,  0xef,  0xae,  0x1c, 
 0x47,  0x86,  0x59,  0xb1,  0x19,  0x5b,  0x0c,  0x4d,  0xdf,  0x1c,  0x00,  0x00,  0x4e,  0x00,  0x00,  0x00, 
 0xf1,  0x51,  0x02,  0x00,  0x01,  0x00,  0x00,  0x00,  0x00,  0x00,  0x00,  0x00,  0x3e,  0x00,  0x00,  0x00, 
 0x02,  0x00,  0x00,  0x00,  0x19,  0x00,  0x00,  0x00,  0x00,  0x00,  0x00,  0x00,  0x01,  0x00,  0xf1,  0xfe, 
 0xbb,  0x45,  0xea,  0x92,  0x8f,  0x46,  0x28,  0xd5,  0x90,  0xef,  0x77,  0x51,  0x0c,  0xeb,  0x3b,  0xac, 
 0x16,  0x00,  0x00,  0x00,  0x16,  0x00,  0x00,  0x00,  0x01,  0x00,  0x00,  0x00,  0x01,  0x00,  0x90,  0xf3, 
 0x01,  0x00,  0x00,  0x00,  0x01,  0x00,  0x00,  0x00,  0x24,  0x0a,  0xac,  0xdb,  0x06,  0x55,  0xf1,  0xfe, 
 0xbb,  0x45,  0xea,  0x92,  0x8f,  0x46,  0x28,  0xd5,  0x90,  0xef,  0x77,  0x51,  0x0c,  0x00,  0x00,  0x00, 
 0x51,  0x00,  0x00,  0x00,  0xf1,  0x51,  0x02,  0x00,  0x01,  0x00,  0x00,  0x00,  0x00,  0x00,  0x00,  0x00, 
 0x41,  0x00,  0x00,  0x00,  0x02,  0x00,  0x00,  0x00,  0x19,  0x00,  0x00,  0x00,  0x00,  0x00,  0x00,  0x00, 
 0x01,  0x00,  0xf1,  0xb4,  0x9c,  0x4d,  0x1f,  0x9e,  0x94,  0xb3,  0x8f,  0x94,  0x8d,  0xe3,  0x00,  0xef, 
 0x1d,  0x9a,  0x93,  0x2b,  0x3c,  0x00,  0x00,  0x00,  0x19,  0x00,  0x00,  0x00,  0x01,  0x00,  0x00,  0x00, 
 0x01,  0x00,  0xf1,  0xb4,  0x9c,  0x4d,  0x1f,  0x9e,  0x94,  0xb3,  0x8f,  0x94,  0x8d,  0xe3,  0x00,  0xef, 
 0x1d,  0xd1,  0x8b,  0x86,  0x24,  0x00,  0x00,  0x00,  0x56,  0x05,  0x00,  0x00,  0x09,  0x00,  0x00,  0x00, 
 0xf2,  0x10,  0xe8,  0xb2,  0x62,  0x65,  0x6e,  0x1a,  0xf3,  0x6e,  0x6d,  0xa2,  0x36,  0x4b,  0x9b,  0x00, 
 0xd0,  0x00,  0x00,  0x00,  0xf2,  0x51,  0x02,  0x00,  0x1c,  0x00,  0x00,  0x00,  0x00,  0x00,  0x00,  0x00, 
 0x14,  0x00,  0x00,  0x00,  0x6f,  0x64,  0x6f,  0x6d,  0x5f,  0x6d,  0x73,  0x67,  0x73,  0x3a,  0x3a,  0x4f, 
 0x64,  0x6f,  0x6d,  0x65,  0x74,  0x72,  0x79,  0x00,  0xa8,  0x00,  0x00,  0x00,  0x04,  0x00,  0x00,  0x00, 
 0x25,  0x00,  0x00,  0x00,  0x00,  0x00,  0x00,  0x00,  0x01,  0x00,  0xf2,  0xa0,  0x7b,  0x6c,  0x10,  0x56, 
 0xfe,  0xcf,  0xc3,  0x7a,  0xb0,  0x80,  0x18,  0xf2,  0xb3,  0x00,  0x00,  0x00,  0x07,  0x00,  0x00,  0x00, 
 0x68,  0x65,  0x61,  0x64,  0x65,  0x72,  0x00,  0x00,  0x00,  0x00,  0x00,  0x00,  0x21,  0x00,  0x00,  0x00, 
 0x01,  0x00,  0x00,  0x00,  0x01,  0x00,  0x71,  0x00,  0x00,  0x01,  0x00,  0x00,  0x0f,  0x00,  0x00,  0x00, 
 0x63,  0x68,  0x69,  0x6c,  0x64,  0x5f,  0x66,  0x72,  0x61,  0x6d,  0x65,  0x5f,  0x69,  0x64,  0x00,  0x00, 
 0x00,  0x00,  0x00,  0x00,  0x23,  0x00,  0x00,  0x00,  0x02,  0x00,  0x00,  0x00,  0x01,  0x00,  0xf2,  0x33, 
 0x15,  0x07,  0xf7,  0x71,  0x4f,  0xf9,  0x53,  0x4c,  0x39,  0x97,  0xc6,  0xaa,  0x2e,  0x00,  0x00,  0x00, 
 0x05,  0x00,  0x00,  0x00,  0x70,  0x6f,  0x73,  0x65,  0x00,  0x00,  0x00,  0x00,  0x24,  0x00,  0x00,  0x00, 
 0x03,  0x00,  0x00,  0x00,  0x01,  0x00,  0xf2,  0x49,  0x77,  0xd2,  0x02,  0x2a,  0xbf,  0x12,  0x20,  0x10, 
 0x31,  0xca,  0x36,  0xa4,  0x25,  0x00,  0x00,  0x00,  0x06,  0x00,  0x00,  0x00,  0x74,  0x77,  0x69,  0x73, 
 0x74,  0x00,  0x00,  0x00,  0xf2,  0xa0,  0x7b,  0x6c,  0x10,  0x56,  0xfe,  0xcf,  0xc3,  0x7a,  0xb0,  0x80, 
 0x18,  0xf2,  0xb3,  0x00,  0x73,  0x00,  0x00,  0x00,  0xf2,  0x51,  0x02,  0x00,  0x1a,  0x00,  0x00,  0x00, 
 0x00,  0x00,  0x00,  0x00,  0x12,  0x00,  0x00,  0x00,  0x6f,  0x64,  0x6f,  0x6d,  0x5f,  0x6d,  0x73,  0x67, 
 0x73,  0x3a,  0x3a,  0x48,  0x65,  0x61,  0x64,  0x65,  0x72,  0x00,  0x00,  0x00,  0x4b,  0x00,  0x00,  0x00, 
 0x02,  0x00,  0x00,  0x00,  0x24,  0x00,  0x00,  0x00,  0x00,  0x00,  0x00,  0x00,  0x01,  0x00,  0xf2,  0xcb, 
 0xe0,  0x76,  0xc6,  0x49,  0xc0,  0xee,  0x9d,  0x34,  0xdb,  0xaa,  0x1a,  0x2f,  0xe8,  0x00,  0x00,  0x00, 
 0x06,  0x00,  0x00,  0x00,  0x73,  0x74,  0x61,  0x6d,  0x70,  0x00,  0x00,  0x00,  0x1b,  0x00,  0x00,  0x00, 
 0x01,  0x00,  0x00,  0x00,  0x01,  0x00,  0x71,  0x00,  0x00,  0x01,  0x00,  0x00,  0x09,  0x00,  0x00,  0x00, 
 0x66,  0x72,  0x61,  0x6d,  0x65,  0x5f,  0x69,  0x64,  0x00,  0x00,  0x00,  0xf2,  0xcb,  0xe0,  0x76,  0xc6, 
 0x49,  0xc0,  0xee,  0x9d,  0x34,  0xdb,  0xaa,  0x1a,  0x2f,  0xe8,  0x00,  0x00,  0x5a,  0x00,  0x00,  0x00, 
 0xf2,  0x51,  0x02,  0x00,  0x18,  0x00,  0x00,  0x00,  0x00,  0x00,  0x00,  0x00,  0x10,  0x00,  0x00,  0x00, 
 0x6f,  0x64,  0x6f,  0x6d,  0x5f,  0x6d,  0x73,  0x67,  0x73,  0x3a,  0x3a,  0x54,  0x69,  0x6d,  0x65,  0x00, 
 0x36,  0x00,  0x00,  0x00,  0x02,  0x00,  0x00,  0x00,  0x12,  0x00,  0x00,  0x00,  0x00,  0x00,  0x00,  0x00, 
 0x01,  0x00,  0x04,  0x00,  0x04,  0x00,  0x00,  0x00,  0x73,  0x65,  0x63,  0x00,  0x00,  0x00,  0x00,  0x00, 
 0x16,  0x00,  0x00,  0x00,  0x01,  0x00,  0x00,  0x00,  0x01,  0x00,  0x07,  0x00,  0x08,  0x00,  0x00,  0x00, 
 0x6e,  0x61,  0x6e,  0x6f,  0x73,  0x65,  0x63,  0x00,  0x00,  0x00,  0xf2,  0x33,  0x15,  0x07,  0xf7,  0x71, 
 0x4f,  0xf9,  0x53,  0x4c,  0x39,  0x97,  0xc6,  0xaa,  0x2e,  0x00,  0x00,  0x00,  0x89,  0x00,  0x00,  0x00, 
 0xf2,  0x51,  0x02,  0x00,  0x26,  0x00,  0x00,  0x00,  0x00,  0x00,  0x00,  0x00,  0x1e,  0x00,  0x00,  0x00, 
 0x6f,  0x64,  0x6f,  0x6d,  0x5f,  0x6d,  0x73,  0x67,  0x73,  0x3a,  0x3a,  0x50,  0x6f,  0x73,  0x65,  0x57, 
 0x69,  0x74,  0x68,  0x43,  0x6f,  0x76,  0x61,  0x72,  0x69,  0x61,  0x6e,  0x63,  0x65,  0x00,  0x00,  0x00, 
 0x55,  0x00,  0x00,  0x00,  0x02,  0x00,  0x00,  0x00,  0x23,  0x00,  0x00,  0x00,  0x00,  0x00,  0x00,  0x00, 
 0x01,  0x00,  0xf2,  0x8d,  0x5f,  0x8c,  0xe7,  0x67,  0x92,  0x58,  0x97,  0xa8,  0xd5,  0xcb,  0x60,  0x14, 
 0xa9,  0x00,  0x00,  0x00,  0x05,  0x00,  0x00,  0x00,  0x70,  0x6f,  0x73,  0x65,  0x00,  0x00,  0x00,  0x00, 
 0x25,  0x00,  0x00,  0x00,  0x01,  0x00,  0x00,  0x00,  0x01,  0x00,  0x90,  0xf3,  0x01,  0x00,  0x00,  0x00, 
 0x01,  0x00,  0x00,  0x00,  0x24,  0x0a,  0x00,  0x00,  0x0b,  0x00,  0x00,  0x00,  0x63,  0x6f,  0x76,  0x61, 
 0x72,  0x69,  0x61,  0x6e,  0x63,  0x65,  0x00,  0x00,  0x00,  0xf2,  0x8d,  0x5f,  0x8c,  0xe7,  0x67,  0x92, 
 0x58,  0x97,  0xa8,  0xd5,  0xcb,  0x60,  0x14,  0xa9,  0x82,  0x00,  0x00,  0x00,  0xf2,  0x51,  0x02,  0x00, 
 0x18,  0x00,  0x00,  0x00,  0x00,  0x00,  0x00,  0x00,  0x10,  0x00,  0x00,  0x00,  0x6f,  0x64,  0x6f,  0x6d, 
 0x5f,  0x6d,  0x73,  0x67,  0x73,  0x3a,  0x3a,  0x50,  0x6f,  0x73,  0x65,  0x00,  0x5e,  0x00,  0x00,  0x00, 
 0x02,  0x00,  0x00,  0x00,  0x27,  0x00,  0x00,  0x00,  0x00,  0x00,  0x00,  0x00,  0x01,  0x00,  0xf2,  0x16, 
 0xaa,  0x86,  0x34,  0x2d,  0xa1,  0x5d,  0x83,  0x46,  0x5e,  0xdf,  0x84,  0x94,  0x94,  0x00,  0x00,  0x00, 
 0x09,  0x00,  0x00,  0x00,  0x70,  0x6f,  0x73,  0x69,  0x74,  0x69,  0x6f,  0x6e,  0x00,  0x00,  0x00,  0x00, 
 0x2a,  0x00,  0x00,  0x00,  0x01,  0x00,  0x00,  0x00,  0x01,  0x00,  0xf2,  0x3b,  0xc4,  0x62,  0xe4,  0x6e, 
 0xa4,  0x1c,  0x7e,  0xdd,  0x59,  0x05,  0x5d,  0xd3,  0x0e,  0x00,  0x00,  0x00,  0x0c,  0x00,  0x00,  0x00, 
 0x6f,  0x72,  0x69,  0x65,  0x6e,  0x74,  0x61,  0x74,  0x69,  0x6f,  0x6e,  0x00,  0x00,  0x00,  0xf2,  0x16, 
 0xaa,  0x86,  0x34,  0x2d,  0xa1,  0x5d,  0x83,  0x46,  0x5e,  0xdf,  0x84,  0x94,  0x94,  0x00,  0x00,  0x00, 
 0x68,  0x00,  0x00,  0x00,  0xf2,  0x51,  0x02,  0x00,  0x19,  0x00,  0x00,  0x00,  0x00,  0x00,  0x00,  0x00, 
 0x11,  0x00,  0x00,  0x00,  0x6f,  0x64,  0x6f,  0x6d,  0x5f,  0x6d,  0x73,  0x67,  0x73,  0x3a,  0x3a,  0x50, 
 0x6f,  0x69,  0x6e,  0x74,  0x00,  0x00,  0x00,  0x00,  0x40,  0x00,  0x00,  0x00,  0x03,  0x00,  0x00,  0x00, 
 0x10,  0x00,  0x00,  0x00,  0x00,  0x00,  0x00,  0x00,  0x01,  0x00,  0x0a,  0x00,  0x02,  0x00,  0x00,  0x00, 
 0x78,  0x00,  0x00,  0x00,  0x10,  0x00,  0x00,  0x00,  0x01,  0x00,  0x00,  0x00,  0x01,  0x00,  0x0a,  0x00, 
 0x02,  0x00,  0x00,  0x00,  0x79,  0x00,  0x00,  0x00,  0x10,  0x00,  0x00,  0x00,  0x02,  0x00,  0x00,  0x00, 
 0x01,  0x00,  0x0a,  0x00,  0x02,  0x00,  0x00,  0x00,  0x7a,  0x00,  0x00,  0x00,  0xf2,  0x3b,  0xc4,  0x62, 
 0xe4,  0x6e,  0xa4,  0x1c,  0x7e,  0xdd,  0x59,  0x05,  0x5d,  0xd3,  0x0e,  0x00,  0x80,  0x00,  0x00,  0x00, 
 0xf2,  0x51,  0x02,  0x00,  0x1e,  0x00,  0x00,  0x00,  0x00,  0x00,  0x00,  0x00,  0x16,  0x00,  0x00,  0x00, 
 0x6f,  0x64,  0x6f,  0x6d,  0x5f,  0x6d,  0x73,  0x67,  0x73,  0x3a,  0x3a,  0x51,  0x75,  0x61,  0x74,  0x65, 
 0x72,  0x6e,  0x69,  0x6f,  0x6e,  0x00,  0x00,  0x00,  0x54,  0x00,  0x00,  0x00,  0x04,  0x00,  0x00,  0x00, 
 0x10,  0x00,  0x00,  0x00,  0x00,  0x00,  0x00,  0x00,  0x01,  0x00,  0x0a,  0x00,  0x02,  0x00,  0x00,  0x00, 
 0x78,  0x00,  0x00,  0x00,  0x10,  0x00,  0x00,  0x00,  0x01,  0x00,  0x00,  0x00,  0x01,  0x00,  0x0a,  0x00, 
 0x02,  0x00,  0x00,  0x00,  0x79,  0x00,  0x00,  0x00,  0x10,  0x00,  0x00,  0x00,  0x02,  0x00,  0x00,  0x00, 
 0x01,  0x00,  0x0a,  0x00,  0x02,  0x00,  0x00,  0x00,  0x7a,  0x00,  0x00,  0x00,  0x10,  0x00,  0x00,  0x00, 
 0x03,  0x00,  0x00,  0x00,  0x01,  0x00,  0x0a,  0x00,  0x02,  0x00,  0x00,  0x00,  0x77,  0x00,  0x00,  0x00, 
 0xf2,  0x49,  0x77,  0xd2,  0x02,  0x2a,  0xbf,  0x12,  0x20,  0x10,  0x31,  0xca,  0x36,  0xa4,  0x25,  0x00, 
 0x89,  0x00,  0x00,  0x00,  0xf2,  0x51,  0x02,  0x00,  0x27,  0x00,  0x00,  0x00,  0x00,  0x00,  0x00,  0x00, 
 0x1f,  0x00,  0x00,  0x00,  0x6f,  0x64,  0x6f,  0x6d,  0x5f,  0x6d,  0x73,  0x67,  0x73,  0x3a,  0x3a,  0x54, 
 0x77,  0x69,  0x73,  0x74,  0x57,  0x69,  0x74,  0x68,  0x43,  0x6f,  0x76,  0x61,  0x72,  0x69,  0x61,  0x6e, 
 0x63,  0x65,  0x00,  0x00,  0x55,  0x00,  0x00,  0x00,  0x02,  0x00,  0x00,  0x00,  0x24,  0x00,  0x00,  0x00, 
 0x00,  0x00,  0x00,  0x00,  0x01,  0x00,  0xf2,  0x23,  0xa4,  0xe2,  0x0c,  0x54,  0xc2,  0x21,  0x6e,  0x04, 
 0x60,  0xad,  0x3f,  0x44,  0x75,  0x00,  0x00,  0x00,  0x06,  0x00,  0x00,  0x00,  0x74,  0x77,  0x69,  0x73, 
 0x74,  0x00,  0x00,  0x00,  0x25,  0x00,  0x00,  0x00,  0x01,  0x00,  0x00,  0x00,  0x01,  0x00,  0x90,  0xf3, 
 0x01,  0x00,  0x00,  0x00,  0x01,  0x00,  0x00,  0x00,  0x24,  0x0a,  0x00,  0x00,  0x0b,  0x00,  0x00,  0x00, 
 0x63,  0x6f,  0x76,  0x61,  0x72,  0x69,  0x61,  0x6e,  0x63,  0x65,  0x00,  0x00,  0x00,  0xf2,  0x23,  0xa4, 
 0xe2,  0x0c,  0x54,  0xc2,  0x21,  0x6e,  0x04,  0x60,  0xad,  0x3f,  0x44,  0x75,  0x82,  0x00,  0x00,  0x00, 
 0xf2,  0x51,  0x02,  0x00,  0x19,  0x00,  0x00,  0x00,  0x00,  0x00,  0x00,  0x00,  0x11,  0x00,  0x00,  0x00, 
 0x6f,  0x64,  0x6f,  0x6d,  0x5f,  0x6d,  0x73,  0x67,  0x73,  0x3a,  0x3a,  0x54,  0x77,  0x69,  0x73,  0x74, 
 0x00,  0x00,  0x00,  0x00,  0x5a,  0x00,  0x00,  0x00,  0x02,  0x00,  0x00,  0x00,  0x25,  0x00,  0x00,  0x00, 
 0x00,  0x00,  0x00,  0x00,  0x01,  0x00,  0xf2,  0x16,  0xaa,  0x86,  0x34,  0x2d,  0xa1,  0x5d,  0x83,  0x46, 
 0x5e,  0xdf,  0x84,  0x94,  0x94,  0x00,  0x00,  0x00,  0x07,  0x00,  0x00,  0x00,  0x6c,  0x69,  0x6e,  0x65, 
 0x61,  0x72,  0x00,  0x00,  0x00,  0x00,  0x00,  0x00,  0x26,  0x00,  0x00,  0x00,  0x01,  0x00,  0x00,  0x00, 
 0x01,  0x00,  0xf2,  0x16,  0xaa,  0x86,  0x34,  0x2d,  0xa1,  0x5d,  0x83,  0x46,  0x5e,  0xdf,  0x84,  0x94, 
 0x94,  0x00,  0x00,  0x00,  0x08,  0x00,  0x00,  0x00,  0x61,  0x6e,  0x67,  0x75,  0x6c,  0x61,  0x72,  0x00, 
 0x00,  0x00,  0x00,  0x00,  0x12,  0x01,  0x00,  0x00,  0x09,  0x00,  0x00,  0x00,  0xf2,  0x10,  0xe8,  0xb2, 
 0x62,  0x65,  0x6e,  0x1a,  0xf3,  0x6e,  0x6d,  0xa2,  0x36,  0x4b,  0x9b,  0xf1,  0x3a,  0xf9,  0xcd,  0x2d, 
 0x05,  0x73,  0x23,  0x98,  0xc2,  0x45,  0xc9,  0x6c,  0x4f,  0x4a,  0xf2,  0xa0,  0x7b,  0x6c,  0x10,  0x56, 
 0xfe,  0xcf,  0xc3,  0x7a,  0xb0,  0x80,  0x18,  0xf2,  0xb3,  0xf1,  0xb8,  0x99,  0xcd,  0xa8,  0x04,  0x50, 
 0x32,  0xd2,  0x4a,  0x47,  0xeb,  0x3b,  0xa6,  0x1f,  0xf2,  0xcb,  0xe0,  0x76,  0xc6,  0x49,  0xc0,  0xee, 
 0x9d,  0x34,  0xdb,  0xaa,  0x1a,  0x2f,  0xe8,  0xf1,  0xba,  0xde,  0x67,  0x63,  0xb1,  0xd6,  0xa7,  0x2e, 
 0xce,  0x8a,  0x0e,  0x5d,  0x69,  0x42,  0xf2,  0x33,  0x15,  0x07,  0xf7,  0x71,  0x4f,  0xf9,  0x53,  0x4c, 
 0x39,  0x97,  0xc6,  0xaa,  0x2e,  0xf1,  0xe4,  0x4d,  0x68,  0x96,  0x1b,  0xe9,  0x1a,  0xd5,  0x9d,  0x0d, 
 0x41,  0x34,  0xba,  0x7d,  0xf2,  0x8d,  0x5f,  0x8c,  0xe7,  0x67,  0x92,  0x58,  0x97,  0xa8,  0xd5,  0xcb, 
 0x60,  0x14,  0xa9,  0xf1,  0xbe,  0xdb,  0xdd,  0xbd,  0x08,  0xba,  0xcb,  0xdd,  0x2e,  0xc2,  0xef,  0xad, 
 0x80,  0x24,  0xf2,  0x16,  0xaa,  0x86,  0x34,  0x2d,  0xa1,  0x5d,  0x83,  0x46,  0x5e,  0xdf,  0x84,  0x94, 
 0x94,  0xf1,  0xb4,  0x9c,  0x4d,  0x1f,  0x9e,  0x94,  0xb3,  0x8f,  0x94,  0x8d,  0xe3,  0x00,  0xef,  0x1d, 
 0xf2,  0x3b,  0xc4,  0x62,  0xe4,  0x6e,  0xa4,  0x1c,  0x7e,  0xdd,  0x59,  0x05,  0x5d,  0xd3,  0x0e,  0xf1, 
 0x33,  0x19,  0xf5,  0x25,  0xa9,  0x0e,  0xfb,  0x3c,  0x49,  0x08,  0x3e,  0x5d,  0xd9,  0x26,  0xf2,  0x49, 
 0x77,  0xd2,  0x02,  0x2a,  0xbf,  0x12,  0x20,  0x10,  0x31,  0xca,  0x36,  0xa4,  0x25,  0xf1,  0xa9,  0xef, 
 0xae,  0x1c,  0x47,  0x86,  0x59,  0xb1,  0x19,  0x5b,  0x0c,  0x4d,  0xdf,  0x1c,  0xf2,  0x23,  0xa4,  0xe2, 
 0x0c,  0x54,  0xc2,  0x21,  0x6e,  0x04,  0x60,  0xad,  0x3f,  0x44,  0x75,  0xf1,  0xfe,  0xbb,  0x45,  0xea, 
 0x92,  0x8f,  0x46,  0x28,  0xd5,  0x90,  0xef,  0x77,  0x51,  0x0c, };
  return blob;
}
template<> inline const uint8_t * TopicTraits<::odom_msgs::Odometry>::type_info_blob() {
  static const uint8_t blob[] = {
 0xe0,  0x01,  0x00,  0x00,  0x01,  0x10,  0x00,  0x40,  0xe8,  0x00,  0x00,  0x00,  0xe4,  0x00,  0x00,  0x00, 
 0x14,  0x00,  0x00,  0x00,  0xf1,  0x3a,  0xf9,  0xcd,  0x2d,  0x05,  0x73,  0x23,  0x98,  0xc2,  0x45,  0xc9, 
 0x6c,  0x4f,  0x4a,  0x00,  0x89,  0x00,  0x00,  0x00,  0x08,  0x00,  0x00,  0x00,  0xc4,  0x00,  0x00,  0x00, 
 0x08,  0x00,  0x00,  0x00,  0x14,  0x00,  0x00,  0x00,  0xf1,  0xb8,  0x99,  0xcd,  0xa8,  0x04,  0x50,  0x32, 
 0xd2,  0x4a,  0x47,  0xeb,  0x3b,  0xa6,  0x1f,  0x00,  0x4c,  0x00,  0x00,  0x00,  0x14,  0x00,  0x00,  0x00, 
 0xf1,  0xba,  0xde,  0x67,  0x63,  0xb1,  0xd6,  0xa7,  0x2e,  0xce,  0x8a,  0x0e,  0x5d,  0x69,  0x42,  0x00, 
 0x37,  0x00,  0x00,  0x00,  0x14,  0x00,  0x00,  0x00,  0xf1,  0xe4,  0x4d,  0x68,  0x96,  0x1b,  0xe9,  0x1a, 
 0xd5,  0x9d,  0x0d,  0x41,  0x34,  0xba,  0x7d,  0x00,  0x52,  0x00,  0x00,  0x00,  0x14,  0x00,  0x00,  0x00, 
 0xf1,  0xbe,  0xdb,  0xdd,  0xbd,  0x08,  0xba,  0xcb,  0xdd,  0x2e,  0xc2,  0xef,  0xad,  0x80,  0x24,  0x00, 
 0x55,  0x00,  0x00,  0x00,  0x14,  0x00,  0x00,  0x00,  0xf1,  0xb4,  0x9c,  0x4d,  0x1f,  0x9e,  0x94,  0xb3, 
 0x8f,  0x94,  0x8d,  0xe3,  0x00,  0xef,  0x1d,  0x00,  0x47,  0x00,  0x00,  0x00,  0x14,  0x00,  0x00,  0x00, 
 0xf1,  0x33,  0x19,  0xf5,  0x25,  0xa9,  0x0e,  0xfb,  0x3c,  0x49,  0x08,  0x3e,  0x5d,  0xd9,  0x26,  0x00, 
 0x57,  0x00,  0x00,  0x00,  0x14,  0x00,  0x00,  0x00,  0xf1,  0xa9,  0xef,  0xae,  0x1c,  0x47,  0x86,  0x59, 
 0xb1,  0x19,  0x5b,  0x0c,  0x4d,  0xdf,  0x1c,  0x00,  0x52,  0x00,  0x00,  0x00,  0x14,  0x00,  0x00,  0x00, 
 0xf1,  0xfe,  0xbb,  0x45,  0xea,  0x92,  0x8f,  0x46,  0x28,  0xd5,  0x90,  0xef,  0x77,  0x51,  0x0c,  0x00, 
 0x55,  0x00,  0x00,  0x00,  0x02,  0x10,  0x00,  0x40,  0xe8,  0x00,  0x00,  0x00,  0xe4,  0x00,  0x00,  0x00, 
 0x14,  0x00,  0x00,  0x00,  0xf2,  0x10,  0xe8,  0xb2,  0x62,  0x65,  0x6e,  0x1a,  0xf3,  0x6e,  0x6d,  0xa2, 
 0x36,  0x4b,  0x9b,  0x00,  0xd4,  0x00,  0x00,  0x00,  0x08,  0x00,  0x00,  0x00,  0xc4,  0x00,  0x00,  0x00, 
 0x08,  0x00,  0x00,  0x00,  0x14,  0x00,  0x00,  0x00,  0xf2,  0xa0,  0x7b,  0x6c,  0x10,  0x56,  0xfe,  0xcf, 
 0xc3,  0x7a,  0xb0,  0x80,  0x18,  0xf2,  0xb3,  0x00,  0x77,  0x00,  0x00,  0x00,  0x14,  0x00,  0x00,  0x00, 
 0xf2,  0xcb,  0xe0,  0x76,  0xc6,  0x49,  0xc0,  0xee,  0x9d,  0x34,  0xdb,  0xaa,  0x1a,  0x2f,  0xe8,  0x00, 
 0x5e,  0x00,  0x00,  0x00,  0x14,  0x00,  0x00,  0x00,  0xf2,  0x33,  0x15,  0x07,  0xf7,  0x71,  0x4f,  0xf9, 
 0x53,  0x4c,  0x39,  0x97,  0xc6,  0xaa,  0x2e,  0x00,  0x8d,  0x00,  0x00,  0x00,  0x14,  0x00,  0x00,  0x00, 
 0xf2,  0x8d,  0x5f,  0x8c,  0xe7,  0x67,  0x92,  0x58,  0x97,  0xa8,  0xd5,  0xcb,  0x60,  0x14,  0xa9,  0x00, 
 0x86,  0x00,  0x00,  0x00,  0x14,  0x00,  0x00,  0x00,  0xf2,  0x16,  0xaa,  0x86,  0x34,  0x2d,  0xa1,  0x5d, 
 0x83,  0x46,  0x5e,  0xdf,  0x84,  0x94,  0x94,  0x00,  0x6c,  0x00,  0x00,  0x00,  0x14,  0x00,  0x00,  0x00, 
 0xf2,  0x3b,  0xc4,  0x62,  0xe4,  0x6e,  0xa4,  0x1c,  0x7e,  0xdd,  0x59,  0x05,  0x5d,  0xd3,  0x0e,  0x00, 
 0x84,  0x00,  0x00,  0x00,  0x14,  0x00,  0x00,  0x00,  0xf2,  0x49,  0x77,  0xd2,  0x02,  0x2a,  0xbf,  0x12, 
 0x20,  0x10,  0x31,  0xca,  0x36,  0xa4,  0x25,  0x00,  0x8d,  0x00,  0x00,  0x00,  0x14,  0x00,  0x00,  0x00, 
 0xf2,  0x23,  0xa4,  0xe2,  0x0c,  0x54,  0xc2,  0x21,  0x6e,  0x04,  0x60,  0xad,  0x3f,  0x44,  0x75,  0x00, 
 0x86,  0x00,  0x00,  0x00, };
  return blob;
}
#endif //DDSCXX_HAS_TYPE_DISCOVERY

template <> constexpr const char* TopicTraits<::odom_msgs::PointField>::getTypeName()
{
  return "odom_msgs::PointField";
}

template <> constexpr allowable_encodings_t TopicTraits<::odom_msgs::PointField>::allowableEncodings()
{
  return 0xFFFFFFFEu;
}

template <> constexpr bool TopicTraits<::odom_msgs::PointField>::isSelfContained()
{
  return false;
}

template <> constexpr bool TopicTraits<::odom_msgs::PointField>::isKeyless()
{
  return true;
}

template <> constexpr extensibility TopicTraits<::odom_msgs::PointField>::getExtensibility()
{
  return extensibility::ext_appendable;
}

#ifdef DDSCXX_HAS_TYPE_DISCOVERY
template<> constexpr unsigned int TopicTraits<::odom_msgs::PointField>::type_map_blob_sz() { return 330; }
template<> constexpr unsigned int TopicTraits<::odom_msgs::PointField>::type_info_blob_sz() { return 100; }
template<> inline const uint8_t * TopicTraits<::odom_msgs::PointField>::type_map_blob() {
  static const uint8_t blob[] = {
 0x6b,  0x00,  0x00,  0x00,  0x01,  0x00,  0x00,  0x00,  0xf1,  0x14,  0xb0,  0x4d,  0x4c,  0x93,  0xca,  0xfe, 
 0x2d,  0x92,  0x96,  0x57,  0xe9,  0xae,  0xd3,  0x00,  0x53,  0x00,  0x00,  0x00,  0xf1,  0x51,  0x02,  0x00, 
 0x01,  0x00,  0x00,  0x00,  0x00,  0x00,  0x00,  0x00,  0x43,  0x00,  0x00,  0x00,  0x04,  0x00,  0x00,  0x00, 
 0x0c,  0x00,  0x00,  0x00,  0x00,  0x00,  0x00,  0x00,  0x01,  0x00,  0x70,  0x80,  0xb0,  0x68,  0x93,  0x1c, 
 0x0b,  0x00,  0x00,  0x00,  0x01,  0x00,  0x00,  0x00,  0x01,  0x00,  0x07,  0x7a,  0x86,  0xc1,  0x57,  0x00, 
 0x0b,  0x00,  0x00,  0x00,  0x02,  0x00,  0x00,  0x00,  0x01,  0x00,  0x02,  0x39,  0x31,  0x10,  0x8d,  0x00, 
 0x0b,  0x00,  0x00,  0x00,  0x03,  0x00,  0x00,  0x00,  0x01,  0x00,  0x07,  0xe2,  0x94,  0x2a,  0x04,  0x00, 
 0xb0,  0x00,  0x00,  0x00,  0x01,  0x00,  0x00,  0x00,  0xf2,  0xa2,  0x0a,  0x37,  0x92,  0x4b,  0x9e,  0x92, 
 0x15,  0x06,  0xb7,  0xab,  0x11,  0xaf,  0xd3,  0x00,  0x98,  0x00,  0x00,  0x00,  0xf2,  0x51,  0x02,  0x00, 
 0x1e,  0x00,  0x00,  0x00,  0x00,  0x00,  0x00,  0x00,  0x16,  0x00,  0x00,  0x00,  0x6f,  0x64,  0x6f,  0x6d, 
 0x5f,  0x6d,  0x73,  0x67,  0x73,  0x3a,  0x3a,  0x50,  0x6f,  0x69,  0x6e,  0x74,  0x46,  0x69,  0x65,  0x6c, 
 0x64,  0x00,  0x00,  0x00,  0x6c,  0x00,  0x00,  0x00,  0x04,  0x00,  0x00,  0x00,  0x13,  0x00,  0x00,  0x00, 
 0x00,  0x00,  0x00,  0x00,  0x01,  0x00,  0x70,  0x80,  0x05,  0x00,  0x00,  0x00,  0x6e,  0x61,  0x6d,  0x65, 
 0x00,  0x00,  0x00,  0x00,  0x15,  0x00,  0x00,  0x00,  0x01,  0x00,  0x00,  0x00,  0x01,  0x00,  0x07,  0x00, 
 0x07,  0x00,  0x00,  0x00,  0x6f,  0x66,  0x66,  0x73,  0x65,  0x74,  0x00,  0x00,  0x00,  0x00,  0x00,  0x00, 
 0x17,  0x00,  0x00,  0x00,  0x02,  0x00,  0x00,  0x00,  0x01,  0x00,  0x02,  0x00,  0x09,  0x00,  0x00,  0x00, 
 0x64,  0x61,  0x74,  0x61,  0x74,  0x79,  0x70,  0x65,  0x00,  0x00,  0x00,  0x00,  0x14,  0x00,  0x00,  0x00, 
 0x03,  0x00,  0x00,  0x00,  0x01,  0x00,  0x07,  0x00,  0x06,  0x00,  0x00,  0x00,  0x63,  0x6f,  0x75,  0x6e, 
 0x74,  0x00,  0x00,  0x00,  0x22,  0x00,  0x00,  0x00,  0x01,  0x00,  0x00,  0x00,  0xf2,  0xa2,  0x0a,  0x37, 
 0x92,  0x4b,  0x9e,  0x92,  0x15,  0x06,  0xb7,  0xab,  0x11,  0xaf,  0xd3,  0xf1,  0x14,  0xb0,  0x4d,  0x4c, 
 0x93,  0xca,  0xfe,  0x2d,  0x92,  0x96,  0x57,  0xe9,  0xae,  0xd3, };
  return blob;
}
template<> inline const uint8_t * TopicTraits<::odom_msgs::PointField>::type_info_blob() {
  static const uint8_t blob[] = {
 0x60,  0x00,  0x00,  0x00,  0x01,  0x10,  0x00,  0x40,  0x28,  0x00,  0x00,  0x00,  0x24,  0x00,  0x00,  0x00, 
 0x14,  0x00,  0x00,  0x00,  0xf1,  0x14,  0xb0,  0x4d,  0x4c,  0x93,  0xca,  0xfe,  0x2d,  0x92,  0x96,  0x57, 
 0xe9,  0xae,  0xd3,  0x00,  0x57,  0x00,  0x00,  0x00,  0x00,  0x00,  0x00,  0x00,  0x04,  0x00,  0x00,  0x00, 
 0x00,  0x00,  0x00,  0x00,  0x02,  0x10,  0x00,  0x40,  0x28,  0x00,  0x00,  0x00,  0x24,  0x00,  0x00,  0x00, 
 0x14,  0x00,  0x00,  0x00,  0xf2,  0xa2,  0x0a,  0x37,  0x92,  0x4b,  0x9e,  0x92,  0x15,  0x06,  0xb7,  0xab, 
 0x11,  0xaf,  0xd3,  0x00,  0x9c,  0x00,  0x00,  0x00,  0x00,  0x00,  0x00,  0x00,  0x04,  0x00,  0x00,  0x00, 
 0x00,  0x00,  0x00,  0x00, };
  return blob;
}
#endif //DDSCXX_HAS_TYPE_DISCOVERY

template <> constexpr const char* TopicTraits<::odom_msgs::PointCloud2>::getTypeName()
{
  return "odom_msgs::PointCloud2";
}

template <> constexpr allowable_encodings_t TopicTraits<::odom_msgs::PointCloud2>::allowableEncodings()
{
  return 0xFFFFFFFEu;
}

template <> constexpr bool TopicTraits<::odom_msgs::PointCloud2>::isSelfContained()
{
  return false;
}

template <> constexpr bool TopicTraits<::odom_msgs::PointCloud2>::isKeyless()
{
  return true;
}

template <> constexpr extensibility TopicTraits<::odom_msgs::PointCloud2>::getExtensibility()
{
  return extensibility::ext_appendable;
}

#ifdef DDSCXX_HAS_TYPE_DISCOVERY
template<> constexpr unsigned int TopicTraits<::odom_msgs::PointCloud2>::type_map_blob_sz() { return 1432; }
template<> constexpr unsigned int TopicTraits<::odom_msgs::PointCloud2>::type_info_blob_sz() { return 244; }
template<> inline const uint8_t * TopicTraits<::odom_msgs::PointCloud2>::type_map_blob() {
  static const uint8_t blob[] = {
 0xf7,  0x01,  0x00,  0x00,  0x04,  0x00,  0x00,  0x00,  0xf1,  0x2a,  0x2a,  0x77,  0xe9,  0x43,  0xe6,  0x47, 
 0x6a,  0xaf,  0x62,  0x13,  0xf4,  0x70,  0x4c,  0x00,  0xd3,  0x00,  0x00,  0x00,  0xf1,  0x51,  0x02,  0x00, 
 0x01,  0x00,  0x00,  0x00,  0x00,  0x00,  0x00,  0x00,  0xc3,  0x00,  0x00,  0x00,  0x09,  0x00,  0x00,  0x00, 
 0x19,  0x00,  0x00,  0x00,  0x00,  0x00,  0x00,  0x00,  0x01,  0x00,  0xf1,  0xb8,  0x99,  0xcd,  0xa8,  0x04, 
 0x50,  0x32,  0xd2,  0x4a,  0x47,  0xeb,  0x3b,  0xa6,  0x1f,  0x09,  0x9f,  0xb9,  0x95,  0x00,  0x00,  0x00, 
 0x0b,  0x00,  0x00,  0x00,  0x01,  0x00,  0x00,  0x00,  0x01,  0x00,  0x07,  0xb4,  0x35,  0xe2,  0x27,  0x00, 
 0x0b,  0x00,  0x00,  0x00,  0x02,  0x00,  0x00,  0x00,  0x01,  0x00,  0x07,  0xea,  0xae,  0x26,  0xa6,  0x00, 
 0x1e,  0x00,  0x00,  0x00,  0x03,  0x00,  0x00,  0x00,  0x01,  0x00,  0x80,  0xf1,  0x01,  0x00,  0x40,  0xf1, 
 0x14,  0xb0,  0x4d,  0x4c,  0x93,  0xca,  0xfe,  0x2d,  0x92,  0x96,  0x57,  0xe9,  0xae,  0xd3,  0xd0,  0x5b, 
 0x6e,  0xd7,  0x00,  0x00,  0x0b,  0x00,  0x00,  0x00,  0x04,  0x00,  0x00,  0x00,  0x01,  0x00,  0x01,  0x70, 
 0x8e,  0x8a,  0xc3,  0x00,  0x0b,  0x00,  0x00,  0x00,  0x05,  0x00,  0x00,  0x00,  0x01,  0x00,  0x07,  0x1a, 
 0x99,  0x6a,  0x87,  0x00,  0x0b,  0x00,  0x00,  0x00,  0x06,  0x00,  0x00,  0x00,  0x01,  0x00,  0x07,  0x8b, 
 0x4f,  0x6f,  0x6b,  0x00,  0x15,  0x00,  0x00,  0x00,  0x07,  0x00,  0x00,  0x00,  0x01,  0x00,  0x81,  0xf3, 
 0x01,  0x00,  0x00,  0x00,  0x00,  0x00,  0x10,  0x00,  0x02,  0x8d,  0x77,  0x7f,  0x38,  0x00,  0x00,  0x00, 
 0x0b,  0x00,  0x00,  0x00,  0x08,  0x00,  0x00,  0x00,  0x01,  0x00,  0x01,  0x40,  0x23,  0x8a,  0xea,  0xf1, 
 0xb8,  0x99,  0xcd,  0xa8,  0x04,  0x50,  0x32,  0xd2,  0x4a,  0x47,  0xeb,  0x3b,  0xa6,  0x1f,  0x00,  0x00, 
 0x48,  0x00,  0x00,  0x00,  0xf1,  0x51,  0x02,  0x00,  0x01,  0x00,  0x00,  0x00,  0x00,  0x00,  0x00,  0x00, 
 0x38,  0x00,  0x00,  0x00,  0x02,  0x00,  0x00,  0x00,  0x19,  0x00,  0x00,  0x00,  0x00,  0x00,  0x00,  0x00, 
 0x01,  0x00,  0xf1,  0xba,  0xde,  0x67,  0x63,  0xb1,  0xd6,  0xa7,  0x2e,  0xce,  0x8a,  0x0e,  0x5d,  0x69, 
 0x42,  0x96,  0xb8,  0xc7,  0x8d,  0x00,  0x00,  0x00,  0x10,  0x00,  0x00,  0x00,  0x01,  0x00,  0x00,  0x00, 
 0x01,  0x00,  0x71,  0x00,  0x00,  0x01,  0x00,  0x00,  0x4b,  0xb3,  0x9c,  0x5c,  0xf1,  0xba,  0xde,  0x67, 
 0x63,  0xb1,  0xd6,  0xa7,  0x2e,  0xce,  0x8a,  0x0e,  0x5d,  0x69,  0x42,  0x00,  0x33,  0x00,  0x00,  0x00, 
 0xf1,  0x51,  0x02,  0x00,  0x01,  0x00,  0x00,  0x00,  0x00,  0x00,  0x00,  0x00,  0x23,  0x00,  0x00,  0x00, 
 0x02,  0x00,  0x00,  0x00,  0x0b,  0x00,  0x00,  0x00,  0x00,  0x00,  0x00,  0x00,  0x01,  0x00,  0x04,  0x74, 
 0x45,  0x9c,  0xa3,  0x00,  0x0b,  0x00,  0x00,  0x00,  0x01,  0x00,  0x00,  0x00,  0x01,  0x00,  0x07,  0xe2, 
 0x04,  0x64,  0xd5,  0xf1,  0x14,  0xb0,  0x4d,  0x4c,  0x93,  0xca,  0xfe,  0x2d,  0x92,  0x96,  0x57,  0xe9, 
 0xae,  0xd3,  0x00,  0x00,  0x53,  0x00,  0x00,  0x00,  0xf1,  0x51,  0x02,  0x00,  0x01,  0x00,  0x00,  0x00, 
 0x00,  0x00,  0x00,  0x00,  0x43,  0x00,  0x00,  0x00,  0x04,  0x00,  0x00,  0x00,  0x0c,  0x00,  0x00,  0x00, 
 0x00,  0x00,  0x00,  0x00,  0x01,  0x00,  0x70,  0x80,  0xb0,  0x68,  0x93,  0x1c,  0x0b,  0x00,  0x00,  0x00, 
 0x01,  0x00,  0x00,  0x00,  0x01,  0x00,  0x07,  0x7a,  0x86,  0xc1,  0x57,  0x00,  0x0b,  0x00,  0x00,  0x00, 
 0x02,  0x00,  0x00,  0x00,  0x01,  0x00,  0x02,  0x39,  0x31,  0x10,  0x8d,  0x00,  0x0b,  0x00,  0x00,  0x00, 
 0x03,  0x00,  0x00,  0x00,  0x01,  0x00,  0x07,  0xe2,  0x94,  0x2a,  0x04,  0x00,  0x18,  0x03,  0x00,  0x00, 
 0x04,  0x00,  0x00,  0x00,  0xf2,  0x3a,  0xf9,  0x76,  0xe1,  0xd7,  0xcb,  0x6a,  0xce,  0xac,  0x7b,  0x96, 
 0x46,  0x42,  0x88,  0x00,  0x5b,  0x01,  0x00,  0x00,  0xf2,  0x51,  0x02,  0x00,  0x1f,  0x00,  0x00,  0x00, 
 0x00,  0x00,  0x00,  0x00,  0x17,  0x00,  0x00,  0x00,  0x6f,  0x64,  0x6f,  0x6d,  0x5f,  0x6d,  0x73,  0x67, 
 0x73,  0x3a,  0x3a,  0x50,  0x6f,  0x69,  0x6e,  0x74,  0x43,  0x6c,  0x6f,  0x75,  0x64,  0x32,  0x00,  0x00, 
 0x2f,  0x01,  0x00,  0x00,  0x09,  0x00,  0x00,  0x00,  0x25,  0x00,  0x00,  0x00,  0x00,  0x00,  0x00,  0x00, 
 0x01,  0x00,  0xf2,  0xa0,  0x7b,  0x6c,  0x10,  0x56,  0xfe,  0xcf,  0xc3,  0x7a,  0xb0,  0x80,  0x18,  0xf2, 
 0xb3,  0x00,  0x00,  0x00,  0x07,  0x00,  0x00,  0x00,  0x68,  0x65,  0x61,  0x64,  0x65,  0x72,  0x00,  0x00, 
 0x00,  0x00,  0x00,  0x00,  0x15,  0x00,  0x00,  0x00,  0x01,  0x00,  0x00,  0x00,  0x01,  0x00,  0x07,  0x00, 
 0x07,  0x00,  0x00,  0x00,  0x68,  0x65,  0x69,  0x67,  0x68,  0x74,  0x00,  0x00,  0x00,  0x00,  0x00,  0x00, 
 0x14,  0x00,  0x00,  0x00,  0x02,  0x00,  0x00,  0x00,  0x01,  0x00,  0x07,  0x00,  0x06,  0x00,  0x00,  0x00, 
 0x77,  0x69,  0x64,  0x74,  0x68,  0x00,  0x00,  0x00,  0x29,  0x00,  0x00,  0x00,  0x03,  0x00,  0x00,  0x00, 
 0x01,  0x00,  0x80,  0xf2,  0x01,  0x00,  0x40,  0xf2,  0xa2,  0x0a,  0x37,  0x92,  0x4b,  0x9e,  0x92,  0x15, 
 0x06,  0xb7,  0xab,  0x11,  0xaf,  0xd3,  0x00,  0x00,  0x07,  0x00,  0x00,  0x00,  0x66,  0x69,  0x65,  0x6c, 
 0x64,  0x73,  0x00,  0x00,  0x00,  0x00,  0x00,  0x00,  0x1b,  0x00,  0x00,  0x00,  0x04,  0x00,  0x00,  0x00, 
 0x01,  0x00,  0x01,  0x00,  0x0d,  0x00,  0x00,  0x00,  0x69,  0x73,  0x5f,  0x62,  0x69,  0x67,  0x65,  0x6e, 
 0x64,  0x69,  0x61,  0x6e,  0x00,  0x00,  0x00,  0x00,  0x19,  0x00,  0x00,  0x00,  0x05,  0x00,  0x00,  0x00, 
 0x01,  0x00,  0x07,  0x00,  0x0b,  0x00,  0x00,  0x00,  0x70,  0x6f,  0x69,  0x6e,  0x74,  0x5f,  0x73,  0x74, 
 0x65,  0x70,  0x00,  0x00,  0x00,  0x00,  0x00,  0x00,  0x17,  0x00,  0x00,  0x00,  0x06,  0x00,  0x00,  0x00, 
 0x01,  0x00,  0x07,  0x00,  0x09,  0x00,  0x00,  0x00,  0x72,  0x6f,  0x77,  0x5f,  0x73,  0x74,  0x65,  0x70, 
 0x00,  0x00,  0x00,  0x00,  0x1f,  0x00,  0x00,  0x00,  0x07,  0x00,  0x00,  0x00,  0x01,  0x00,  0x81,  0xf3, 
 0x01,  0x00,  0x00,  0x00,  0x00,  0x00,  0x10,  0x00,  0x02,  0x00,  0x00,  0x00,  0x05,  0x00,  0x00,  0x00, 
 0x64,  0x61,  0x74,  0x61,  0x00,  0x00,  0x00,  0x00,  0x17,  0x00,  0x00,  0x00,  0x08,  0x00,  0x00,  0x00, 
 0x01,  0x00,  0x01,  0x00,  0x09,  0x00,  0x00,  0x00,  0x69,  0x73,  0x5f,  0x64,  0x65,  0x6e,  0x73,  0x65, 
 0x00,  0x00,  0x00,  0xf2,  0xa0,  0x7b,  0x6c,  0x10,  0x56,  0xfe,  0xcf,  0xc3,  0x7a,  0xb0,  0x80,  0x18, 
 0xf2,  0xb3,  0x00,  0x00,  0x73,  0x00,  0x00,  0x00,  0xf2,  0x51,  0x02,  0x00,  0x1a,  0x00,  0x00,  0x00, 
 0x00,  0x00,  0x00,  0x00,  0x12,  0x00,  0x00,  0x00,  0x6f,  0x64,  0x6f,  0x6d,  0x5f,  0x6d,  0x73,  0x67, 
 0x73,  0x3a,  0x3a,  0x48,  0x65,  0x61,  0x64,  0x65,  0x72,  0x00,  0x00,  0x00,  0x4b,  0x00,  0x00,  0x00, 
 0x02,  0x00,  0x00,  0x00,  0x24,  0x00,  0x00,  0x00,  0x00,  0x00,  0x00,  0x00,  0x01,  0x00,  0xf2,  0xcb, 
 0xe0,  0x76,  0xc6,  0x49,  0xc0,  0xee,  0x9d,  0x34,  0xdb,  0xaa,  0x1a,  0x2f,  0xe8,  0x00,  0x00,  0x00, 
 0x06,  0x00,  0x00,  0x00,  0x73,  0x74,  0x61,  0x6d,  0x70,  0x00,  0x00,  0x00,  0x1b,  0x00,  0x00,  0x00, 
 0x01,  0x00,  0x00,  0x00,  0x01,  0x00,  0x71,  0x00,  0x00,  0x01,  0x00,  0x00,  0x09,  0x00,  0x00,  0x00, 
 0x66,  0x72,  0x61,  0x6d,  0x65,  0x5f,  0x69,  0x64,  0x00,  0x00,  0x00,  0xf2,  0xcb,  0xe0,  0x76,  0xc6, 
 0x49,  0xc0,  0xee,  0x9d,  0x34,  0xdb,  0xaa,  0x1a,  0x2f,  0xe8,  0x00,  0x00,  0x5a,  0x00,  0x00,  0x00, 
 0xf2,  0x51,  0x02,  0x00,  0x18,  0x00,  0x00,  0x00,  0x00,  0x00,  0x00,  0x00,  0x10,  0x00,  0x00,  0x00, 
 0x6f,  0x64,  0x6f,  0x6d,  0x5f,  0x6d,  0x73,  0x67,  0x73,  0x3a,  0x3a,  0x54,  0x69,  0x6d,  0x65,  0x00, 
 0x36,  0x00,  0x00,  0x00,  0x02,  0x00,  0x00,  0x00,  0x12,  0x00,  0x00,  0x00,  0x00,  0x00,  0x00,  0x00, 
 0x01,  0x00,  0x04,  0x00,  0x04,  0x00,  0x00,  0x00,  0x73,  0x65,  0x63,  0x00,  0x00,  0x00,  0x00,  0x00, 
 0x16,  0x00,  0x00,  0x00,  0x01,  0x00,  0x00,  0x00,  0x01,  0x00,  0x07,  0x00,  0x08,  0x00,  0x00,  0x00, 
 0x6e,  0x61,  0x6e,  0x6f,  0x73,  0x65,  0x63,  0x00,  0x00,  0x00,  0xf2,  0xa2,  0x0a,  0x37,  0x92,  0x4b, 
 0x9e,  0x92,  0x15,  0x06,  0xb7,  0xab,  0x11,  0xaf,  0xd3,  0x00,  0x00,  0x00,  0x98,  0x00,  0x00,  0x00, 
 0xf2,  0x51,  0x02,  0x00,  0x1e,  0x00,  0x00,  0x00,  0x00,  0x00,  0x00,  0x00,  0x16,  0x00,  0x00,  0x00, 
 0x6f,  0x64,  0x6f,  0x6d,  0x5f,  0x6d,  0x73,  0x67,  0x73,  0x3a,  0x3a,  0x50,  0x6f,  0x69,  0x6e,  0x74, 
 0x46,  0x69,  0x65,  0x6c,  0x64,  0x00,  0x00,  0x00,  0x6c,  0x00,  0x00,  0x00,  0x04,  0x00,  0x00,  0x00, 
 0x13,  0x00,  0x00,  0x00,  0x00,  0x00,  0x00,  0x00,  0x01,  0x00,  0x70,  0x80,  0x05,  0x00,  0x00,  0x00, 
 0x6e,  0x61,  0x6d,  0x65,  0x00,  0x00,  0x00,  0x00,  0x15,  0x00,  0x00,  0x00,  0x01,  0x00,  0x00,  0x00, 
 0x01,  0x00,  0x07,  0x00,  0x07,  0x00,  0x00,  0x00,  0x6f,  0x66,  0x66,  0x73,  0x65,  0x74,  0x00,  0x00, 
 0x00,  0x00,  0x00,  0x00,  0x17,  0x00,  0x00,  0x00,  0x02,  0x00,  0x00,  0x00,  0x01,  0x00,  0x02,  0x00, 
 0x09,  0x00,  0x00,  0x00,  0x64,  0x61,  0x74,  0x61,  0x74,  0x79,  0x70,  0x65,  0x00,  0x00,  0x00,  0x00, 
 0x14,  0x00,  0x00,  0x00,  0x03,  0x00,  0x00,  0x00,  0x01,  0x00,  0x07,  0x00,  0x06,  0x00,  0x00,  0x00, 
 0x63,  0x6f,  0x75,  0x6e,  0x74,  0x00,  0x00,  0x00,  0x7c,  0x00,  0x00,  0x00,  0x04,  0x00,  0x00,  0x00, 
 0xf2,  0x3a,  0xf9,  0x76,  0xe1,  0xd7,  0xcb,  0x6a,  0xce,  0xac,  0x7b,  0x96,  0x46,  0x42,  0x88,  0xf1, 
 0x2a,  0x2a,  0x77,  0xe9,  0x43,  0xe6,  0x47,  0x6a,  0xaf,  0x62,  0x13,  0xf4,  0x70,  0x4c,  0xf2,  0xa0, 
 0x7b,  0x6c,  0x10,  0x56,  0xfe,  0xcf,  0xc3,  0x7a,  0xb0,  0x80,  0x18,  0xf2,  0xb3,  0xf1,  0xb8,  0x99, 
 0xcd,  0xa8,  0x04,  0x50,  0x32,  0xd2,  0x4a,  0x47,  0xeb,  0x3b,  0xa6,  0x1f,  0xf2,  0xcb,  0xe0,  0x76, 
 0xc6,  0x49,  0xc0,  0xee,  0x9d,  0x34,  0xdb,  0xaa,  0x1a,  0x2f,  0xe8,  0xf1,  0xba,  0xde,  0x67,  0x63, 
 0xb1,  0xd6,  0xa7,  0x2e,  0xce,  0x8a,  0x0e,  0x5d,  0x69,  0x42,  0xf2,  0xa2,  0x0a,  0x37,  0x92,  0x4b, 
 0x9e,  0x92,  0x15,  0x06,  0xb7,  0xab,  0x11,  0xaf,  0xd3,  0xf1,  0x14,  0xb0,  0x4d,  0x4c,  0x93,  0xca, 
 0xfe,  0x2d,  0x92,  0x96,  0x57,  0xe9,  0xae,  0xd3, };
  return blob;
}
template<> inline const uint8_t * TopicTraits<::odom_msgs::PointCloud2>::type_info_blob() {
  static const uint8_t blob[] = {
 0xf0,  0x00,  0x00,  0x00,  0x01,  0x10,  0x00,  0x40,  0x70,  0x00,  0x00,  0x00,  0x6c,  0x00,  0x00,  0x00, 
 0x14,  0x00,  0x00,  0x00,  0xf1,  0x2a,  0x2a,  0x77,  0xe9,  0x43,  0xe6,  0x47,  0x6a,  0xaf,  0x62,  0x13, 
 0xf4,  0x70,  0x4c,  0x00,  0xd7,  0x00,  0x00,  0x00,  0x03,  0x00,  0x00,  0x00,  0x4c,  0x00,  0x00,  0x00, 
 0x03,  0x00,  0x00,  0x00,  0x14,  0x00,  0x00,  0x00,  0xf1,  0xb8,  0x99,  0xcd,  0xa8,  0x04,  0x50,  0x32, 
 0xd2,  0x4a,  0x47,  0xeb,  0x3b,  0xa6,  0x1f,  0x00,  0x4c,  0x00,  0x00,  0x00,  0x14,  0x00,  0x00,  0x00, 
 0xf1,  0xba,  0xde,  0x67,  0x63,  0xb1,  0xd6,  0xa7,  0x2e,  0xce,  0x8a,  0x0e,  0x5d,  0x69,  0x42,  0x00, 
 0x37,  0x00,  0x00,  0x00,  0x14,  0x00,  0x00,  0x00,  0xf1,  0x14,  0xb0,  0x4d,  0x4c,  0x93,  0xca,  0xfe, 
 0x2d,  0x92,  0x96,  0x57,  0xe9,  0xae,  0xd3,  0x00,  0x57,  0x00,  0x00,  0x00,  0x02,  0x10,  0x00,  0x40, 
 0x70,  0x00,  0x00,  0x00,  0x6c,  0x00,  0x00,  0x00,  0x14,  0x00,  0x00,  0x00,  0xf2,  0x3a,  0xf9,  0x76, 
 0xe1,  0xd7,  0xcb,  0x6a,  0xce,  0xac,  0x7b,  0x96,  0x46,  0x42,  0x88,  0x00,  0x5f,  0x01,  0x00,  0x00, 
 0x03,  0x00,  0x00,  0x00,  0x4c,  0x00,  0x00,  0x00,  0x03,  0x00,  0x00,  0x00,  0x14,  0x00,  0x00,  0x00, 
 0xf2,  0xa0,  0x7b,  0x6c,  0x10,  0x56,  0xfe,  0xcf,  0xc3,  0x7a,  0xb0,  0x80,  0x18,  0xf2,  0xb3,  0x00, 
 0x77,  0x00,  0x00,  0x00,  0x14,  0x00,  0x00,  0x00,  0xf2,  0xcb,  0xe0,  0x76,  0xc6,  0x49,  0xc0,  0xee, 
 0x9d,  0x34,  0xdb,  0xaa,  0x1a,  0x2f,  0xe8,  0x00,  0x5e,  0x00,  0x00,  0x00,  0x14,  0x00,  0x00,  0x00, 
 0xf2,  0xa2,  0x0a,  0x37,  0x92,  0x4b,  0x9e,  0x92,  0x15,  0x06,  0xb7,  0xab,  0x11,  0xaf,  0xd3,  0x00, 
 0x9c,  0x00,  0x00,  0x00, };
  return blob;
}
#endif //DDSCXX_HAS_TYPE_DISCOVERY

template <> constexpr const char* TopicTraits<::odom_msgs::OdometryPointCloud>::getTypeName()
{
  return "odom_msgs::OdometryPointCloud";
}

template <> constexpr allowable_encodings_t TopicTraits<::odom_msgs::OdometryPointCloud>::allowableEncodings()
{
  return 0xFFFFFFFEu;
}

template <> constexpr bool TopicTraits<::odom_msgs::OdometryPointCloud>::isSelfContained()
{
  return false;
}

template <> constexpr bool TopicTraits<::odom_msgs::OdometryPointCloud>::isKeyless()
{
  return true;
}

template <> constexpr extensibility TopicTraits<::odom_msgs::OdometryPointCloud>::getExtensibility()
{
  return extensibility::ext_appendable;
}

#ifdef DDSCXX_HAS_TYPE_DISCOVERY
template<> constexpr unsigned int TopicTraits<::odom_msgs::OdometryPointCloud>::type_map_blob_sz() { return 3788; }
template<> constexpr unsigned int TopicTraits<::odom_msgs::OdometryPointCloud>::type_info_blob_sz() { return 628; }
template<> inline const uint8_t * TopicTraits<::odom_msgs::OdometryPointCloud>::type_map_blob() {
  static const uint8_t blob[] = {
 0x43,  0x05,  0x00,  0x00,  0x0c,  0x00,  0x00,  0x00,  0xf1,  0x56,  0x3f,  0x33,  0xcb,  0x59,  0xad,  0x1d, 
 0x2b,  0x32,  0xa6,  0xc2,  0xed,  0x26,  0x4f,  0x00,  0x51,  0x00,  0x00,  0x00,  0xf1,  0x51,  0x02,  0x00, 
 0x01,  0x00,  0x00,  0x00,  0x00,  0x00,  0x00,  0x00,  0x41,  0x00,  0x00,  0x00,  0x02,  0x00,  0x00,  0x00, 
 0x19,  0x00,  0x00,  0x00,  0x00,  0x00,  0x00,  0x00,  0x01,  0x00,  0xf1,  0x3a,  0xf9,  0xcd,  0x2d,  0x05, 
 0x73,  0x23,  0x98,  0xc2,  0x45,  0xc9,  0x6c,  0x4f,  0x4a,  0x4c,  0x21,  0x31,  0x79,  0x00,  0x00,  0x00, 
 0x19,  0x00,  0x00,  0x00,  0x01,  0x00,  0x00,  0x00,  0x01,  0x00,  0xf1,  0x2a,  0x2a,  0x77,  0xe9,  0x43, 
 0xe6,  0x47,  0x6a,  0xaf,  0x62,  0x13,  0xf4,  0x70,  0x4c,  0x2c,  0xa6,  0x66,  0xe9,  0xf1,  0x3a,  0xf9, 
 0xcd,  0x2d,  0x05,  0x73,  0x23,  0x98,  0xc2,  0x45,  0xc9,  0x6c,  0x4f,  0x4a,  0x85,  0x00,  0x00,  0x00, 
 0xf1,  0x51,  0x02,  0x00,  0x01,  0x00,  0x00,  0x00,  0x00,  0x00,  0x00,  0x00,  0x75,  0x00,  0x00,  0x00, 
 0x04,  0x00,  0x00,  0x00,  0x19,  0x00,  0x00,  0x00,  0x00,  0x00,  0x00,  0x00,  0x01,  0x00,  0xf1,  0xb8, 
 0x99,  0xcd,  0xa8,  0x04,  0x50,  0x32,  0xd2,  0x4a,  0x47,  0xeb,  0x3b,  0xa6,  0x1f,  0x09,  0x9f,  0xb9, 
 0x95,  0x00,  0x00,  0x00,  0x10,  0x00,  0x00,  0x00,  0x01,  0x00,  0x00,  0x00,  0x01,  0x00,  0x71,  0x00, 
 0x00,  0x01,  0x00,  0x00,  0x8d,  0x9f,  0x65,  0x1d,  0x19,  0x00,  0x00,  0x00,  0x02,  0x00,  0x00,  0x00, 
 0x01,  0x00,  0xf1,  0xe4,  0x4d,  0x68,  0x96,  0x1b,  0xe9,  0x1a,  0xd5,  0x9d,  0x0d,  0x41,  0x34,  0xba, 
 0x7d,  0x2d,  0x5f,  0x8a,  0xe9,  0x00,  0x00,  0x00,  0x19,  0x00,  0x00,  0x00,  0x03,  0x00,  0x00,  0x00, 
 0x01,  0x00,  0xf1,  0xa9,  0xef,  0xae,  0x1c,  0x47,  0x86,  0x59,  0xb1,  0x19,  0x5b,  0x0c,  0x4d,  0xdf, 
 0x1c,  0xeb,  0x3b,  0xac,  0x16,  0xf1,  0xb8,  0x99,  0xcd,  0xa8,  0x04,  0x50,  0x32,  0xd2,  0x4a,  0x47, 
 0xeb,  0x3b,  0xa6,  0x1f,  0x48,  0x00,  0x00,  0x00,  0xf1,  0x51,  0x02,  0x00,  0x01,  0x00,  0x00,  0x00, 
 0x00,  0x00,  0x00,  0x00,  0x38,  0x00,  0x00,  0x00,  0x02,  0x00,  0x00,  0x00,  0x19,  0x00,  0x00,  0x00, 
 0x00,  0x00,  0x00,  0x00,  0x01,  0x00,  0xf1,  0xba,  0xde,  0x67,  0x63,  0xb1,  0xd6,  0xa7,  0x2e,  0xce, 
 0x8a,  0x0e,  0x5d,  0x69,  0x42,  0x96,  0xb8,  0xc7,  0x8d,  0x00,  0x00,  0x00,  0x10,  0x00,  0x00,  0x00, 
 0x01,  0x00,  0x00,  0x00,  0x01,  0x00,  0x71,  0x00,  0x00,  0x01,  0x00,  0x00,  0x4b,  0xb3,  0x9c,  0x5c, 
 0xf1,  0xba,  0xde,  0x67,  0x63,  0xb1,  0xd6,  0xa7,  0x2e,  0xce,  0x8a,  0x0e,  0x5d,  0x69,  0x42,  0x00, 
 0x33,  0x00,  0x00,  0x00,  0xf1,  0x51,  0x02,  0x00,  0x01,  0x00,  0x00,  0x00,  0x00,  0x00,  0x00,  0x00, 
 0x23,  0x00,  0x00,  0x00,  0x02,  0x00,  0x00,  0x00,  0x0b,  0x00,  0x00,  0x00,  0x00,  0x00,  0x00,  0x00, 
 0x01,  0x00,  0x04,  0x74,  0x45,  0x9c,  0xa3,  0x00,  0x0b,  0x00,  0x00,  0x00,  0x01,  0x00,  0x00,  0x00, 
 0x01,  0x00,  0x07,  0xe2,  0x04,  0x64,  0xd5,  0xf1,  0xe4,  0x4d,  0x68,  0x96,  0x1b,  0xe9,  0x1a,  0xd5, 
 0x9d,  0x0d,  0x41,  0x34,  0xba,  0x7d,  0x00,  0x00,  0x4e,  0x00,  0x00,  0x00,  0xf1,  0x51,  0x02,  0x00, 
 0x01,  0x00,  0x00,  0x00,  0x00,  0x00,  0x00,  0x00,  0x3e,  0x00,  0x00,  0x00,  0x02,  0x00,  0x00,  0x00, 
 0x19,  0x00,  0x00,  0x00,  0x00,  0x00,  0x00,  0x00,  0x01,  0x00,  0xf1,  0xbe,  0xdb,  0xdd,  0xbd,  0x08, 
 0xba,  0xcb,  0xdd,  0x2e,  0xc2,  0xef,  0xad,  0x80,  0x24,  0x2d,  0x5f,  0x8a,  0xe9,  0x00,  0x00,  0x00, 
 0x16,  0x00,  0x00,  0x00,  0x01,  0x00,  0x00,  0x00,  0x01,  0x00,  0x90,  0xf3,  0x01,  0x00,  0x00,  0x00, 
 0x01,  0x00,  0x00,  0x00,  0x24,  0x0a,  0xac,  0xdb,  0x06,  0x55,  0xf1,  0xbe,  0xdb,  0xdd,  0xbd,  0x08, 
 0xba,  0xcb,  0xdd,  0x2e,  0xc2,  0xef,  0xad,  0x80,  0x24,  0x00,  0x00,  0x00,  0x51,  0x00,  0x00,  0x00, 
 0xf1,  0x51,  0x02,  0x00,  0x01,  0x00,  0x00,  0x00,  0x00,  0x00,  0x00,  0x00,  0x41,  0x00,  0x00,  0x00, 
 0x02,  0x00,  0x00,  0x00,  0x19,  0x00,  0x00,  0x00,  0x00,  0x00,  0x00,  0x00,  0x01,  0x00,  0xf1,  0xb4, 
 0x9c,  0x4d,  0x1f,  0x9e,  0x94,  0xb3,  0x8f,  0x94,  0x8d,  0xe3,  0x00,  0xef,  0x1d,  0x47,  0x57,  0xfe, 
 0x07,  0x00,  0x00,  0x00,  0x19,  0x00,  0x00,  0x00,  0x01,  0x00,  0x00,  0x00,  0x01,  0x00,  0xf1,  0x33, 
 0x19,  0xf5,  0x25,  0xa9,  0x0e,  0xfb,  0x3c,  0x49,  0x08,  0x3e,  0x5d,  0xd9,  0x26,  0xda,  0x16,  0x39, 
 0x42,  0xf1,  0xb4,  0x9c,  0x4d,  0x1f,  0x9e,  0x94,  0xb3,  0x8f,  0x94,  0x8d,  0xe3,  0x00,  0xef,  0x1d, 
 0x43,  0x00,  0x00,  0x00,  0xf1,  0x51,  0x02,  0x00,  0x01,  0x00,  0x00,  0x00,  0x00,  0x00,  0x00,  0x00, 
 0x33,  0x00,  0x00,  0x00,  0x03,  0x00,  0x00,  0x00,  0x0b,  0x00,  0x00,  0x00,  0x00,  0x00,  0x00,  0x00, 
 0x01,  0x00,  0x0a,  0x9d,  0xd4,  0xe4,  0x61,  0x00,  0x0b,  0x00,  0x00,  0x00,  0x01,  0x00,  0x00,  0x00, 
 0x01,  0x00,  0x0a,  0x41,  0x52,  0x90,  0x76,  0x00,  0x0b,  0x00,  0x00,  0x00,  0x02,  0x00,  0x00,  0x00, 
 0x01,  0x00,  0x0a,  0xfb,  0xad,  0xe9,  0xe3,  0xf1,  0x33,  0x19,  0xf5,  0x25,  0xa9,  0x0e,  0xfb,  0x3c, 
 0x49,  0x08,  0x3e,  0x5d,  0xd9,  0x26,  0x00,  0x00,  0x53,  0x00,  0x00,  0x00,  0xf1,  0x51,  0x02,  0x00, 
 0x01,  0x00,  0x00,  0x00,  0x00,  0x00,  0x00,  0x00,  0x43,  0x00,  0x00,  0x00,  0x04,  0x00,  0x00,  0x00, 
 0x0b,  0x00,  0x00,  0x00,  0x00,  0x00,  0x00,  0x00,  0x01,  0x00,  0x0a,  0x9d,  0xd4,  0xe4,  0x61,  0x00, 
 0x0b,  0x00,  0x00,  0x00,  0x01,  0x00,  0x00,  0x00,  0x01,  0x00,  0x0a,  0x41,  0x52,  0x90,  0x76,  0x00, 
 0x0b,  0x00,  0x00,  0x00,  0x02,  0x00,  0x00,  0x00,  0x01,  0x00,  0x0a,  0xfb,  0xad,  0xe9,  0xe3,  0x00, 
 0x0b,  0x00,  0x00,  0x00,  0x03,  0x00,  0x00,  0x00,  0x01,  0x00,  0x0a,  0xf1,  0x29,  0x01,  0x86,  0xf1, 
 0xa9,  0xef,  0xae,  0x1c,  0x47,  0x86,  0x59,  0xb1,  0x19,  0x5b,  0x0c,  0x4d,  0xdf,  0x1c,  0x00,  0x00, 
 0x4e,  0x00,  0x00,  0x00,  0xf1,  0x51,  0x02,  0x00,  0x01,  0x00,  0x00,  0x00,  0x00,  0x00,  0x00,  0x00, 
 0x3e,  0x00,  0x00,  0x00,  0x02,  0x00,  0x00,  0x00,  0x19,  0x00,  0x00,  0x00,  0x00,  0x00,  0x00,  0x00, 
 0x01,  0x00,  0xf1,  0xfe,  0xbb,  0x45,  0xea,  0x92,  0x8f,  0x46,  0x28,  0xd5,  0x90,  0xef,  0x77,  0x51, 
 0x0c,  0xeb,  0x3b,  0xac,  0x16,  0x00,  0x00,  0x00,  0x16,  0x00,  0x00,  0x00,  0x01,  0x00,  0x00,  0x00, 
 0x01,  0x00,  0x90,  0xf3,  0x01,  0x00,  0x00,  0x00,  0x01,  0x00,  0x00,  0x00,  0x24,  0x0a,  0xac,  0xdb, 
 0x06,  0x55,  0xf1,  0xfe,  0xbb,  0x45,  0xea,  0x92,  0x8f,  0x46,  0x28,  0xd5,  0x90,  0xef,  0x77,  0x51, 
 0x0c,  0x00,  0x00,  0x00,  0x51,  0x00,  0x00,  0x00,  0xf1,  0x51,  0x02,  0x00,  0x01,  0x00,  0x00,  0x00, 
 0x00,  0x00,  0x00,  0x00,  0x41,  0x00,  0x00,  0x00,  0x02,  0x00,  0x00,  0x00,  0x19,  0x00,  0x00,  0x00, 
 0x00,  0x00,  0x00,  0x00,  0x01,  0x00,  0xf1,  0xb4,  0x9c,  0x4d,  0x1f,  0x9e,  0x94,  0xb3,  0x8f,  0x94, 
 0x8d,  0xe3,  0x00,  0xef,  0x1d,  0x9a,  0x93,  0x2b,  0x3c,  0x00,  0x00,  0x00,  0x19,  0x00,  0x00,  0x00, 
 0x01,  0x00,  0x00,  0x00,  0x01,  0x00,  0xf1,  0xb4,  0x9c,  0x4d,  0x1f,  0x9e,  0x94,  0xb3,  0x8f,  0x94, 
 0x8d,  0xe3,  0x00,  0xef,  0x1d,  0xd1,  0x8b,  0x86,  0x24,  0xf1,  0x2a,  0x2a,  0x77,  0xe9,  0x43,  0xe6, 
 0x47,  0x6a,  0xaf,  0x62,  0x13,  0xf4,  0x70,  0x4c,  0xd3,  0x00,  0x00,  0x00,  0xf1,  0x51,  0x02,  0x00, 
 0x01,  0x00,  0x00,  0x00,  0x00,  0x00,  0x00,  0x00,  0xc3,  0x00,  0x00,  0x00,  0x09,  0x00,  0x00,  0x00, 
 0x19,  0x00,  0x00,  0x00,  0x00,  0x00,  0x00,  0x00,  0x01,  0x00,  0xf1,  0xb8,  0x99,  0xcd,  0xa8,  0x04, 
 0x50,  0x32,  0xd2,  0x4a,  0x47,  0xeb,  0x3b,  0xa6,  0x1f,  0x09,  0x9f,  0xb9,  0x95,  0x00,  0x00,  0x00, 
 0x0b,  0x00,  0x00,  0x00,  0x01,  0x00,  0x00,  0x00,  0x01,  0x00,  0x07,  0xb4,  0x35,  0xe2,  0x27,  0x00, 
 0x0b,  0x00,  0x00,  0x00,  0x02,  0x00,  0x00,  0x00,  0x01,  0x00,  0x07,  0xea,  0xae,  0x26,  0xa6,  0x00, 
 0x1e,  0x00,  0x00,  0x00,  0x03,  0x00,  0x00,  0x00,  0x01,  0x00,  0x80,  0xf1,  0x01,  0x00,  0x40,  0xf1, 
 0x14,  0xb0,  0x4d,  0x4c,  0x93,  0xca,  0xfe,  0x2d,  0x92,  0x96,  0x57,  0xe9,  0xae,  0xd3,  0xd0,  0x5b, 
 0x6e,  0xd7,  0x00,  0x00,  0x0b,  0x00,  0x00,  0x00,  0x04,  0x00,  0x00,  0x00,  0x01,  0x00,  0x01,  0x70, 
 0x8e,  0x8a,  0xc3,  0x00,  0x0b,  0x00,  0x00,  0x00,  0x05,  0x00,  0x00,  0x00,  0x01,  0x00,  0x07,  0x1a, 
 0x99,  0x6a,  0x87,  0x00,  0x0b,  0x00,  0x00,  0x00,  0x06,  0x00,  0x00,  0x00,  0x01,  0x00,  0x07,  0x8b, 
 0x4f,  0x6f,  0x6b,  0x00,  0x15,  0x00,  0x00,  0x00,  0x07,  0x00,  0x00,  0x00,  0x01,  0x00,  0x81,  0xf3, 
 0x01,  0x00,  0x00,  0x00,  0x00,  0x00,  0x10,  0x00,  0x02,  0x8d,  0x77,  0x7f,  0x38,  0x00,  0x00,  0x00, 
 0x0b,  0x00,  0x00,  0x00,  0x08,  0x00,  0x00,  0x00,  0x01,  0x00,  0x01,  0x40,  0x23,  0x8a,  0xea,  0xf1, 
 0x14,  0xb0,  0x4d,  0x4c,  0x93,  0xca,  0xfe,  0x2d,  0x92,  0x96,  0x57,  0xe9,  0xae,  0xd3,  0x00,  0x00, 
 0x53,  0x00,  0x00,  0x00,  0xf1,  0x51,  0x02,  0x00,  0x01,  0x00,  0x00,  0x00,  0x00,  0x00,  0x00,  0x00, 
 0x43,  0x00,  0x00,  0x00,  0x04,  0x00,  0x00,  0x00,  0x0c,  0x00,  0x00,  0x00,  0x00,  0x00,  0x00,  0x00, 
 0x01,  0x00,  0x70,  0x80,  0xb0,  0x68,  0x93,  0x1c,  0x0b,  0x00,  0x00,  0x00,  0x01,  0x00,  0x00,  0x00, 
 0x01,  0x00,  0x07,  0x7a,  0x86,  0xc1,  0x57,  0x00,  0x0b,  0x00,  0x00,  0x00,  0x02,  0x00,  0x00,  0x00, 
 0x01,  0x00,  0x02,  0x39,  0x31,  0x10,  0x8d,  0x00,  0x0b,  0x00,  0x00,  0x00,  0x03,  0x00,  0x00,  0x00, 
 0x01,  0x00,  0x07,  0xe2,  0x94,  0x2a,  0x04,  0x00,  0x10,  0x08,  0x00,  0x00,  0x0c,  0x00,  0x00,  0x00, 
 0xf2,  0xd0,  0xd9,  0x35,  0x25,  0x39,  0x86,  0xe6,  0xd4,  0xc8,  0xc2,  0xf3,  0x34,  0x2b,  0xc5,  0x00, 
 0x86,  0x00,  0x00,  0x00,  0xf2,  0x51,  0x02,  0x00,  0x26,  0x00,  0x00,  0x00,  0x00,  0x00,  0x00,  0x00, 
 0x1e,  0x00,  0x00,  0x00,  0x6f,  0x64,  0x6f,  0x6d,  0x5f,  0x6d,  0x73,  0x67,  0x73,  0x3a,  0x3a,  0x4f, 
 0x64,  0x6f,  0x6d,  0x65,  0x74,  0x72,  0x79,  0x50,  0x6f,  0x69,  0x6e,  0x74,  0x43,  0x6c,  0x6f,  0x75, 
 0x64,  0x00,  0x00,  0x00,  0x52,  0x00,  0x00,  0x00,  0x02,  0x00,  0x00,  0x00,  0x23,  0x00,  0x00,  0x00, 
 0x00,  0x00,  0x00,  0x00,  0x01,  0x00,  0xf2,  0x10,  0xe8,  0xb2,  0x62,  0x65,  0x6e,  0x1a,  0xf3,  0x6e, 
 0x6d,  0xa2,  0x36,  0x4b,  0x9b,  0x00,  0x00,  0x00,  0x05,  0x00,  0x00,  0x00,  0x6f,  0x64,  0x6f,  0x6d, 
 0x00,  0x00,  0x00,  0x00,  0x22,  0x00,  0x00,  0x00,  0x01,  0x00,  0x00,  0x00,  0x01,  0x00,  0xf2,  0x3a, 
 0xf9,  0x76,  0xe1,  0xd7,  0xcb,  0x6a,  0xce,  0xac,  0x7b,  0x96,  0x46,  0x42,  0x88,  0x00,  0x00,  0x00, 
 0x04,  0x00,  0x00,  0x00,  0x70,  0x63,  0x6c,  0x00,  0x00,  0x00,  0xf2,  0x10,  0xe8,  0xb2,  0x62,  0x65, 
 0x6e,  0x1a,  0xf3,  0x6e,  0x6d,  0xa2,  0x36,  0x4b,  0x9b,  0x00,  0x00,  0x00,  0xd0,  0x00,  0x00,  0x00, 
 0xf2,  0x51,  0x02,  0x00,  0x1c,  0x00,  0x00,  0x00,  0x00,  0x00,  0x00,  0x00,  0x14,  0x00,  0x00,  0x00, 
 0x6f,  0x64,  0x6f,  0x6d,  0x5f,  0x6d,  0x73,  0x67,  0x73,  0x3a,  0x3a,  0x4f,  0x64,  0x6f,  0x6d,  0x65, 
 0x74,  0x72,  0x79,  0x00,  0xa8,  0x00,  0x00,  0x00,  0x04,  0x00,  0x00,  0x00,  0x25,  0x00,  0x00,  0x00, 
 0x00,  0x00,  0x00,  0x00,  0x01,  0x00,  0xf2,  0xa0,  0x7b,  0x6c,  0x10,  0x56,  0xfe,  0xcf,  0xc3,  0x7a, 
 0xb0,  0x80,  0x18,  0xf2,  0xb3,  0x00,  0x00,  0x00,  0x07,  0x00,  0x00,  0x00,  0x68,  0x65,  0x61,  0x64, 
 0x65,  0x72,  0x00,  0x00,  0x00,  0x00,  0x00,  0x00,  0x21,  0x00,  0x00,  0x00,  0x01,  0x00,  0x00,  0x00, 
 0x01,  0x00,  0x71,  0x00,  0x00,  0x01,  0x00,  0x00,  0x0f,  0x00,  0x00,  0x00,  0x63,  0x68,  0x69,  0x6c, 
 0x64,  0x5f,  0x66,  0x72,  0x61,  0x6d,  0x65,  0x5f,  0x69,  0x64,  0x00,  0x00,  0x00,  0x00,  0x00,  0x00, 
 0x23,  0x00,  0x00,  0x00,  0x02,  0x00,  0x00,  0x00,  0x01,  0x00,  0xf2,  0x33,  0x15,  0x07,  0xf7,  0x71, 
 0x4f,  0xf9,  0x53,  0x4c,  0x39,  0x97,  0xc6,  0xaa,  0x2e,  0x00,  0x00,  0x00,  0x05,  0x00,  0x00,  0x00, 
 0x70,  0x6f,  0x73,  0x65,  0x00,  0x00,  0x00,  0x00,  0x24,  0x00,  0x00,  0x00,  0x03,  0x00,  0x00,  0x00, 
 0x01,  0x00,  0xf2,  0x49,  0x77,  0xd2,  0x02,  0x2a,  0xbf,  0x12,  0x20,  0x10,  0x31,  0xca,  0x36,  0xa4, 
 0x25,  0x00,  0x00,  0x00,  0x06,  0x00,  0x00,  0x00,  0x74,  0x77,  0x69,  0x73,  0x74,  0x00,  0x00,  0x00, 
 0xf2,  0xa0,  0x7b,  0x6c,  0x10,  0x56,  0xfe,  0xcf,  0xc3,  0x7a,  0xb0,  0x80,  0x18,  0xf2,  0xb3,  0x00, 
 0x73,  0x00,  0x00,  0x00,  0xf2,  0x51,  0x02,  0x00,  0x1a,  0x00,  0x00,  0x00,  0x00,  0x00,  0x00,  0x00, 
 0x12,  0x00,  0x00,  0x00,  0x6f,  0x64,  0x6f,  0x6d,  0x5f,  0x6d,  0x73,  0x67,  0x73,  0x3a,  0x3a,  0x48, 
 0x65,  0x61,  0x64,  0x65,  0x72,  0x00,  0x00,  0x00,  0x4b,  0x00,  0x00,  0x00,  0x02,  0x00,  0x00,  0x00, 
 0x24,  0x00,  0x00,  0x00,  0x00,  0x00,  0x00,  0x00,  0x01,  0x00,  0xf2,  0xcb,  0xe0,  0x76,  0xc6,  0x49, 
 0xc0,  0xee,  0x9d,  0x34,  0xdb,  0xaa,  0x1a,  0x2f,  0xe8,  0x00,  0x00,  0x00,  0x06,  0x00,  0x00,  0x00, 
 0x73,  0x74,  0x61,  0x6d,  0x70,  0x00,  0x00,  0x00,  0x1b,  0x00,  0x00,  0x00,  0x01,  0x00,  0x00,  0x00, 
 0x01,  0x00,  0x71,  0x00,  0x00,  0x01,  0x00,  0x00,  0x09,  0x00,  0x00,  0x00,  0x66,  0x72,  0x61,  0x6d, 
 0x65,  0x5f,  0x69,  0x64,  0x00,  0x00,  0x00,  0xf2,  0xcb,  0xe0,  0x76,  0xc6,  0x49,  0xc0,  0xee,  0x9d, 
 0x34,  0xdb,  0xaa,  0x1a,  0x2f,  0xe8,  0x00,  0x00,  0x5a,  0x00,  0x00,  0x00,  0xf2,  0x51,  0x02,  0x00, 
 0x18,  0x00,  0x00,  0x00,  0x00,  0x00,  0x00,  0x00,  0x10,  0x00,  0x00,  0x00,  0x6f,  0x64,  0x6f,  0x6d, 
 0x5f,  0x6d,  0x73,  0x67,  0x73,  0x3a,  0x3a,  0x54,  0x69,  0x6d,  0x65,  0x00,  0x36,  0x00,  0x00,  0x00, 
 0x02,  0x00,  0x00,  0x00,  0x12,  0x00,  0x00,  0x00,  0x00,  0x00,  0x00,  0x00,  0x01,  0x00,  0x04,  0x00, 
 0x04,  0x00,  0x00,  0x00,  0x73,  0x65,  0x63,  0x00,  0x00,  0x00,  0x00,  0x00,  0x16,  0x00,  0x00,  0x00, 
 0x01,  0x00,  0x00,  0x00,  0x01,  0x00,  0x07,  0x00,  0x08,  0x00,  0x00,  0x00,  0x6e,  0x61,  0x6e,  0x6f, 
 0x73,  0x65,  0x63,  0x00,  0x00,  0x00,  0xf2,  0x33,  0x15,  0x07,  0xf7,  0x71,  0x4f,  0xf9,  0x53,  0x4c, 
 0x39,  0x97,  0xc6,  0xaa,  0x2e,  0x00,  0x00,  0x00,  0x89,  0x00,  0x00,  0x00,  0xf2,  0x51,  0x02,  0x00, 
 0x26,  0x00,  0x00,  0x00,  0x00,  0x00,  0x00,  0x00,  0x1e,  0x00,  0x00,  0x00,  0x6f,  0x64,  0x6f,  0x6d, 
 0x5f,  0x6d,  0x73,  0x67,  0x73,  0x3a,  0x3a,  0x50,  0x6f,  0x73,  0x65,  0x57,  0x69,  0x74,  0x68,  0x43, 
 0x6f,  0x76,  0x61,  0x72,  0x69,  0x61,  0x6e,  0x63,  0x65,  0x00,  0x00,  0x00,  0x55,  0x00,  0x00,  0x00, 
 0x02,  0x00,  0x00,  0x00,  0x23,  0x00,  0x00,  0x00,  0x00,  0x00,  0x00,  0x00,  0x01,  0x00,  0xf2,  0x8d, 
 0x5f,  0x8c,  0xe7,  0x67,  0x92,  0x58,  0x97,  0xa8,  0xd5,  0xcb,  0x60,  0x14,  0xa9,  0x00,  0x00,  0x00, 
 0x05,  0x00,  0x00,  0x00,  0x70,  0x6f,  0x73,  0x65,  0x00,  0x00,  0x00,  0x00,  0x25,  0x00,  0x00,  0x00, 
 0x01,  0x00,  0x00,  0x00,  0x01,  0x00,  0x90,  0xf3,  0x01,  0x00,  0x00,  0x00,  0x01,  0x00,  0x00,  0x00, 
 0x24,  0x0a,  0x00,  0x00,  0x0b,  0x00,  0x00,  0x00,  0x63,  0x6f,  0x76,  0x61,  0x72,  0x69,  0x61,  0x6e, 
 0x63,  0x65,  0x00,  0x00,  0x00,  0xf2,  0x8d,  0x5f,  0x8c,  0xe7,  0x67,  0x92,  0x58,  0x97,  0xa8,  0xd5, 
 0xcb,  0x60,  0x14,  0xa9,  0x82,  0x00,  0x00,  0x00,  0xf2,  0x51,  0x02,  0x00,  0x18,  0x00,  0x00,  0x00, 
 0x00,  0x00,  0x00,  0x00,  0x10,  0x00,  0x00,  0x00,  0x6f,  0x64,  0x6f,  0x6d,  0x5f,  0x6d,  0x73,  0x67, 
 0x73,  0x3a,  0x3a,  0x50,  0x6f,  0x73,  0x65,  0x00,  0x5e,  0x00,  0x00,  0x00,  0x02,  0x00,  0x00,  0x00, 
 0x27,  0x00,  0x00,  0x00,  0x00,  0x00,  0x00,  0x00,  0x01,  0x00,  0xf2,  0x16,  0xaa,  0x86,  0x34,  0x2d, 
 0xa1,  0x5d,  0x83,  0x46,  0x5e,  0xdf,  0x84,  0x94,  0x94,  0x00,  0x00,  0x00,  0x09,  0x00,  0x00,  0x00, 
 0x70,  0x6f,  0x73,  0x69,  0x74,  0x69,  0x6f,  0x6e,  0x00,  0x00,  0x00,  0x00,  0x2a,  0x00,  0x00,  0x00, 
 0x01,  0x00,  0x00,  0x00,  0x01,  0x00,  0xf2,  0x3b,  0xc4,  0x62,  0xe4,  0x6e,  0xa4,  0x1c,  0x7e,  0xdd, 
 0x59,  0x05,  0x5d,  0xd3,  0x0e,  0x00,  0x00,  0x00,  0x0c,  0x00,  0x00,  0x00,  0x6f,  0x72,  0x69,  0x65, 
 0x6e,  0x74,  0x61,  0x74,  0x69,  0x6f,  0x6e,  0x00,  0x00,  0x00,  0xf2,  0x16,  0xaa,  0x86,  0x34,  0x2d, 
 0xa1,  0x5d,  0x83,  0x46,  0x5e,  0xdf,  0x84,  0x94,  0x94,  0x00,  0x00,  0x00,  0x68,  0x00,  0x00,  0x00, 
 0xf2,  0x51,  0x02,  0x00,  0x19,  0x00,  0x00,  0x00,  0x00,  0x00,  0x00,  0x00,  0x11,  0x00,  0x00,  0x00, 
 0x6f,  0x64,  0x6f,  0x6d,  0x5f,  0x6d,  0x73,  0x67,  0x73,  0x3a,  0x3a,  0x50,  0x6f,  0x69,  0x6e,  0x74, 
 0x00,  0x00,  0x00,  0x00,  0x40,  0x00,  0x00,  0x00,  0x03,  0x00,  0x00,  0x00,  0x10,  0x00,  0x00,  0x00, 
 0x00,  0x00,  0x00,  0x00,  0x01,  0x00,  0x0a,  0x00,  0x02,  0x00,  0x00,  0x00,  0x78,  0x00,  0x00,  0x00, 
 0x10,  0x00,  0x00,  0x00,  0x01,  0x00,  0x00,  0x00,  0x01,  0x00,  0x0a,  0x00,  0x02,  0x00,  0x00,  0x00, 
 0x79,  0x00,  0x00,  0x00,  0x10,  0x00,  0x00,  0x00,  0x02,  0x00,  0x00,  0x00,  0x01,  0x00,  0x0a,  0x00, 
 0x02,  0x00,  0x00,  0x00,  0x7a,  0x00,  0x00,  0x00,  0xf2,  0x3b,  0xc4,  0x62,  0xe4,  0x6e,  0xa4,  0x1c, 
 0x7e,  0xdd,  0x59,  0x05,  0x5d,  0xd3,  0x0e,  0x00,  0x80,  0x00,  0x00,  0x00,  0xf2,  0x51,  0x02,  0x00, 
 0x1e,  0x00,  0x00,  0x00,  0x00,  0x00,  0x00,  0x00,  0x16,  0x00,  0x00,  0x00,  0x6f,  0x64,  0x6f,  0x6d, 
 0x5f,  0x6d,  0x73,  0x67,  0x73,  0x3a,  0x3a,  0x51,  0x75,  0x61,  0x74,  0x65,  0x72,  0x6e,  0x69,  0x6f, 
 0x6e,  0x00,  0x00,  0x00,  0x54,  0x00,  0x00,  0x00,  0x04,  0x00,  0x00,  0x00,  0x10,  0x00,  0x00,  0x00, 
 0x00,  0x00,  0x00,  0x00,  0x01,  0x00,  0x0a,  0x00,  0x02,  0x00,  0x00,  0x00,  0x78,  0x00,  0x00,  0x00, 
 0x10,  0x00,  0x00,  0x00,  0x01,  0x00,  0x00,  0x00,  0x01,  0x00,  0x0a,  0x00,  0x02,  0x00,  0x00,  0x00, 
 0x79,  0x00,  0x00,  0x00,  0x10,  0x00,  0x00,  0x00,  0x02,  0x00,  0x00,  0x00,  0x01,  0x00,  0x0a,  0x00, 
 0x02,  0x00,  0x00,  0x00,  0x7a,  0x00,  0x00,  0x00,  0x10,  0x00,  0x00,  0x00,  0x03,  0x00,  0x00,  0x00, 
 0x01,  0x00,  0x0a,  0x00,  0x02,  0x00,  0x00,  0x00,  0x77,  0x00,  0x00,  0x00,  0xf2,  0x49,  0x77,  0xd2, 
 0x02,  0x2a,  0xbf,  0x12,  0x20,  0x10,  0x31,  0xca,  0x36,  0xa4,  0x25,  0x00,  0x89,  0x00,  0x00,  0x00, 
 0xf2,  0x51,  0x02,  0x00,  0x27,  0x00,  0x00,  0x00,  0x00,  0x00,  0x00,  0x00,  0x1f,  0x00,  0x00,  0x00, 
 0x6f,  0x64,  0x6f,  0x6d,  0x5f,  0x6d,  0x73,  0x67,  0x73,  0x3a,  0x3a,  0x54,  0x77,  0x69,  0x73,  0x74, 
 0x57,  0x69,  0x74,  0x68,  0x43,  0x6f,  0x76,  0x61,  0x72,  0x69,  0x61,  0x6e,  0x63,  0x65,  0x00,  0x00, 
 0x55,  0x00,  0x00,  0x00,  0x02,  0x00,  0x00,  0x00,  0x24,  0x00,  0x00,  0x00,  0x00,  0x00,  0x00,  0x00, 
 0x01,  0x00,  0xf2,  0x23,  0xa4,  0xe2,  0x0c,  0x54,  0xc2,  0x21,  0x6e,  0x04,  0x60,  0xad,  0x3f,  0x44, 
 0x75,  0x00,  0x00,  0x00,  0x06,  0x00,  0x00,  0x00,  0x74,  0x77,  0x69,  0x73,  0x74,  0x00,  0x00,  0x00, 
 0x25,  0x00,  0x00,  0x00,  0x01,  0x00,  0x00,  0x00,  0x01,  0x00,  0x90,  0xf3,  0x01,  0x00,  0x00,  0x00, 
 0x01,  0x00,  0x00,  0x00,  0x24,  0x0a,  0x00,  0x00,  0x0b,  0x00,  0x00,  0x00,  0x63,  0x6f,  0x76,  0x61, 
 0x72,  0x69,  0x61,  0x6e,  0x63,  0x65,  0x00,  0x00,  0x00,  0xf2,  0x23,  0xa4,  0xe2,  0x0c,  0x54,  0xc2, 
 0x21,  0x6e,  0x04,  0x60,  0xad,  0x3f,  0x44,  0x75,  0x82,  0x00,  0x00,  0x00,  0xf2,  0x51,  0x02,  0x00, 
 0x19,  0x00,  0x00,  0x00,  0x00,  0x00,  0x00,  0x00,  0x11,  0x00,  0x00,  0x00,  0x6f,  0x64,  0x6f,  0x6d, 
 0x5f,  0x6d,  0x73,  0x67,  0x73,  0x3a,  0x3a,  0x54,  0x77,  0x69,  0x73,  0x74,  0x00,  0x00,  0x00,  0x00, 
 0x5a,  0x00,  0x00,  0x00,  0x02,  0x00,  0x00,  0x00,  0x25,  0x00,  0x00,  0x00,  0x00,  0x00,  0x00,  0x00, 
 0x01,  0x00,  0xf2,  0x16,  0xaa,  0x86,  0x34,  0x2d,  0xa1,  0x5d,  0x83,  0x46,  0x5e,  0xdf,  0x84,  0x94, 
 0x94,  0x00,  0x00,  0x00,  0x07,  0x00,  0x00,  0x00,  0x6c,  0x69,  0x6e,  0x65,  0x61,  0x72,  0x00,  0x00, 
 0x00,  0x00,  0x00,  0x00,  0x26,  0x00,  0x00,  0x00,  0x01,  0x00,  0x00,  0x00,  0x01,  0x00,  0xf2,  0x16, 
 0xaa,  0x86,  0x34,  0x2d,  0xa1,  0x5d,  0x83,  0x46,  0x5e,  0xdf,  0x84,  0x94,  0x94,  0x00,  0x00,  0x00, 
 0x08,  0x00,  0x00,  0x00,  0x61,  0x6e,  0x67,  0x75,  0x6c,  0x61,  0x72,  0x00,  0x00,  0x00,  0xf2,  0x3a, 
 0xf9,  0x76,  0xe1,  0xd7,  0xcb,  0x6a,  0xce,  0xac,  0x7b,  0x96,  0x46,  0x42,  0x88,  0x00,  0x00,  0x00, 
 0x5b,  0x01,  0x00,  0x00,  0xf2,  0x51,  0x02,  0x00,  0x1f,  0x00,  0x00,  0x00,  0x00,  0x00,  0x00,  0x00, 
 0x17,  0x00,  0x00,  0x00,  0x6f,  0x64,  0x6f,  0x6d,  0x5f,  0x6d,  0x73,  0x67,  0x73,  0x3a,  0x3a,  0x50, 
 0x6f,  0x69,  0x6e,  0x74,  0x43,  0x6c,  0x6f,  0x75,  0x64,  0x32,  0x00,  0x00,  0x2f,  0x01,  0x00,  0x00, 
 0x09,  0x00,  0x00,  0x00,  0x25,  0x00,  0x00,  0x00,  0x00,  0x00,  0x00,  0x00,  0x01,  0x00,  0xf2,  0xa0, 
 0x7b,  0x6c,  0x10,  0x56,  0xfe,  0xcf,  0xc3,  0x7a,  0xb0,  0x80,  0x18,  0xf2,  0xb3,  0x00,  0x00,  0x00, 
 0x07,  0x00,  0x00,  0x00,  0x68,  0x65,  0x61,  0x64,  0x65,  0x72,  0x00,  0x00,  0x00,  0x00,  0x00,  0x00, 
 0x15,  0x00,  0x00,  0x00,  0x01,  0x00,  0x00,  0x00,  0x01,  0x00,  0x07,  0x00,  0x07,  0x00,  0x00,  0x00, 
 0x68,  0x65,  0x69,  0x67,  0x68,  0x74,  0x00,  0x00,  0x00,  0x00,  0x00,  0x00,  0x14,  0x00,  0x00,  0x00, 
 0x02,  0x00,  0x00,  0x00,  0x01,  0x00,  0x07,  0x00,  0x06,  0x00,  0x00,  0x00,  0x77,  0x69,  0x64,  0x74, 
 0x68,  0x00,  0x00,  0x00,  0x29,  0x00,  0x00,  0x00,  0x03,  0x00,  0x00,  0x00,  0x01,  0x00,  0x80,  0xf2, 
 0x01,  0x00,  0x40,  0xf2,  0xa2,  0x0a,  0x37,  0x92,  0x4b,  0x9e,  0x92,  0x15,  0x06,  0xb7,  0xab,  0x11, 
 0xaf,  0xd3,  0x00,  0x00,  0x07,  0x00,  0x00,  0x00,  0x66,  0x69,  0x65,  0x6c,  0x64,  0x73,  0x00,  0x00, 
 0x00,  0x00,  0x00,  0x00,  0x1b,  0x00,  0x00,  0x00,  0x04,  0x00,  0x00,  0x00,  0x01,  0x00,  0x01,  0x00, 
 0x0d,  0x00,  0x00,  0x00,  0x69,  0x73,  0x5f,  0x62,  0x69,  0x67,  0x65,  0x6e,  0x64,  0x69,  0x61,  0x6e, 
 0x00,  0x00,  0x00,  0x00,  0x19,  0x00,  0x00,  0x00,  0x05,  0x00,  0x00,  0x00,  0x01,  0x00,  0x07,  0x00, 
 0x0b,  0x00,  0x00,  0x00,  0x70,  0x6f,  0x69,  0x6e,  0x74,  0x5f,  0x73,  0x74,  0x65,  0x70,  0x00,  0x00, 
 0x00,  0x00,  0x00,  0x00,  0x17,  0x00,  0x00,  0x00,  0x06,  0x00,  0x00,  0x00,  0x01,  0x00,  0x07,  0x00, 
 0x09,  0x00,  0x00,  0x00,  0x72,  0x6f,  0x77,  0x5f,  0x73,  0x74,  0x65,  0x70,  0x00,  0x00,  0x00,  0x00, 
 0x1f,  0x00,  0x00,  0x00,  0x07,  0x00,  0x00,  0x00,  0x01,  0x00,  0x81,  0xf3,  0x01,  0x00,  0x00,  0x00, 
 0x00,  0x00,  0x10,  0x00,  0x02,  0x00,  0x00,  0x00,  0x05,  0x00,  0x00,  0x00,  0x64,  0x61,  0x74,  0x61, 
 0x00,  0x00,  0x00,  0x00,  0x17,  0x00,  0x00,  0x00,  0x08,  0x00,  0x00,  0x00,  0x01,  0x00,  0x01,  0x00, 
 0x09,  0x00,  0x00,  0x00,  0x69,  0x73,  0x5f,  0x64,  0x65,  0x6e,  0x73,  0x65,  0x00,  0x00,  0x00,  0xf2, 
 0xa2,  0x0a,  0x37,  0x92,  0x4b,  0x9e,  0x92,  0x15,  0x06,  0xb7,  0xab,  0x11,  0xaf,  0xd3,  0x00,  0x00, 
 0x98,  0x00,  0x00,  0x00,  0xf2,  0x51,  0x02,  0x00,  0x1e,  0x00,  0x00,  0x00,  0x00,  0x00,  0x00,  0x00, 
 0x16,  0x00,  0x00,  0x00,  0x6f,  0x64,  0x6f,  0x6d,  0x5f,  0x6d,  0x73,  0x67,  0x73,  0x3a,  0x3a,  0x50, 
 0x6f,  0x69,  0x6e,  0x74,  0x46,  0x69,  0x65,  0x6c,  0x64,  0x00,  0x00,  0x00,  0x6c,  0x00,  0x00,  0x00, 
 0x04,  0x00,  0x00,  0x00,  0x13,  0x00,  0x00,  0x00,  0x00,  0x00,  0x00,  0x00,  0x01,  0x00,  0x70,  0x80, 
 0x05,  0x00,  0x00,  0x00,  0x6e,  0x61,  0x6d,  0x65,  0x00,  0x00,  0x00,  0x00,  0x15,  0x00,  0x00,  0x00, 
 0x01,  0x00,  0x00,  0x00,  0x01,  0x00,  0x07,  0x00,  0x07,  0x00,  0x00,  0x00,  0x6f,  0x66,  0x66,  0x73, 
 0x65,  0x74,  0x00,  0x00,  0x00,  0x00,  0x00,  0x00,  0x17,  0x00,  0x00,  0x00,  0x02,  0x00,  0x00,  0x00, 
 0x01,  0x00,  0x02,  0x00,  0x09,  0x00,  0x00,  0x00,  0x64,  0x61,  0x74,  0x61,  0x74,  0x79,  0x70,  0x65, 
 0x00,  0x00,  0x00,  0x00,  0x14,  0x00,  0x00,  0x00,  0x03,  0x00,  0x00,  0x00,  0x01,  0x00,  0x07,  0x00, 
 0x06,  0x00,  0x00,  0x00,  0x63,  0x6f,  0x75,  0x6e,  0x74,  0x00,  0x00,  0x00,  0x6c,  0x01,  0x00,  0x00, 
 0x0c,  0x00,  0x00,  0x00,  0xf2,  0xd0,  0xd9,  0x35,  0x25,  0x39,  0x86,  0xe6,  0xd4,  0xc8,  0xc2,  0xf3, 
 0x34,  0x2b,  0xc5,  0xf1,  0x56,  0x3f,  0x33,  0xcb,  0x59,  0xad,  0x1d,  0x2b,  0x32,  0xa6,  0xc2,  0xed, 
 0x26,  0x4f,  0xf2,  0x10,  0xe8,  0xb2,  0x62,  0x65,  0x6e,  0x1a,  0xf3,  0x6e,  0x6d,  0xa2,  0x36,  0x4b, 
 0x9b,  0xf1,  0x3a,  0xf9,  0xcd,  0x2d,  0x05,  0x73,  0x23,  0x98,  0xc2,  0x45,  0xc9,  0x6c,  0x4f,  0x4a, 
 0xf2,  0xa0,  0x7b,  0x6c,  0x10,  0x56,  0xfe,  0xcf,  0xc3,  0x7a,  0xb0,  0x80,  0x18,  0xf2,  0xb3,  0xf1, 
 0xb8,  0x99,  0xcd,  0xa8,  0x04,  0x50,  0x32,  0xd2,  0x4a,  0x47,  0xeb,  0x3b,  0xa6,  0x1f,  0xf2,  0xcb, 
 0xe0,  0x76,  0xc6,  0x49,  0xc0,  0xee,  0x9d,  0x34,  0xdb,  0xaa,  0x1a,  0x2f,  0xe8,  0xf1,  0xba,  0xde, 
 0x67,  0x63,  0xb1,  0xd6,  0xa7,  0x2e,  0xce,  0x8a,  0x0e,  0x5d,  0x69,  0x42,  0xf2,  0x33,  0x15,  0x07, 
 0xf7,  0x71,  0x4f,  0xf9,  0x53,  0x4c,  0x39,  0x97,  0xc6,  0xaa,  0x2e,  0xf1,  0xe4,  0x4d,  0x68,  0x96, 
 0x1b,  0xe9,  0x1a,  0xd5,  0x9d,  0x0d,  0x41,  0x34,  0xba,  0x7d,  0xf2,  0x8d,  0x5f,  0x8c,  0xe7,  0x67, 
 0x92,  0x58,  0x97,  0xa8,  0xd5,  0xcb,  0x60,  0x14,  0xa9,  0xf1,  0xbe,  0xdb,  0xdd,  0xbd,  0x08,  0xba, 
 0xcb,  0xdd,  0x2e,  0xc2,  0xef,  0xad,  0x80,  0x24,  0xf2,  0x16,  0xaa,  0x86,  0x34,  0x2d,  0xa1,  0x5d, 
 0x83,  0x46,  0x5e,  0xdf,  0x84,  0x94,  0x94,  0xf1,  0xb4,  0x9c,  0x4d,  0x1f,  0x9e,  0x94,  0xb3,  0x8f, 
 0x94,  0x8d,  0xe3,  0x00,  0xef,  0x1d,  0xf2,  0x3b,  0xc4,  0x62,  0xe4,  0x6e,  0xa4,  0x1c,  0x7e,  0xdd, 
 0x59,  0x05,  0x5d,  0xd3,  0x0e,  0xf1,  0x33,  0x19,  0xf5,  0x25,  0xa9,  0x0e,  0xfb,  0x3c,  0x49,  0x08, 
 0x3e,  0x5d,  0xd9,  0x26,  0xf2,  0x49,  0x77,  0xd2,  0x02,  0x2a,  0xbf,  0x12,  0x20,  0x10,  0x31,  0xca, 
 0x36,  0xa4,  0x25,  0xf1,  0xa9,  0xef,  0xae,  0x1c,  0x47,  0x86,  0x59,  0xb1,  0x19,  0x5b,  0x0c,  0x4d, 
 0xdf,  0x1c,  0xf2,  0x23,  0xa4,  0xe2,  0x0c,  0x54,  0xc2,  0x21,  0x6e,  0x04,  0x60,  0xad,  0x3f,  0x44, 
 0x75,  0xf1,  0xfe,  0xbb,  0x45,  0xea,  0x92,  0x8f,  0x46,  0x28,  0xd5,  0x90,  0xef,  0x77,  0x51,  0x0c, 
 0xf2,  0x3a,  0xf9,  0x76,  0xe1,  0xd7,  0xcb,  0x6a,  0xce,  0xac,  0x7b,  0x96,  0x46,  0x42,  0x88,  0xf1, 
 0x2a,  0x2a,  0x77,  0xe9,  0x43,  0xe6,  0x47,  0x6a,  0xaf,  0x62,  0x13,  0xf4,  0x70,  0x4c,  0xf2,  0xa2, 
 0x0a,  0x37,  0x92,  0x4b,  0x9e,  0x92,  0x15,  0x06,  0xb7,  0xab,  0x11,  0xaf,  0xd3,  0xf1,  0x14,  0xb0, 
 0x4d,  0x4c,  0x93,  0xca,  0xfe,  0x2d,  0x92,  0x96,  0x57,  0xe9,  0xae,  0xd3, };
  return blob;
}
template<> inline const uint8_t * TopicTraits<::odom_msgs::OdometryPointCloud>::type_info_blob() {
  static const uint8_t blob[] = {
 0x70,  0x02,  0x00,  0x00,  0x01,  0x10,  0x00,  0x40,  0x30,  0x01,  0x00,  0x00,  0x2c,  0x01,  0x00,  0x00, 
 0x14,  0x00,  0x00,  0x00,  0xf1,  0x56,  0x3f,  0x33,  0xcb,  0x59,  0xad,  0x1d,  0x2b,  0x32,  0xa6,  0xc2, 
 0xed,  0x26,  0x4f,  0x00,  0x55,  0x00,  0x00,  0x00,  0x0b,  0x00,  0x00,  0x00,  0x0c,  0x01,  0x00,  0x00, 
 0x0b,  0x00,  0x00,  0x00,  0x14,  0x00,  0x00,  0x00,  0xf1,  0x3a,  0xf9,  0xcd,  0x2d,  0x05,  0x73,  0x23, 
 0x98,  0xc2,  0x45,  0xc9,  0x6c,  0x4f,  0x4a,  0x00,  0x89,  0x00,  0x00,  0x00,  0x14,  0x00,  0x00,  0x00, 
 0xf1,  0xb8,  0x99,  0xcd,  0xa8,  0x04,  0x50,  0x32,  0xd2,  0x4a,  0x47,  0xeb,  0x3b,  0xa6,  0x1f,  0x00, 
 0x4c,  0x00,  0x00,  0x00,  0x14,  0x00,  0x00,  0x00,  0xf1,  0xba,  0xde,  0x67,  0x63,  0xb1,  0xd6,  0xa7, 
 0x2e,  0xce,  0x8a,  0x0e,  0x5d,  0x69,  0x42,  0x00,  0x37,  0x00,  0x00,  0x00,  0x14,  0x00,  0x00,  0x00, 
 0xf1,  0xe4,  0x4d,  0x68,  0x96,  0x1b,  0xe9,  0x1a,  0xd5,  0x9d,  0x0d,  0x41,  0x34,  0xba,  0x7d,  0x00, 
 0x52,  0x00,  0x00,  0x00,  0x14,  0x00,  0x00,  0x00,  0xf1,  0xbe,  0xdb,  0xdd,  0xbd,  0x08,  0xba,  0xcb, 
 0xdd,  0x2e,  0xc2,  0xef,  0xad,  0x80,  0x24,  0x00,  0x55,  0x00,  0x00,  0x00,  0x14,  0x00,  0x00,  0x00, 
 0xf1,  0xb4,  0x9c,  0x4d,  0x1f,  0x9e,  0x94,  0xb3,  0x8f,  0x94,  0x8d,  0xe3,  0x00,  0xef,  0x1d,  0x00, 
 0x47,  0x00,  0x00,  0x00,  0x14,  0x00,  0x00,  0x00,  0xf1,  0x33,  0x19,  0xf5,  0x25,  0xa9,  0x0e,  0xfb, 
 0x3c,  0x49,  0x08,  0x3e,  0x5d,  0xd9,  0x26,  0x00,  0x57,  0x00,  0x00,  0x00,  0x14,  0x00,  0x00,  0x00, 
 0xf1,  0xa9,  0xef,  0xae,  0x1c,  0x47,  0x86,  0x59,  0xb1,  0x19,  0x5b,  0x0c,  0x4d,  0xdf,  0x1c,  0x00, 
 0x52,  0x00,  0x00,  0x00,  0x14,  0x00,  0x00,  0x00,  0xf1,  0xfe,  0xbb,  0x45,  0xea,  0x92,  0x8f,  0x46, 
 0x28,  0xd5,  0x90,  0xef,  0x77,  0x51,  0x0c,  0x00,  0x55,  0x00,  0x00,  0x00,  0x14,  0x00,  0x00,  0x00, 
 0xf1,  0x2a,  0x2a,  0x77,  0xe9,  0x43,  0xe6,  0x47,  0x6a,  0xaf,  0x62,  0x13,  0xf4,  0x70,  0x4c,  0x00, 
 0xd7,  0x00,  0x00,  0x00,  0x14,  0x00,  0x00,  0x00,  0xf1,  0x14,  0xb0,  0x4d,  0x4c,  0x93,  0xca,  0xfe, 
 0x2d,  0x92,  0x96,  0x57,  0xe9,  0xae,  0xd3,  0x00,  0x57,  0x00,  0x00,  0x00,  0x02,  0x10,  0x00,  0x40, 
 0x30,  0x01,  0x00,  0x00,  0x2c,  0x01,  0x00,  0x00,  0x14,  0x00,  0x00,  0x00,  0xf2,  0xd0,  0xd9,  0x35, 
 0x25,  0x39,  0x86,  0xe6,  0xd4,  0xc8,  0xc2,  0xf3,  0x34,  0x2b,  0xc5,  0x00,  0x8a,  0x00,  0x00,  0x00, 
 0x0b,  0x00,  0x00,  0x00,  0x0c,  0x01,  0x00,  0x00,  0x0b,  0x00,  0x00,  0x00,  0x14,  0x00,  0x00,  0x00, 
 0xf2,  0x10,  0xe8,  0xb2,  0x62,  0x65,  0x6e,  0x1a,  0xf3,  0x6e,  0x6d,  0xa2,  0x36,  0x4b,  0x9b,  0x00, 
 0xd4,  0x00,  0x00,  0x00,  0x14,  0x00,  0x00,  0x00,  0xf2,  0xa0,  0x7b,  0x6c,  0x10,  0x56,  0xfe,  0xcf, 
 0xc3,  0x7a,  0xb0,  0x80,  0x18,  0xf2,  0xb3,  0x00,  0x77,  0x00,  0x00,  0x00,  0x14,  0x00,  0x00,  0x00, 
 0xf2,  0xcb,  0xe0,  0x76,  0xc6,  0x49,  0xc0,  0xee,  0x9d,  0x34,  0xdb,  0xaa,  0x1a,  0x2f,  0xe8,  0x00, 
 0x5e,  0x00,  0x00,  0x00,  0x14,  0x00,  0x00,  0x00,  0xf2,  0x33,  0x15,  0x07,  0xf7,  0x71,  0x4f,  0xf9, 
 0x53,  0x4c,  0x39,  0x97,  0xc6,  0xaa,  0x2e,  0x00,  0x8d,  0x00,  0x00,  0x00,  0x14,  0x00,  0x00,  0x00, 
 0xf2,  0x8d,  0x5f,  0x8c,  0xe7,  0x67,  0x92,  0x58,  0x97,  0xa8,  0xd5,  0xcb,  0x60,  0x14,  0xa9,  0x00, 
 0x86,  0x00,  0x00,  0x00,  0x14,  0x00,  0x00,  0x00,  0xf2,  0x16,  0xaa,  0x86,  0x34,  0x2d,  0xa1,  0x5d, 
 0x83,  0x46,  0x5e,  0xdf,  0x84,  0x94,  0x94,  0x00,  0x6c,  0x00,  0x00,  0x00,  0x14,  0x00,  0x00,  0x00, 
 0xf2,  0x3b,  0xc4,  0x62,  0xe4,  0x6e,  0xa4,  0x1c,  0x7e,  0xdd,  0x59,  0x05,  0x5d,  0xd3,  0x0e,  0x00, 
 0x84,  0x00,  0x00,  0x00,  0x14,  0x00,  0x00,  0x00,  0xf2,  0x49,  0x77,  0xd2,  0x02,  0x2a,  0xbf,  0x12, 
 0x20,  0x10,  0x31,  0xca,  0x36,  0xa4,  0x25,  0x00,  0x8d,  0x00,  0x00,  0x00,  0x14,  0x00,  0x00,  0x00, 
 0xf2,  0x23,  0xa4,  0xe2,  0x0c,  0x54,  0xc2,  0x21,  0x6e,  0x04,  0x60,  0xad,  0x3f,  0x44,  0x75,  0x00, 
 0x86,  0x00,  0x00,  0x00,  0x14,  0x00,  0x00,  0x00,  0xf2,  0x3a,  0xf9,  0x76,  0xe1,  0xd7,  0xcb,  0x6a, 
 0xce,  0xac,  0x7b,  0x96,  0x46,  0x42,  0x88,  0x00,  0x5f,  0x01,  0x00,  0x00,  0x14,  0x00,  0x00,  0x00, 
 0xf2,  0xa2,  0x0a,  0x37,  0x92,  0x4b,  0x9e,  0x92,  0x15,  0x06,  0xb7,  0xab,  0x11,  0xaf,  0xd3,  0x00, 
 0x9c,  0x00,  0x00,  0x00, };
  return blob;
}
#endif //DDSCXX_HAS_TYPE_DISCOVERY

} //namespace topic
} //namespace cyclonedds
} //namespace eclipse
} //namespace org

namespace dds {
namespace topic {

template <>
struct topic_type_name<::odom_msgs::Time>
{
    static std::string value()
    {
      return org::eclipse::cyclonedds::topic::TopicTraits<::odom_msgs::Time>::getTypeName();
    }
};

template <>
struct topic_type_name<::odom_msgs::Header>
{
    static std::string value()
    {
      return org::eclipse::cyclonedds::topic::TopicTraits<::odom_msgs::Header>::getTypeName();
    }
};

template <>
struct topic_type_name<::odom_msgs::Point>
{
    static std::string value()
    {
      return org::eclipse::cyclonedds::topic::TopicTraits<::odom_msgs::Point>::getTypeName();
    }
};

template <>
struct topic_type_name<::odom_msgs::Quaternion>
{
    static std::string value()
    {
      return org::eclipse::cyclonedds::topic::TopicTraits<::odom_msgs::Quaternion>::getTypeName();
    }
};

template <>
struct topic_type_name<::odom_msgs::Pose>
{
    static std::string value()
    {
      return org::eclipse::cyclonedds::topic::TopicTraits<::odom_msgs::Pose>::getTypeName();
    }
};

template <>
struct topic_type_name<::odom_msgs::Twist>
{
    static std::string value()
    {
      return org::eclipse::cyclonedds::topic::TopicTraits<::odom_msgs::Twist>::getTypeName();
    }
};

template <>
struct topic_type_name<::odom_msgs::PoseWithCovariance>
{
    static std::string value()
    {
      return org::eclipse::cyclonedds::topic::TopicTraits<::odom_msgs::PoseWithCovariance>::getTypeName();
    }
};

template <>
struct topic_type_name<::odom_msgs::TwistWithCovariance>
{
    static std::string value()
    {
      return org::eclipse::cyclonedds::topic::TopicTraits<::odom_msgs::TwistWithCovariance>::getTypeName();
    }
};

template <>
struct topic_type_name<::odom_msgs::Odometry>
{
    static std::string value()
    {
      return org::eclipse::cyclonedds::topic::TopicTraits<::odom_msgs::Odometry>::getTypeName();
    }
};

template <>
struct topic_type_name<::odom_msgs::PointField>
{
    static std::string value()
    {
      return org::eclipse::cyclonedds::topic::TopicTraits<::odom_msgs::PointField>::getTypeName();
    }
};

template <>
struct topic_type_name<::odom_msgs::PointCloud2>
{
    static std::string value()
    {
      return org::eclipse::cyclonedds::topic::TopicTraits<::odom_msgs::PointCloud2>::getTypeName();
    }
};

template <>
struct topic_type_name<::odom_msgs::OdometryPointCloud>
{
    static std::string value()
    {
      return org::eclipse::cyclonedds::topic::TopicTraits<::odom_msgs::OdometryPointCloud>::getTypeName();
    }
};

}
}

REGISTER_TOPIC_TYPE(::odom_msgs::Time)
REGISTER_TOPIC_TYPE(::odom_msgs::Header)
REGISTER_TOPIC_TYPE(::odom_msgs::Point)
REGISTER_TOPIC_TYPE(::odom_msgs::Quaternion)
REGISTER_TOPIC_TYPE(::odom_msgs::Pose)
REGISTER_TOPIC_TYPE(::odom_msgs::Twist)
REGISTER_TOPIC_TYPE(::odom_msgs::PoseWithCovariance)
REGISTER_TOPIC_TYPE(::odom_msgs::TwistWithCovariance)
REGISTER_TOPIC_TYPE(::odom_msgs::Odometry)
REGISTER_TOPIC_TYPE(::odom_msgs::PointField)
REGISTER_TOPIC_TYPE(::odom_msgs::PointCloud2)
REGISTER_TOPIC_TYPE(::odom_msgs::OdometryPointCloud)

namespace org{
namespace eclipse{
namespace cyclonedds{
namespace core{
namespace cdr{

template<>
propvec &get_type_props<::odom_msgs::Time>();

template<typename T, std::enable_if_t<std::is_base_of<cdr_stream, T>::value, bool> = true >
bool write(T& streamer, const ::odom_msgs::Time& instance, entity_properties_t *props) {
  (void)instance;
  if (!streamer.start_struct(*props))
    return false;
  auto prop = streamer.first_entity(props);
  while (prop) {
    switch (prop->m_id) {
      case 0:
      if (!streamer.start_member(*prop))
        return false;
      if (!write(streamer, instance.sec()))
        return false;
      if (!streamer.finish_member(*prop))
        return false;
      break;
      case 1:
      if (!streamer.start_member(*prop))
        return false;
      if (!write(streamer, instance.nanosec()))
        return false;
      if (!streamer.finish_member(*prop))
        return false;
      break;
    }
    prop = streamer.next_entity(prop);
  }
  return streamer.finish_struct(*props);
}

template<typename S, std::enable_if_t<std::is_base_of<cdr_stream, S>::value, bool> = true >
bool write(S& str, const ::odom_msgs::Time& instance, bool as_key) {
  auto &props = get_type_props<::odom_msgs::Time>();
  str.set_mode(cdr_stream::stream_mode::write, as_key);
  return write(str, instance, props.data()); 
}

template<typename T, std::enable_if_t<std::is_base_of<cdr_stream, T>::value, bool> = true >
bool read(T& streamer, ::odom_msgs::Time& instance, entity_properties_t *props) {
  (void)instance;
  if (!streamer.start_struct(*props))
    return false;
  auto prop = streamer.first_entity(props);
  while (prop) {
    switch (prop->m_id) {
      case 0:
      if (!streamer.start_member(*prop))
        return false;
      if (!read(streamer, instance.sec()))
        return false;
      if (!streamer.finish_member(*prop))
        return false;
      break;
      case 1:
      if (!streamer.start_member(*prop))
        return false;
      if (!read(streamer, instance.nanosec()))
        return false;
      if (!streamer.finish_member(*prop))
        return false;
      break;
    }
    prop = streamer.next_entity(prop);
  }
  return streamer.finish_struct(*props);
}

template<typename S, std::enable_if_t<std::is_base_of<cdr_stream, S>::value, bool> = true >
bool read(S& str, ::odom_msgs::Time& instance, bool as_key) {
  auto &props = get_type_props<::odom_msgs::Time>();
  str.set_mode(cdr_stream::stream_mode::read, as_key);
  return read(str, instance, props.data()); 
}

template<typename T, std::enable_if_t<std::is_base_of<cdr_stream, T>::value, bool> = true >
bool move(T& streamer, const ::odom_msgs::Time& instance, entity_properties_t *props) {
  (void)instance;
  if (!streamer.start_struct(*props))
    return false;
  auto prop = streamer.first_entity(props);
  while (prop) {
    switch (prop->m_id) {
      case 0:
      if (!streamer.start_member(*prop))
        return false;
      if (!move(streamer, instance.sec()))
        return false;
      if (!streamer.finish_member(*prop))
        return false;
      break;
      case 1:
      if (!streamer.start_member(*prop))
        return false;
      if (!move(streamer, instance.nanosec()))
        return false;
      if (!streamer.finish_member(*prop))
        return false;
      break;
    }
    prop = streamer.next_entity(prop);
  }
  return streamer.finish_struct(*props);
}

template<typename S, std::enable_if_t<std::is_base_of<cdr_stream, S>::value, bool> = true >
bool move(S& str, const ::odom_msgs::Time& instance, bool as_key) {
  auto &props = get_type_props<::odom_msgs::Time>();
  str.set_mode(cdr_stream::stream_mode::move, as_key);
  return move(str, instance, props.data()); 
}

template<typename T, std::enable_if_t<std::is_base_of<cdr_stream, T>::value, bool> = true >
bool max(T& streamer, const ::odom_msgs::Time& instance, entity_properties_t *props) {
  (void)instance;
  if (!streamer.start_struct(*props))
    return false;
  auto prop = streamer.first_entity(props);
  while (prop) {
    switch (prop->m_id) {
      case 0:
      if (!streamer.start_member(*prop))
        return false;
      if (!max(streamer, instance.sec()))
        return false;
      if (!streamer.finish_member(*prop))
        return false;
      break;
      case 1:
      if (!streamer.start_member(*prop))
        return false;
      if (!max(streamer, instance.nanosec()))
        return false;
      if (!streamer.finish_member(*prop))
        return false;
      break;
    }
    prop = streamer.next_entity(prop);
  }
  return streamer.finish_struct(*props);
}

template<typename S, std::enable_if_t<std::is_base_of<cdr_stream, S>::value, bool> = true >
bool max(S& str, const ::odom_msgs::Time& instance, bool as_key) {
  auto &props = get_type_props<::odom_msgs::Time>();
  str.set_mode(cdr_stream::stream_mode::max, as_key);
  return max(str, instance, props.data()); 
}

template<>
propvec &get_type_props<::odom_msgs::Header>();

template<typename T, std::enable_if_t<std::is_base_of<cdr_stream, T>::value, bool> = true >
bool write(T& streamer, const ::odom_msgs::Header& instance, entity_properties_t *props) {
  (void)instance;
  if (!streamer.start_struct(*props))
    return false;
  auto prop = streamer.first_entity(props);
  while (prop) {
    switch (prop->m_id) {
      case 0:
      if (!streamer.start_member(*prop))
        return false;
      if (!write(streamer, instance.stamp(), prop))
        return false;
      if (!streamer.finish_member(*prop))
        return false;
      break;
      case 1:
      if (!streamer.start_member(*prop))
        return false;
      if (!write_string(streamer, instance.frame_id(), 256))
        return false;
      if (!streamer.finish_member(*prop))
        return false;
      break;
    }
    prop = streamer.next_entity(prop);
  }
  return streamer.finish_struct(*props);
}

template<typename S, std::enable_if_t<std::is_base_of<cdr_stream, S>::value, bool> = true >
bool write(S& str, const ::odom_msgs::Header& instance, bool as_key) {
  auto &props = get_type_props<::odom_msgs::Header>();
  str.set_mode(cdr_stream::stream_mode::write, as_key);
  return write(str, instance, props.data()); 
}

template<typename T, std::enable_if_t<std::is_base_of<cdr_stream, T>::value, bool> = true >
bool read(T& streamer, ::odom_msgs::Header& instance, entity_properties_t *props) {
  (void)instance;
  if (!streamer.start_struct(*props))
    return false;
  auto prop = streamer.first_entity(props);
  while (prop) {
    switch (prop->m_id) {
      case 0:
      if (!streamer.start_member(*prop))
        return false;
      if (!read(streamer, instance.stamp(), prop))
        return false;
      if (!streamer.finish_member(*prop))
        return false;
      break;
      case 1:
      if (!streamer.start_member(*prop))
        return false;
      if (!read_string(streamer, instance.frame_id(), 256))
        return false;
      if (!streamer.finish_member(*prop))
        return false;
      break;
    }
    prop = streamer.next_entity(prop);
  }
  return streamer.finish_struct(*props);
}

template<typename S, std::enable_if_t<std::is_base_of<cdr_stream, S>::value, bool> = true >
bool read(S& str, ::odom_msgs::Header& instance, bool as_key) {
  auto &props = get_type_props<::odom_msgs::Header>();
  str.set_mode(cdr_stream::stream_mode::read, as_key);
  return read(str, instance, props.data()); 
}

template<typename T, std::enable_if_t<std::is_base_of<cdr_stream, T>::value, bool> = true >
bool move(T& streamer, const ::odom_msgs::Header& instance, entity_properties_t *props) {
  (void)instance;
  if (!streamer.start_struct(*props))
    return false;
  auto prop = streamer.first_entity(props);
  while (prop) {
    switch (prop->m_id) {
      case 0:
      if (!streamer.start_member(*prop))
        return false;
      if (!move(streamer, instance.stamp(), prop))
        return false;
      if (!streamer.finish_member(*prop))
        return false;
      break;
      case 1:
      if (!streamer.start_member(*prop))
        return false;
      if (!move_string(streamer, instance.frame_id(), 256))
        return false;
      if (!streamer.finish_member(*prop))
        return false;
      break;
    }
    prop = streamer.next_entity(prop);
  }
  return streamer.finish_struct(*props);
}

template<typename S, std::enable_if_t<std::is_base_of<cdr_stream, S>::value, bool> = true >
bool move(S& str, const ::odom_msgs::Header& instance, bool as_key) {
  auto &props = get_type_props<::odom_msgs::Header>();
  str.set_mode(cdr_stream::stream_mode::move, as_key);
  return move(str, instance, props.data()); 
}

template<typename T, std::enable_if_t<std::is_base_of<cdr_stream, T>::value, bool> = true >
bool max(T& streamer, const ::odom_msgs::Header& instance, entity_properties_t *props) {
  (void)instance;
  if (!streamer.start_struct(*props))
    return false;
  auto prop = streamer.first_entity(props);
  while (prop) {
    switch (prop->m_id) {
      case 0:
      if (!streamer.start_member(*prop))
        return false;
      if (!max(streamer, instance.stamp(), prop))
        return false;
      if (!streamer.finish_member(*prop))
        return false;
      break;
      case 1:
      if (!streamer.start_member(*prop))
        return false;
      if (!max_string(streamer, instance.frame_id(), 256))
        return false;
      if (!streamer.finish_member(*prop))
        return false;
      break;
    }
    prop = streamer.next_entity(prop);
  }
  return streamer.finish_struct(*props);
}

template<typename S, std::enable_if_t<std::is_base_of<cdr_stream, S>::value, bool> = true >
bool max(S& str, const ::odom_msgs::Header& instance, bool as_key) {
  auto &props = get_type_props<::odom_msgs::Header>();
  str.set_mode(cdr_stream::stream_mode::max, as_key);
  return max(str, instance, props.data()); 
}

template<>
propvec &get_type_props<::odom_msgs::Point>();

template<typename T, std::enable_if_t<std::is_base_of<cdr_stream, T>::value, bool> = true >
bool write(T& streamer, const ::odom_msgs::Point& instance, entity_properties_t *props) {
  (void)instance;
  if (!streamer.start_struct(*props))
    return false;
  auto prop = streamer.first_entity(props);
  while (prop) {
    switch (prop->m_id) {
      case 0:
      if (!streamer.start_member(*prop))
        return false;
      if (!write(streamer, instance.x()))
        return false;
      if (!streamer.finish_member(*prop))
        return false;
      break;
      case 1:
      if (!streamer.start_member(*prop))
        return false;
      if (!write(streamer, instance.y()))
        return false;
      if (!streamer.finish_member(*prop))
        return false;
      break;
      case 2:
      if (!streamer.start_member(*prop))
        return false;
      if (!write(streamer, instance.z()))
        return false;
      if (!streamer.finish_member(*prop))
        return false;
      break;
    }
    prop = streamer.next_entity(prop);
  }
  return streamer.finish_struct(*props);
}

template<typename S, std::enable_if_t<std::is_base_of<cdr_stream, S>::value, bool> = true >
bool write(S& str, const ::odom_msgs::Point& instance, bool as_key) {
  auto &props = get_type_props<::odom_msgs::Point>();
  str.set_mode(cdr_stream::stream_mode::write, as_key);
  return write(str, instance, props.data()); 
}

template<typename T, std::enable_if_t<std::is_base_of<cdr_stream, T>::value, bool> = true >
bool read(T& streamer, ::odom_msgs::Point& instance, entity_properties_t *props) {
  (void)instance;
  if (!streamer.start_struct(*props))
    return false;
  auto prop = streamer.first_entity(props);
  while (prop) {
    switch (prop->m_id) {
      case 0:
      if (!streamer.start_member(*prop))
        return false;
      if (!read(streamer, instance.x()))
        return false;
      if (!streamer.finish_member(*prop))
        return false;
      break;
      case 1:
      if (!streamer.start_member(*prop))
        return false;
      if (!read(streamer, instance.y()))
        return false;
      if (!streamer.finish_member(*prop))
        return false;
      break;
      case 2:
      if (!streamer.start_member(*prop))
        return false;
      if (!read(streamer, instance.z()))
        return false;
      if (!streamer.finish_member(*prop))
        return false;
      break;
    }
    prop = streamer.next_entity(prop);
  }
  return streamer.finish_struct(*props);
}

template<typename S, std::enable_if_t<std::is_base_of<cdr_stream, S>::value, bool> = true >
bool read(S& str, ::odom_msgs::Point& instance, bool as_key) {
  auto &props = get_type_props<::odom_msgs::Point>();
  str.set_mode(cdr_stream::stream_mode::read, as_key);
  return read(str, instance, props.data()); 
}

template<typename T, std::enable_if_t<std::is_base_of<cdr_stream, T>::value, bool> = true >
bool move(T& streamer, const ::odom_msgs::Point& instance, entity_properties_t *props) {
  (void)instance;
  if (!streamer.start_struct(*props))
    return false;
  auto prop = streamer.first_entity(props);
  while (prop) {
    switch (prop->m_id) {
      case 0:
      if (!streamer.start_member(*prop))
        return false;
      if (!move(streamer, instance.x()))
        return false;
      if (!streamer.finish_member(*prop))
        return false;
      break;
      case 1:
      if (!streamer.start_member(*prop))
        return false;
      if (!move(streamer, instance.y()))
        return false;
      if (!streamer.finish_member(*prop))
        return false;
      break;
      case 2:
      if (!streamer.start_member(*prop))
        return false;
      if (!move(streamer, instance.z()))
        return false;
      if (!streamer.finish_member(*prop))
        return false;
      break;
    }
    prop = streamer.next_entity(prop);
  }
  return streamer.finish_struct(*props);
}

template<typename S, std::enable_if_t<std::is_base_of<cdr_stream, S>::value, bool> = true >
bool move(S& str, const ::odom_msgs::Point& instance, bool as_key) {
  auto &props = get_type_props<::odom_msgs::Point>();
  str.set_mode(cdr_stream::stream_mode::move, as_key);
  return move(str, instance, props.data()); 
}

template<typename T, std::enable_if_t<std::is_base_of<cdr_stream, T>::value, bool> = true >
bool max(T& streamer, const ::odom_msgs::Point& instance, entity_properties_t *props) {
  (void)instance;
  if (!streamer.start_struct(*props))
    return false;
  auto prop = streamer.first_entity(props);
  while (prop) {
    switch (prop->m_id) {
      case 0:
      if (!streamer.start_member(*prop))
        return false;
      if (!max(streamer, instance.x()))
        return false;
      if (!streamer.finish_member(*prop))
        return false;
      break;
      case 1:
      if (!streamer.start_member(*prop))
        return false;
      if (!max(streamer, instance.y()))
        return false;
      if (!streamer.finish_member(*prop))
        return false;
      break;
      case 2:
      if (!streamer.start_member(*prop))
        return false;
      if (!max(streamer, instance.z()))
        return false;
      if (!streamer.finish_member(*prop))
        return false;
      break;
    }
    prop = streamer.next_entity(prop);
  }
  return streamer.finish_struct(*props);
}

template<typename S, std::enable_if_t<std::is_base_of<cdr_stream, S>::value, bool> = true >
bool max(S& str, const ::odom_msgs::Point& instance, bool as_key) {
  auto &props = get_type_props<::odom_msgs::Point>();
  str.set_mode(cdr_stream::stream_mode::max, as_key);
  return max(str, instance, props.data()); 
}

template<>
propvec &get_type_props<::odom_msgs::Quaternion>();

template<typename T, std::enable_if_t<std::is_base_of<cdr_stream, T>::value, bool> = true >
bool write(T& streamer, const ::odom_msgs::Quaternion& instance, entity_properties_t *props) {
  (void)instance;
  if (!streamer.start_struct(*props))
    return false;
  auto prop = streamer.first_entity(props);
  while (prop) {
    switch (prop->m_id) {
      case 0:
      if (!streamer.start_member(*prop))
        return false;
      if (!write(streamer, instance.x()))
        return false;
      if (!streamer.finish_member(*prop))
        return false;
      break;
      case 1:
      if (!streamer.start_member(*prop))
        return false;
      if (!write(streamer, instance.y()))
        return false;
      if (!streamer.finish_member(*prop))
        return false;
      break;
      case 2:
      if (!streamer.start_member(*prop))
        return false;
      if (!write(streamer, instance.z()))
        return false;
      if (!streamer.finish_member(*prop))
        return false;
      break;
      case 3:
      if (!streamer.start_member(*prop))
        return false;
      if (!write(streamer, instance.w()))
        return false;
      if (!streamer.finish_member(*prop))
        return false;
      break;
    }
    prop = streamer.next_entity(prop);
  }
  return streamer.finish_struct(*props);
}

template<typename S, std::enable_if_t<std::is_base_of<cdr_stream, S>::value, bool> = true >
bool write(S& str, const ::odom_msgs::Quaternion& instance, bool as_key) {
  auto &props = get_type_props<::odom_msgs::Quaternion>();
  str.set_mode(cdr_stream::stream_mode::write, as_key);
  return write(str, instance, props.data()); 
}

template<typename T, std::enable_if_t<std::is_base_of<cdr_stream, T>::value, bool> = true >
bool read(T& streamer, ::odom_msgs::Quaternion& instance, entity_properties_t *props) {
  (void)instance;
  if (!streamer.start_struct(*props))
    return false;
  auto prop = streamer.first_entity(props);
  while (prop) {
    switch (prop->m_id) {
      case 0:
      if (!streamer.start_member(*prop))
        return false;
      if (!read(streamer, instance.x()))
        return false;
      if (!streamer.finish_member(*prop))
        return false;
      break;
      case 1:
      if (!streamer.start_member(*prop))
        return false;
      if (!read(streamer, instance.y()))
        return false;
      if (!streamer.finish_member(*prop))
        return false;
      break;
      case 2:
      if (!streamer.start_member(*prop))
        return false;
      if (!read(streamer, instance.z()))
        return false;
      if (!streamer.finish_member(*prop))
        return false;
      break;
      case 3:
      if (!streamer.start_member(*prop))
        return false;
      if (!read(streamer, instance.w()))
        return false;
      if (!streamer.finish_member(*prop))
        return false;
      break;
    }
    prop = streamer.next_entity(prop);
  }
  return streamer.finish_struct(*props);
}

template<typename S, std::enable_if_t<std::is_base_of<cdr_stream, S>::value, bool> = true >
bool read(S& str, ::odom_msgs::Quaternion& instance, bool as_key) {
  auto &props = get_type_props<::odom_msgs::Quaternion>();
  str.set_mode(cdr_stream::stream_mode::read, as_key);
  return read(str, instance, props.data()); 
}

template<typename T, std::enable_if_t<std::is_base_of<cdr_stream, T>::value, bool> = true >
bool move(T& streamer, const ::odom_msgs::Quaternion& instance, entity_properties_t *props) {
  (void)instance;
  if (!streamer.start_struct(*props))
    return false;
  auto prop = streamer.first_entity(props);
  while (prop) {
    switch (prop->m_id) {
      case 0:
      if (!streamer.start_member(*prop))
        return false;
      if (!move(streamer, instance.x()))
        return false;
      if (!streamer.finish_member(*prop))
        return false;
      break;
      case 1:
      if (!streamer.start_member(*prop))
        return false;
      if (!move(streamer, instance.y()))
        return false;
      if (!streamer.finish_member(*prop))
        return false;
      break;
      case 2:
      if (!streamer.start_member(*prop))
        return false;
      if (!move(streamer, instance.z()))
        return false;
      if (!streamer.finish_member(*prop))
        return false;
      break;
      case 3:
      if (!streamer.start_member(*prop))
        return false;
      if (!move(streamer, instance.w()))
        return false;
      if (!streamer.finish_member(*prop))
        return false;
      break;
    }
    prop = streamer.next_entity(prop);
  }
  return streamer.finish_struct(*props);
}

template<typename S, std::enable_if_t<std::is_base_of<cdr_stream, S>::value, bool> = true >
bool move(S& str, const ::odom_msgs::Quaternion& instance, bool as_key) {
  auto &props = get_type_props<::odom_msgs::Quaternion>();
  str.set_mode(cdr_stream::stream_mode::move, as_key);
  return move(str, instance, props.data()); 
}

template<typename T, std::enable_if_t<std::is_base_of<cdr_stream, T>::value, bool> = true >
bool max(T& streamer, const ::odom_msgs::Quaternion& instance, entity_properties_t *props) {
  (void)instance;
  if (!streamer.start_struct(*props))
    return false;
  auto prop = streamer.first_entity(props);
  while (prop) {
    switch (prop->m_id) {
      case 0:
      if (!streamer.start_member(*prop))
        return false;
      if (!max(streamer, instance.x()))
        return false;
      if (!streamer.finish_member(*prop))
        return false;
      break;
      case 1:
      if (!streamer.start_member(*prop))
        return false;
      if (!max(streamer, instance.y()))
        return false;
      if (!streamer.finish_member(*prop))
        return false;
      break;
      case 2:
      if (!streamer.start_member(*prop))
        return false;
      if (!max(streamer, instance.z()))
        return false;
      if (!streamer.finish_member(*prop))
        return false;
      break;
      case 3:
      if (!streamer.start_member(*prop))
        return false;
      if (!max(streamer, instance.w()))
        return false;
      if (!streamer.finish_member(*prop))
        return false;
      break;
    }
    prop = streamer.next_entity(prop);
  }
  return streamer.finish_struct(*props);
}

template<typename S, std::enable_if_t<std::is_base_of<cdr_stream, S>::value, bool> = true >
bool max(S& str, const ::odom_msgs::Quaternion& instance, bool as_key) {
  auto &props = get_type_props<::odom_msgs::Quaternion>();
  str.set_mode(cdr_stream::stream_mode::max, as_key);
  return max(str, instance, props.data()); 
}

template<>
propvec &get_type_props<::odom_msgs::Pose>();

template<typename T, std::enable_if_t<std::is_base_of<cdr_stream, T>::value, bool> = true >
bool write(T& streamer, const ::odom_msgs::Pose& instance, entity_properties_t *props) {
  (void)instance;
  if (!streamer.start_struct(*props))
    return false;
  auto prop = streamer.first_entity(props);
  while (prop) {
    switch (prop->m_id) {
      case 0:
      if (!streamer.start_member(*prop))
        return false;
      if (!write(streamer, instance.position(), prop))
        return false;
      if (!streamer.finish_member(*prop))
        return false;
      break;
      case 1:
      if (!streamer.start_member(*prop))
        return false;
      if (!write(streamer, instance.orientation(), prop))
        return false;
      if (!streamer.finish_member(*prop))
        return false;
      break;
    }
    prop = streamer.next_entity(prop);
  }
  return streamer.finish_struct(*props);
}

template<typename S, std::enable_if_t<std::is_base_of<cdr_stream, S>::value, bool> = true >
bool write(S& str, const ::odom_msgs::Pose& instance, bool as_key) {
  auto &props = get_type_props<::odom_msgs::Pose>();
  str.set_mode(cdr_stream::stream_mode::write, as_key);
  return write(str, instance, props.data()); 
}

template<typename T, std::enable_if_t<std::is_base_of<cdr_stream, T>::value, bool> = true >
bool read(T& streamer, ::odom_msgs::Pose& instance, entity_properties_t *props) {
  (void)instance;
  if (!streamer.start_struct(*props))
    return false;
  auto prop = streamer.first_entity(props);
  while (prop) {
    switch (prop->m_id) {
      case 0:
      if (!streamer.start_member(*prop))
        return false;
      if (!read(streamer, instance.position(), prop))
        return false;
      if (!streamer.finish_member(*prop))
        return false;
      break;
      case 1:
      if (!streamer.start_member(*prop))
        return false;
      if (!read(streamer, instance.orientation(), prop))
        return false;
      if (!streamer.finish_member(*prop))
        return false;
      break;
    }
    prop = streamer.next_entity(prop);
  }
  return streamer.finish_struct(*props);
}

template<typename S, std::enable_if_t<std::is_base_of<cdr_stream, S>::value, bool> = true >
bool read(S& str, ::odom_msgs::Pose& instance, bool as_key) {
  auto &props = get_type_props<::odom_msgs::Pose>();
  str.set_mode(cdr_stream::stream_mode::read, as_key);
  return read(str, instance, props.data()); 
}

template<typename T, std::enable_if_t<std::is_base_of<cdr_stream, T>::value, bool> = true >
bool move(T& streamer, const ::odom_msgs::Pose& instance, entity_properties_t *props) {
  (void)instance;
  if (!streamer.start_struct(*props))
    return false;
  auto prop = streamer.first_entity(props);
  while (prop) {
    switch (prop->m_id) {
      case 0:
      if (!streamer.start_member(*prop))
        return false;
      if (!move(streamer, instance.position(), prop))
        return false;
      if (!streamer.finish_member(*prop))
        return false;
      break;
      case 1:
      if (!streamer.start_member(*prop))
        return false;
      if (!move(streamer, instance.orientation(), prop))
        return false;
      if (!streamer.finish_member(*prop))
        return false;
      break;
    }
    prop = streamer.next_entity(prop);
  }
  return streamer.finish_struct(*props);
}

template<typename S, std::enable_if_t<std::is_base_of<cdr_stream, S>::value, bool> = true >
bool move(S& str, const ::odom_msgs::Pose& instance, bool as_key) {
  auto &props = get_type_props<::odom_msgs::Pose>();
  str.set_mode(cdr_stream::stream_mode::move, as_key);
  return move(str, instance, props.data()); 
}

template<typename T, std::enable_if_t<std::is_base_of<cdr_stream, T>::value, bool> = true >
bool max(T& streamer, const ::odom_msgs::Pose& instance, entity_properties_t *props) {
  (void)instance;
  if (!streamer.start_struct(*props))
    return false;
  auto prop = streamer.first_entity(props);
  while (prop) {
    switch (prop->m_id) {
      case 0:
      if (!streamer.start_member(*prop))
        return false;
      if (!max(streamer, instance.position(), prop))
        return false;
      if (!streamer.finish_member(*prop))
        return false;
      break;
      case 1:
      if (!streamer.start_member(*prop))
        return false;
      if (!max(streamer, instance.orientation(), prop))
        return false;
      if (!streamer.finish_member(*prop))
        return false;
      break;
    }
    prop = streamer.next_entity(prop);
  }
  return streamer.finish_struct(*props);
}

template<typename S, std::enable_if_t<std::is_base_of<cdr_stream, S>::value, bool> = true >
bool max(S& str, const ::odom_msgs::Pose& instance, bool as_key) {
  auto &props = get_type_props<::odom_msgs::Pose>();
  str.set_mode(cdr_stream::stream_mode::max, as_key);
  return max(str, instance, props.data()); 
}

template<>
propvec &get_type_props<::odom_msgs::Twist>();

template<typename T, std::enable_if_t<std::is_base_of<cdr_stream, T>::value, bool> = true >
bool write(T& streamer, const ::odom_msgs::Twist& instance, entity_properties_t *props) {
  (void)instance;
  if (!streamer.start_struct(*props))
    return false;
  auto prop = streamer.first_entity(props);
  while (prop) {
    switch (prop->m_id) {
      case 0:
      if (!streamer.start_member(*prop))
        return false;
      if (!write(streamer, instance.linear(), prop))
        return false;
      if (!streamer.finish_member(*prop))
        return false;
      break;
      case 1:
      if (!streamer.start_member(*prop))
        return false;
      if (!write(streamer, instance.angular(), prop))
        return false;
      if (!streamer.finish_member(*prop))
        return false;
      break;
    }
    prop = streamer.next_entity(prop);
  }
  return streamer.finish_struct(*props);
}

template<typename S, std::enable_if_t<std::is_base_of<cdr_stream, S>::value, bool> = true >
bool write(S& str, const ::odom_msgs::Twist& instance, bool as_key) {
  auto &props = get_type_props<::odom_msgs::Twist>();
  str.set_mode(cdr_stream::stream_mode::write, as_key);
  return write(str, instance, props.data()); 
}

template<typename T, std::enable_if_t<std::is_base_of<cdr_stream, T>::value, bool> = true >
bool read(T& streamer, ::odom_msgs::Twist& instance, entity_properties_t *props) {
  (void)instance;
  if (!streamer.start_struct(*props))
    return false;
  auto prop = streamer.first_entity(props);
  while (prop) {
    switch (prop->m_id) {
      case 0:
      if (!streamer.start_member(*prop))
        return false;
      if (!read(streamer, instance.linear(), prop))
        return false;
      if (!streamer.finish_member(*prop))
        return false;
      break;
      case 1:
      if (!streamer.start_member(*prop))
        return false;
      if (!read(streamer, instance.angular(), prop))
        return false;
      if (!streamer.finish_member(*prop))
        return false;
      break;
    }
    prop = streamer.next_entity(prop);
  }
  return streamer.finish_struct(*props);
}

template<typename S, std::enable_if_t<std::is_base_of<cdr_stream, S>::value, bool> = true >
bool read(S& str, ::odom_msgs::Twist& instance, bool as_key) {
  auto &props = get_type_props<::odom_msgs::Twist>();
  str.set_mode(cdr_stream::stream_mode::read, as_key);
  return read(str, instance, props.data()); 
}

template<typename T, std::enable_if_t<std::is_base_of<cdr_stream, T>::value, bool> = true >
bool move(T& streamer, const ::odom_msgs::Twist& instance, entity_properties_t *props) {
  (void)instance;
  if (!streamer.start_struct(*props))
    return false;
  auto prop = streamer.first_entity(props);
  while (prop) {
    switch (prop->m_id) {
      case 0:
      if (!streamer.start_member(*prop))
        return false;
      if (!move(streamer, instance.linear(), prop))
        return false;
      if (!streamer.finish_member(*prop))
        return false;
      break;
      case 1:
      if (!streamer.start_member(*prop))
        return false;
      if (!move(streamer, instance.angular(), prop))
        return false;
      if (!streamer.finish_member(*prop))
        return false;
      break;
    }
    prop = streamer.next_entity(prop);
  }
  return streamer.finish_struct(*props);
}

template<typename S, std::enable_if_t<std::is_base_of<cdr_stream, S>::value, bool> = true >
bool move(S& str, const ::odom_msgs::Twist& instance, bool as_key) {
  auto &props = get_type_props<::odom_msgs::Twist>();
  str.set_mode(cdr_stream::stream_mode::move, as_key);
  return move(str, instance, props.data()); 
}

template<typename T, std::enable_if_t<std::is_base_of<cdr_stream, T>::value, bool> = true >
bool max(T& streamer, const ::odom_msgs::Twist& instance, entity_properties_t *props) {
  (void)instance;
  if (!streamer.start_struct(*props))
    return false;
  auto prop = streamer.first_entity(props);
  while (prop) {
    switch (prop->m_id) {
      case 0:
      if (!streamer.start_member(*prop))
        return false;
      if (!max(streamer, instance.linear(), prop))
        return false;
      if (!streamer.finish_member(*prop))
        return false;
      break;
      case 1:
      if (!streamer.start_member(*prop))
        return false;
      if (!max(streamer, instance.angular(), prop))
        return false;
      if (!streamer.finish_member(*prop))
        return false;
      break;
    }
    prop = streamer.next_entity(prop);
  }
  return streamer.finish_struct(*props);
}

template<typename S, std::enable_if_t<std::is_base_of<cdr_stream, S>::value, bool> = true >
bool max(S& str, const ::odom_msgs::Twist& instance, bool as_key) {
  auto &props = get_type_props<::odom_msgs::Twist>();
  str.set_mode(cdr_stream::stream_mode::max, as_key);
  return max(str, instance, props.data()); 
}

template<>
propvec &get_type_props<::odom_msgs::PoseWithCovariance>();

template<typename T, std::enable_if_t<std::is_base_of<cdr_stream, T>::value, bool> = true >
bool write(T& streamer, const ::odom_msgs::PoseWithCovariance& instance, entity_properties_t *props) {
  (void)instance;
  if (!streamer.start_struct(*props))
    return false;
  auto prop = streamer.first_entity(props);
  while (prop) {
    switch (prop->m_id) {
      case 0:
      if (!streamer.start_member(*prop))
        return false;
      if (!write(streamer, instance.pose(), prop))
        return false;
      if (!streamer.finish_member(*prop))
        return false;
      break;
      case 1:
      if (!streamer.start_member(*prop))
        return false;
      if (!streamer.start_consecutive(true, true))
        return false;
      if (!write(streamer, instance.covariance()[0], instance.covariance().size()))
        return false;
      if (!streamer.finish_consecutive())
        return false;
      if (!streamer.finish_member(*prop))
        return false;
      break;
    }
    prop = streamer.next_entity(prop);
  }
  return streamer.finish_struct(*props);
}

template<typename S, std::enable_if_t<std::is_base_of<cdr_stream, S>::value, bool> = true >
bool write(S& str, const ::odom_msgs::PoseWithCovariance& instance, bool as_key) {
  auto &props = get_type_props<::odom_msgs::PoseWithCovariance>();
  str.set_mode(cdr_stream::stream_mode::write, as_key);
  return write(str, instance, props.data()); 
}

template<typename T, std::enable_if_t<std::is_base_of<cdr_stream, T>::value, bool> = true >
bool read(T& streamer, ::odom_msgs::PoseWithCovariance& instance, entity_properties_t *props) {
  (void)instance;
  if (!streamer.start_struct(*props))
    return false;
  auto prop = streamer.first_entity(props);
  while (prop) {
    switch (prop->m_id) {
      case 0:
      if (!streamer.start_member(*prop))
        return false;
      if (!read(streamer, instance.pose(), prop))
        return false;
      if (!streamer.finish_member(*prop))
        return false;
      break;
      case 1:
      if (!streamer.start_member(*prop))
        return false;
      if (!streamer.start_consecutive(true, true))
        return false;
      if (!read(streamer, instance.covariance()[0], instance.covariance().size()))
        return false;
      if (!streamer.finish_consecutive())
        return false;
      if (!streamer.finish_member(*prop))
        return false;
      break;
    }
    prop = streamer.next_entity(prop);
  }
  return streamer.finish_struct(*props);
}

template<typename S, std::enable_if_t<std::is_base_of<cdr_stream, S>::value, bool> = true >
bool read(S& str, ::odom_msgs::PoseWithCovariance& instance, bool as_key) {
  auto &props = get_type_props<::odom_msgs::PoseWithCovariance>();
  str.set_mode(cdr_stream::stream_mode::read, as_key);
  return read(str, instance, props.data()); 
}

template<typename T, std::enable_if_t<std::is_base_of<cdr_stream, T>::value, bool> = true >
bool move(T& streamer, const ::odom_msgs::PoseWithCovariance& instance, entity_properties_t *props) {
  (void)instance;
  if (!streamer.start_struct(*props))
    return false;
  auto prop = streamer.first_entity(props);
  while (prop) {
    switch (prop->m_id) {
      case 0:
      if (!streamer.start_member(*prop))
        return false;
      if (!move(streamer, instance.pose(), prop))
        return false;
      if (!streamer.finish_member(*prop))
        return false;
      break;
      case 1:
      if (!streamer.start_member(*prop))
        return false;
      if (!streamer.start_consecutive(true, true))
        return false;
      if (!move(streamer, instance.covariance()[0], instance.covariance().size()))
        return false;
      if (!streamer.finish_consecutive())
        return false;
      if (!streamer.finish_member(*prop))
        return false;
      break;
    }
    prop = streamer.next_entity(prop);
  }
  return streamer.finish_struct(*props);
}

template<typename S, std::enable_if_t<std::is_base_of<cdr_stream, S>::value, bool> = true >
bool move(S& str, const ::odom_msgs::PoseWithCovariance& instance, bool as_key) {
  auto &props = get_type_props<::odom_msgs::PoseWithCovariance>();
  str.set_mode(cdr_stream::stream_mode::move, as_key);
  return move(str, instance, props.data()); 
}

template<typename T, std::enable_if_t<std::is_base_of<cdr_stream, T>::value, bool> = true >
bool max(T& streamer, const ::odom_msgs::PoseWithCovariance& instance, entity_properties_t *props) {
  (void)instance;
  if (!streamer.start_struct(*props))
    return false;
  auto prop = streamer.first_entity(props);
  while (prop) {
    switch (prop->m_id) {
      case 0:
      if (!streamer.start_member(*prop))
        return false;
      if (!max(streamer, instance.pose(), prop))
        return false;
      if (!streamer.finish_member(*prop))
        return false;
      break;
      case 1:
      if (!streamer.start_member(*prop))
        return false;
      if (!streamer.start_consecutive(true, true))
        return false;
      if (!max(streamer, instance.covariance()[0], instance.covariance().size()))
        return false;
      if (!streamer.finish_consecutive())
        return false;
      if (!streamer.finish_member(*prop))
        return false;
      break;
    }
    prop = streamer.next_entity(prop);
  }
  return streamer.finish_struct(*props);
}

template<typename S, std::enable_if_t<std::is_base_of<cdr_stream, S>::value, bool> = true >
bool max(S& str, const ::odom_msgs::PoseWithCovariance& instance, bool as_key) {
  auto &props = get_type_props<::odom_msgs::PoseWithCovariance>();
  str.set_mode(cdr_stream::stream_mode::max, as_key);
  return max(str, instance, props.data()); 
}

template<>
propvec &get_type_props<::odom_msgs::TwistWithCovariance>();

template<typename T, std::enable_if_t<std::is_base_of<cdr_stream, T>::value, bool> = true >
bool write(T& streamer, const ::odom_msgs::TwistWithCovariance& instance, entity_properties_t *props) {
  (void)instance;
  if (!streamer.start_struct(*props))
    return false;
  auto prop = streamer.first_entity(props);
  while (prop) {
    switch (prop->m_id) {
      case 0:
      if (!streamer.start_member(*prop))
        return false;
      if (!write(streamer, instance.twist(), prop))
        return false;
      if (!streamer.finish_member(*prop))
        return false;
      break;
      case 1:
      if (!streamer.start_member(*prop))
        return false;
      if (!streamer.start_consecutive(true, true))
        return false;
      if (!write(streamer, instance.covariance()[0], instance.covariance().size()))
        return false;
      if (!streamer.finish_consecutive())
        return false;
      if (!streamer.finish_member(*prop))
        return false;
      break;
    }
    prop = streamer.next_entity(prop);
  }
  return streamer.finish_struct(*props);
}

template<typename S, std::enable_if_t<std::is_base_of<cdr_stream, S>::value, bool> = true >
bool write(S& str, const ::odom_msgs::TwistWithCovariance& instance, bool as_key) {
  auto &props = get_type_props<::odom_msgs::TwistWithCovariance>();
  str.set_mode(cdr_stream::stream_mode::write, as_key);
  return write(str, instance, props.data()); 
}

template<typename T, std::enable_if_t<std::is_base_of<cdr_stream, T>::value, bool> = true >
bool read(T& streamer, ::odom_msgs::TwistWithCovariance& instance, entity_properties_t *props) {
  (void)instance;
  if (!streamer.start_struct(*props))
    return false;
  auto prop = streamer.first_entity(props);
  while (prop) {
    switch (prop->m_id) {
      case 0:
      if (!streamer.start_member(*prop))
        return false;
      if (!read(streamer, instance.twist(), prop))
        return false;
      if (!streamer.finish_member(*prop))
        return false;
      break;
      case 1:
      if (!streamer.start_member(*prop))
        return false;
      if (!streamer.start_consecutive(true, true))
        return false;
      if (!read(streamer, instance.covariance()[0], instance.covariance().size()))
        return false;
      if (!streamer.finish_consecutive())
        return false;
      if (!streamer.finish_member(*prop))
        return false;
      break;
    }
    prop = streamer.next_entity(prop);
  }
  return streamer.finish_struct(*props);
}

template<typename S, std::enable_if_t<std::is_base_of<cdr_stream, S>::value, bool> = true >
bool read(S& str, ::odom_msgs::TwistWithCovariance& instance, bool as_key) {
  auto &props = get_type_props<::odom_msgs::TwistWithCovariance>();
  str.set_mode(cdr_stream::stream_mode::read, as_key);
  return read(str, instance, props.data()); 
}

template<typename T, std::enable_if_t<std::is_base_of<cdr_stream, T>::value, bool> = true >
bool move(T& streamer, const ::odom_msgs::TwistWithCovariance& instance, entity_properties_t *props) {
  (void)instance;
  if (!streamer.start_struct(*props))
    return false;
  auto prop = streamer.first_entity(props);
  while (prop) {
    switch (prop->m_id) {
      case 0:
      if (!streamer.start_member(*prop))
        return false;
      if (!move(streamer, instance.twist(), prop))
        return false;
      if (!streamer.finish_member(*prop))
        return false;
      break;
      case 1:
      if (!streamer.start_member(*prop))
        return false;
      if (!streamer.start_consecutive(true, true))
        return false;
      if (!move(streamer, instance.covariance()[0], instance.covariance().size()))
        return false;
      if (!streamer.finish_consecutive())
        return false;
      if (!streamer.finish_member(*prop))
        return false;
      break;
    }
    prop = streamer.next_entity(prop);
  }
  return streamer.finish_struct(*props);
}

template<typename S, std::enable_if_t<std::is_base_of<cdr_stream, S>::value, bool> = true >
bool move(S& str, const ::odom_msgs::TwistWithCovariance& instance, bool as_key) {
  auto &props = get_type_props<::odom_msgs::TwistWithCovariance>();
  str.set_mode(cdr_stream::stream_mode::move, as_key);
  return move(str, instance, props.data()); 
}

template<typename T, std::enable_if_t<std::is_base_of<cdr_stream, T>::value, bool> = true >
bool max(T& streamer, const ::odom_msgs::TwistWithCovariance& instance, entity_properties_t *props) {
  (void)instance;
  if (!streamer.start_struct(*props))
    return false;
  auto prop = streamer.first_entity(props);
  while (prop) {
    switch (prop->m_id) {
      case 0:
      if (!streamer.start_member(*prop))
        return false;
      if (!max(streamer, instance.twist(), prop))
        return false;
      if (!streamer.finish_member(*prop))
        return false;
      break;
      case 1:
      if (!streamer.start_member(*prop))
        return false;
      if (!streamer.start_consecutive(true, true))
        return false;
      if (!max(streamer, instance.covariance()[0], instance.covariance().size()))
        return false;
      if (!streamer.finish_consecutive())
        return false;
      if (!streamer.finish_member(*prop))
        return false;
      break;
    }
    prop = streamer.next_entity(prop);
  }
  return streamer.finish_struct(*props);
}

template<typename S, std::enable_if_t<std::is_base_of<cdr_stream, S>::value, bool> = true >
bool max(S& str, const ::odom_msgs::TwistWithCovariance& instance, bool as_key) {
  auto &props = get_type_props<::odom_msgs::TwistWithCovariance>();
  str.set_mode(cdr_stream::stream_mode::max, as_key);
  return max(str, instance, props.data()); 
}

template<>
propvec &get_type_props<::odom_msgs::Odometry>();

template<typename T, std::enable_if_t<std::is_base_of<cdr_stream, T>::value, bool> = true >
bool write(T& streamer, const ::odom_msgs::Odometry& instance, entity_properties_t *props) {
  (void)instance;
  if (!streamer.start_struct(*props))
    return false;
  auto prop = streamer.first_entity(props);
  while (prop) {
    switch (prop->m_id) {
      case 0:
      if (!streamer.start_member(*prop))
        return false;
      if (!write(streamer, instance.header(), prop))
        return false;
      if (!streamer.finish_member(*prop))
        return false;
      break;
      case 1:
      if (!streamer.start_member(*prop))
        return false;
      if (!write_string(streamer, instance.child_frame_id(), 256))
        return false;
      if (!streamer.finish_member(*prop))
        return false;
      break;
      case 2:
      if (!streamer.start_member(*prop))
        return false;
      if (!write(streamer, instance.pose(), prop))
        return false;
      if (!streamer.finish_member(*prop))
        return false;
      break;
      case 3:
      if (!streamer.start_member(*prop))
        return false;
      if (!write(streamer, instance.twist(), prop))
        return false;
      if (!streamer.finish_member(*prop))
        return false;
      break;
    }
    prop = streamer.next_entity(prop);
  }
  return streamer.finish_struct(*props);
}

template<typename S, std::enable_if_t<std::is_base_of<cdr_stream, S>::value, bool> = true >
bool write(S& str, const ::odom_msgs::Odometry& instance, bool as_key) {
  auto &props = get_type_props<::odom_msgs::Odometry>();
  str.set_mode(cdr_stream::stream_mode::write, as_key);
  return write(str, instance, props.data()); 
}

template<typename T, std::enable_if_t<std::is_base_of<cdr_stream, T>::value, bool> = true >
bool read(T& streamer, ::odom_msgs::Odometry& instance, entity_properties_t *props) {
  (void)instance;
  if (!streamer.start_struct(*props))
    return false;
  auto prop = streamer.first_entity(props);
  while (prop) {
    switch (prop->m_id) {
      case 0:
      if (!streamer.start_member(*prop))
        return false;
      if (!read(streamer, instance.header(), prop))
        return false;
      if (!streamer.finish_member(*prop))
        return false;
      break;
      case 1:
      if (!streamer.start_member(*prop))
        return false;
      if (!read_string(streamer, instance.child_frame_id(), 256))
        return false;
      if (!streamer.finish_member(*prop))
        return false;
      break;
      case 2:
      if (!streamer.start_member(*prop))
        return false;
      if (!read(streamer, instance.pose(), prop))
        return false;
      if (!streamer.finish_member(*prop))
        return false;
      break;
      case 3:
      if (!streamer.start_member(*prop))
        return false;
      if (!read(streamer, instance.twist(), prop))
        return false;
      if (!streamer.finish_member(*prop))
        return false;
      break;
    }
    prop = streamer.next_entity(prop);
  }
  return streamer.finish_struct(*props);
}

template<typename S, std::enable_if_t<std::is_base_of<cdr_stream, S>::value, bool> = true >
bool read(S& str, ::odom_msgs::Odometry& instance, bool as_key) {
  auto &props = get_type_props<::odom_msgs::Odometry>();
  str.set_mode(cdr_stream::stream_mode::read, as_key);
  return read(str, instance, props.data()); 
}

template<typename T, std::enable_if_t<std::is_base_of<cdr_stream, T>::value, bool> = true >
bool move(T& streamer, const ::odom_msgs::Odometry& instance, entity_properties_t *props) {
  (void)instance;
  if (!streamer.start_struct(*props))
    return false;
  auto prop = streamer.first_entity(props);
  while (prop) {
    switch (prop->m_id) {
      case 0:
      if (!streamer.start_member(*prop))
        return false;
      if (!move(streamer, instance.header(), prop))
        return false;
      if (!streamer.finish_member(*prop))
        return false;
      break;
      case 1:
      if (!streamer.start_member(*prop))
        return false;
      if (!move_string(streamer, instance.child_frame_id(), 256))
        return false;
      if (!streamer.finish_member(*prop))
        return false;
      break;
      case 2:
      if (!streamer.start_member(*prop))
        return false;
      if (!move(streamer, instance.pose(), prop))
        return false;
      if (!streamer.finish_member(*prop))
        return false;
      break;
      case 3:
      if (!streamer.start_member(*prop))
        return false;
      if (!move(streamer, instance.twist(), prop))
        return false;
      if (!streamer.finish_member(*prop))
        return false;
      break;
    }
    prop = streamer.next_entity(prop);
  }
  return streamer.finish_struct(*props);
}

template<typename S, std::enable_if_t<std::is_base_of<cdr_stream, S>::value, bool> = true >
bool move(S& str, const ::odom_msgs::Odometry& instance, bool as_key) {
  auto &props = get_type_props<::odom_msgs::Odometry>();
  str.set_mode(cdr_stream::stream_mode::move, as_key);
  return move(str, instance, props.data()); 
}

template<typename T, std::enable_if_t<std::is_base_of<cdr_stream, T>::value, bool> = true >
bool max(T& streamer, const ::odom_msgs::Odometry& instance, entity_properties_t *props) {
  (void)instance;
  if (!streamer.start_struct(*props))
    return false;
  auto prop = streamer.first_entity(props);
  while (prop) {
    switch (prop->m_id) {
      case 0:
      if (!streamer.start_member(*prop))
        return false;
      if (!max(streamer, instance.header(), prop))
        return false;
      if (!streamer.finish_member(*prop))
        return false;
      break;
      case 1:
      if (!streamer.start_member(*prop))
        return false;
      if (!max_string(streamer, instance.child_frame_id(), 256))
        return false;
      if (!streamer.finish_member(*prop))
        return false;
      break;
      case 2:
      if (!streamer.start_member(*prop))
        return false;
      if (!max(streamer, instance.pose(), prop))
        return false;
      if (!streamer.finish_member(*prop))
        return false;
      break;
      case 3:
      if (!streamer.start_member(*prop))
        return false;
      if (!max(streamer, instance.twist(), prop))
        return false;
      if (!streamer.finish_member(*prop))
        return false;
      break;
    }
    prop = streamer.next_entity(prop);
  }
  return streamer.finish_struct(*props);
}

template<typename S, std::enable_if_t<std::is_base_of<cdr_stream, S>::value, bool> = true >
bool max(S& str, const ::odom_msgs::Odometry& instance, bool as_key) {
  auto &props = get_type_props<::odom_msgs::Odometry>();
  str.set_mode(cdr_stream::stream_mode::max, as_key);
  return max(str, instance, props.data()); 
}

template<>
propvec &get_type_props<::odom_msgs::PointField>();

template<typename T, std::enable_if_t<std::is_base_of<cdr_stream, T>::value, bool> = true >
bool write(T& streamer, const ::odom_msgs::PointField& instance, entity_properties_t *props) {
  (void)instance;
  if (!streamer.start_struct(*props))
    return false;
  auto prop = streamer.first_entity(props);
  while (prop) {
    switch (prop->m_id) {
      case 0:
      if (!streamer.start_member(*prop))
        return false;
      if (!write_string(streamer, instance.name(), 128))
        return false;
      if (!streamer.finish_member(*prop))
        return false;
      break;
      case 1:
      if (!streamer.start_member(*prop))
        return false;
      if (!write(streamer, instance.offset()))
        return false;
      if (!streamer.finish_member(*prop))
        return false;
      break;
      case 2:
      if (!streamer.start_member(*prop))
        return false;
      if (!write(streamer, instance.datatype()))
        return false;
      if (!streamer.finish_member(*prop))
        return false;
      break;
      case 3:
      if (!streamer.start_member(*prop))
        return false;
      if (!write(streamer, instance.count()))
        return false;
      if (!streamer.finish_member(*prop))
        return false;
      break;
    }
    prop = streamer.next_entity(prop);
  }
  return streamer.finish_struct(*props);
}

template<typename S, std::enable_if_t<std::is_base_of<cdr_stream, S>::value, bool> = true >
bool write(S& str, const ::odom_msgs::PointField& instance, bool as_key) {
  auto &props = get_type_props<::odom_msgs::PointField>();
  str.set_mode(cdr_stream::stream_mode::write, as_key);
  return write(str, instance, props.data()); 
}

template<typename T, std::enable_if_t<std::is_base_of<cdr_stream, T>::value, bool> = true >
bool read(T& streamer, ::odom_msgs::PointField& instance, entity_properties_t *props) {
  (void)instance;
  if (!streamer.start_struct(*props))
    return false;
  auto prop = streamer.first_entity(props);
  while (prop) {
    switch (prop->m_id) {
      case 0:
      if (!streamer.start_member(*prop))
        return false;
      if (!read_string(streamer, instance.name(), 128))
        return false;
      if (!streamer.finish_member(*prop))
        return false;
      break;
      case 1:
      if (!streamer.start_member(*prop))
        return false;
      if (!read(streamer, instance.offset()))
        return false;
      if (!streamer.finish_member(*prop))
        return false;
      break;
      case 2:
      if (!streamer.start_member(*prop))
        return false;
      if (!read(streamer, instance.datatype()))
        return false;
      if (!streamer.finish_member(*prop))
        return false;
      break;
      case 3:
      if (!streamer.start_member(*prop))
        return false;
      if (!read(streamer, instance.count()))
        return false;
      if (!streamer.finish_member(*prop))
        return false;
      break;
    }
    prop = streamer.next_entity(prop);
  }
  return streamer.finish_struct(*props);
}

template<typename S, std::enable_if_t<std::is_base_of<cdr_stream, S>::value, bool> = true >
bool read(S& str, ::odom_msgs::PointField& instance, bool as_key) {
  auto &props = get_type_props<::odom_msgs::PointField>();
  str.set_mode(cdr_stream::stream_mode::read, as_key);
  return read(str, instance, props.data()); 
}

template<typename T, std::enable_if_t<std::is_base_of<cdr_stream, T>::value, bool> = true >
bool move(T& streamer, const ::odom_msgs::PointField& instance, entity_properties_t *props) {
  (void)instance;
  if (!streamer.start_struct(*props))
    return false;
  auto prop = streamer.first_entity(props);
  while (prop) {
    switch (prop->m_id) {
      case 0:
      if (!streamer.start_member(*prop))
        return false;
      if (!move_string(streamer, instance.name(), 128))
        return false;
      if (!streamer.finish_member(*prop))
        return false;
      break;
      case 1:
      if (!streamer.start_member(*prop))
        return false;
      if (!move(streamer, instance.offset()))
        return false;
      if (!streamer.finish_member(*prop))
        return false;
      break;
      case 2:
      if (!streamer.start_member(*prop))
        return false;
      if (!move(streamer, instance.datatype()))
        return false;
      if (!streamer.finish_member(*prop))
        return false;
      break;
      case 3:
      if (!streamer.start_member(*prop))
        return false;
      if (!move(streamer, instance.count()))
        return false;
      if (!streamer.finish_member(*prop))
        return false;
      break;
    }
    prop = streamer.next_entity(prop);
  }
  return streamer.finish_struct(*props);
}

template<typename S, std::enable_if_t<std::is_base_of<cdr_stream, S>::value, bool> = true >
bool move(S& str, const ::odom_msgs::PointField& instance, bool as_key) {
  auto &props = get_type_props<::odom_msgs::PointField>();
  str.set_mode(cdr_stream::stream_mode::move, as_key);
  return move(str, instance, props.data()); 
}

template<typename T, std::enable_if_t<std::is_base_of<cdr_stream, T>::value, bool> = true >
bool max(T& streamer, const ::odom_msgs::PointField& instance, entity_properties_t *props) {
  (void)instance;
  if (!streamer.start_struct(*props))
    return false;
  auto prop = streamer.first_entity(props);
  while (prop) {
    switch (prop->m_id) {
      case 0:
      if (!streamer.start_member(*prop))
        return false;
      if (!max_string(streamer, instance.name(), 128))
        return false;
      if (!streamer.finish_member(*prop))
        return false;
      break;
      case 1:
      if (!streamer.start_member(*prop))
        return false;
      if (!max(streamer, instance.offset()))
        return false;
      if (!streamer.finish_member(*prop))
        return false;
      break;
      case 2:
      if (!streamer.start_member(*prop))
        return false;
      if (!max(streamer, instance.datatype()))
        return false;
      if (!streamer.finish_member(*prop))
        return false;
      break;
      case 3:
      if (!streamer.start_member(*prop))
        return false;
      if (!max(streamer, instance.count()))
        return false;
      if (!streamer.finish_member(*prop))
        return false;
      break;
    }
    prop = streamer.next_entity(prop);
  }
  return streamer.finish_struct(*props);
}

template<typename S, std::enable_if_t<std::is_base_of<cdr_stream, S>::value, bool> = true >
bool max(S& str, const ::odom_msgs::PointField& instance, bool as_key) {
  auto &props = get_type_props<::odom_msgs::PointField>();
  str.set_mode(cdr_stream::stream_mode::max, as_key);
  return max(str, instance, props.data()); 
}

template<>
propvec &get_type_props<::odom_msgs::PointCloud2>();

template<typename T, std::enable_if_t<std::is_base_of<cdr_stream, T>::value, bool> = true >
bool write(T& streamer, const ::odom_msgs::PointCloud2& instance, entity_properties_t *props) {
  (void)instance;
  if (!streamer.start_struct(*props))
    return false;
  auto prop = streamer.first_entity(props);
  while (prop) {
    switch (prop->m_id) {
      case 0:
      if (!streamer.start_member(*prop))
        return false;
      if (!write(streamer, instance.header(), prop))
        return false;
      if (!streamer.finish_member(*prop))
        return false;
      break;
      case 1:
      if (!streamer.start_member(*prop))
        return false;
      if (!write(streamer, instance.height()))
        return false;
      if (!streamer.finish_member(*prop))
        return false;
      break;
      case 2:
      if (!streamer.start_member(*prop))
        return false;
      if (!write(streamer, instance.width()))
        return false;
      if (!streamer.finish_member(*prop))
        return false;
      break;
      case 3:
      if (!streamer.start_member(*prop))
        return false;
      if (!streamer.start_consecutive(false, false))
        return false;
      {
      uint32_t se_1 = uint32_t(instance.fields().size());
      if (se_1 > 64 &&
          streamer.status(serialization_status::write_bound_exceeded))
        return false;
      if (!write(streamer, se_1))
        return false;
      for (uint32_t i_1 = 0; i_1 < se_1; i_1++) {
      if (!write(streamer, instance.fields()[i_1], prop))
        return false;
      }  //i_1
      }  //end sequence 1
      if (!streamer.finish_consecutive())
        return false;
      if (!streamer.finish_member(*prop))
        return false;
      break;
      case 4:
      if (!streamer.start_member(*prop))
        return false;
      if (!write(streamer, instance.is_bigendian()))
        return false;
      if (!streamer.finish_member(*prop))
        return false;
      break;
      case 5:
      if (!streamer.start_member(*prop))
        return false;
      if (!write(streamer, instance.point_step()))
        return false;
      if (!streamer.finish_member(*prop))
        return false;
      break;
      case 6:
      if (!streamer.start_member(*prop))
        return false;
      if (!write(streamer, instance.row_step()))
        return false;
      if (!streamer.finish_member(*prop))
        return false;
      break;
      case 7:
      if (!streamer.start_member(*prop))
        return false;
      if (!streamer.start_consecutive(false, true))
        return false;
      {
      uint32_t se_1 = uint32_t(instance.data().size());
      if (se_1 > 1048576 &&
          streamer.status(serialization_status::write_bound_exceeded))
        return false;
      if (!write(streamer, se_1))
        return false;
      if (se_1 > 0 &&
          !write(streamer, instance.data()[0], se_1))
        return false;
      }  //end sequence 1
      if (!streamer.finish_consecutive())
        return false;
      if (!streamer.finish_member(*prop))
        return false;
      break;
      case 8:
      if (!streamer.start_member(*prop))
        return false;
      if (!write(streamer, instance.is_dense()))
        return false;
      if (!streamer.finish_member(*prop))
        return false;
      break;
    }
    prop = streamer.next_entity(prop);
  }
  return streamer.finish_struct(*props);
}

template<typename S, std::enable_if_t<std::is_base_of<cdr_stream, S>::value, bool> = true >
bool write(S& str, const ::odom_msgs::PointCloud2& instance, bool as_key) {
  auto &props = get_type_props<::odom_msgs::PointCloud2>();
  str.set_mode(cdr_stream::stream_mode::write, as_key);
  return write(str, instance, props.data()); 
}

template<typename T, std::enable_if_t<std::is_base_of<cdr_stream, T>::value, bool> = true >
bool read(T& streamer, ::odom_msgs::PointCloud2& instance, entity_properties_t *props) {
  (void)instance;
  if (!streamer.start_struct(*props))
    return false;
  auto prop = streamer.first_entity(props);
  while (prop) {
    switch (prop->m_id) {
      case 0:
      if (!streamer.start_member(*prop))
        return false;
      if (!read(streamer, instance.header(), prop))
        return false;
      if (!streamer.finish_member(*prop))
        return false;
      break;
      case 1:
      if (!streamer.start_member(*prop))
        return false;
      if (!read(streamer, instance.height()))
        return false;
      if (!streamer.finish_member(*prop))
        return false;
      break;
      case 2:
      if (!streamer.start_member(*prop))
        return false;
      if (!read(streamer, instance.width()))
        return false;
      if (!streamer.finish_member(*prop))
        return false;
      break;
      case 3:
      if (!streamer.start_member(*prop))
        return false;
      if (!streamer.start_consecutive(false, false))
        return false;
      {
      uint32_t se_1 = uint32_t(instance.fields().size());
      if (se_1 > 64 &&
          streamer.status(serialization_status::read_bound_exceeded))
        return false;
      if (!read(streamer, se_1))
        return false;
      instance.fields().resize(se_1);
      for (uint32_t i_1 = 0; i_1 < se_1; i_1++) {
      if (!read(streamer, instance.fields()[i_1], prop))
        return false;
      }  //i_1
      }  //end sequence 1
      if (!streamer.finish_consecutive())
        return false;
      if (!streamer.finish_member(*prop))
        return false;
      break;
      case 4:
      if (!streamer.start_member(*prop))
        return false;
      if (!read(streamer, instance.is_bigendian()))
        return false;
      if (!streamer.finish_member(*prop))
        return false;
      break;
      case 5:
      if (!streamer.start_member(*prop))
        return false;
      if (!read(streamer, instance.point_step()))
        return false;
      if (!streamer.finish_member(*prop))
        return false;
      break;
      case 6:
      if (!streamer.start_member(*prop))
        return false;
      if (!read(streamer, instance.row_step()))
        return false;
      if (!streamer.finish_member(*prop))
        return false;
      break;
      case 7:
      if (!streamer.start_member(*prop))
        return false;
      if (!streamer.start_consecutive(false, true))
        return false;
      {
      uint32_t se_1 = uint32_t(instance.data().size());
      if (se_1 > 1048576 &&
          streamer.status(serialization_status::read_bound_exceeded))
        return false;
      if (!read(streamer, se_1))
        return false;
      instance.data().resize(se_1);
      if (se_1 > 0 &&
          !read(streamer, instance.data()[0], se_1))
        return false;
      }  //end sequence 1
      if (!streamer.finish_consecutive())
        return false;
      if (!streamer.finish_member(*prop))
        return false;
      break;
      case 8:
      if (!streamer.start_member(*prop))
        return false;
      if (!read(streamer, instance.is_dense()))
        return false;
      if (!streamer.finish_member(*prop))
        return false;
      break;
    }
    prop = streamer.next_entity(prop);
  }
  return streamer.finish_struct(*props);
}

template<typename S, std::enable_if_t<std::is_base_of<cdr_stream, S>::value, bool> = true >
bool read(S& str, ::odom_msgs::PointCloud2& instance, bool as_key) {
  auto &props = get_type_props<::odom_msgs::PointCloud2>();
  str.set_mode(cdr_stream::stream_mode::read, as_key);
  return read(str, instance, props.data()); 
}

template<typename T, std::enable_if_t<std::is_base_of<cdr_stream, T>::value, bool> = true >
bool move(T& streamer, const ::odom_msgs::PointCloud2& instance, entity_properties_t *props) {
  (void)instance;
  if (!streamer.start_struct(*props))
    return false;
  auto prop = streamer.first_entity(props);
  while (prop) {
    switch (prop->m_id) {
      case 0:
      if (!streamer.start_member(*prop))
        return false;
      if (!move(streamer, instance.header(), prop))
        return false;
      if (!streamer.finish_member(*prop))
        return false;
      break;
      case 1:
      if (!streamer.start_member(*prop))
        return false;
      if (!move(streamer, instance.height()))
        return false;
      if (!streamer.finish_member(*prop))
        return false;
      break;
      case 2:
      if (!streamer.start_member(*prop))
        return false;
      if (!move(streamer, instance.width()))
        return false;
      if (!streamer.finish_member(*prop))
        return false;
      break;
      case 3:
      if (!streamer.start_member(*prop))
        return false;
      if (!streamer.start_consecutive(false, false))
        return false;
      {
      uint32_t se_1 = uint32_t(instance.fields().size());
      if (se_1 > 64 &&
          streamer.status(serialization_status::move_bound_exceeded))
        return false;
      if (!move(streamer, se_1))
        return false;
      for (uint32_t i_1 = 0; i_1 < se_1; i_1++) {
      if (!move(streamer, instance.fields()[i_1], prop))
        return false;
      }  //i_1
      }  //end sequence 1
      if (!streamer.finish_consecutive())
        return false;
      if (!streamer.finish_member(*prop))
        return false;
      break;
      case 4:
      if (!streamer.start_member(*prop))
        return false;
      if (!move(streamer, instance.is_bigendian()))
        return false;
      if (!streamer.finish_member(*prop))
        return false;
      break;
      case 5:
      if (!streamer.start_member(*prop))
        return false;
      if (!move(streamer, instance.point_step()))
        return false;
      if (!streamer.finish_member(*prop))
        return false;
      break;
      case 6:
      if (!streamer.start_member(*prop))
        return false;
      if (!move(streamer, instance.row_step()))
        return false;
      if (!streamer.finish_member(*prop))
        return false;
      break;
      case 7:
      if (!streamer.start_member(*prop))
        return false;
      if (!streamer.start_consecutive(false, true))
        return false;
      {
      uint32_t se_1 = uint32_t(instance.data().size());
      if (se_1 > 1048576 &&
          streamer.status(serialization_status::move_bound_exceeded))
        return false;
      if (!move(streamer, se_1))
        return false;
      if (se_1 > 0 &&
          !move(streamer, uint8_t(), se_1))
        return false;
      }  //end sequence 1
      if (!streamer.finish_consecutive())
        return false;
      if (!streamer.finish_member(*prop))
        return false;
      break;
      case 8:
      if (!streamer.start_member(*prop))
        return false;
      if (!move(streamer, instance.is_dense()))
        return false;
      if (!streamer.finish_member(*prop))
        return false;
      break;
    }
    prop = streamer.next_entity(prop);
  }
  return streamer.finish_struct(*props);
}

template<typename S, std::enable_if_t<std::is_base_of<cdr_stream, S>::value, bool> = true >
bool move(S& str, const ::odom_msgs::PointCloud2& instance, bool as_key) {
  auto &props = get_type_props<::odom_msgs::PointCloud2>();
  str.set_mode(cdr_stream::stream_mode::move, as_key);
  return move(str, instance, props.data()); 
}

template<typename T, std::enable_if_t<std::is_base_of<cdr_stream, T>::value, bool> = true >
bool max(T& streamer, const ::odom_msgs::PointCloud2& instance, entity_properties_t *props) {
  (void)instance;
  if (!streamer.start_struct(*props))
    return false;
  auto prop = streamer.first_entity(props);
  while (prop) {
    switch (prop->m_id) {
      case 0:
      if (!streamer.start_member(*prop))
        return false;
      if (!max(streamer, instance.header(), prop))
        return false;
      if (!streamer.finish_member(*prop))
        return false;
      break;
      case 1:
      if (!streamer.start_member(*prop))
        return false;
      if (!max(streamer, instance.height()))
        return false;
      if (!streamer.finish_member(*prop))
        return false;
      break;
      case 2:
      if (!streamer.start_member(*prop))
        return false;
      if (!max(streamer, instance.width()))
        return false;
      if (!streamer.finish_member(*prop))
        return false;
      break;
      case 3:
      if (!streamer.start_member(*prop))
        return false;
      if (!streamer.start_consecutive(false, false))
        return false;
      {
      uint32_t se_1 = 64;
      if (!max(streamer, se_1))
        return false;
      for (uint32_t i_1 = 0; i_1 < se_1; i_1++) {
      if (!max(streamer, instance.fields()[i_1], prop))
        return false;
      }  //i_1
      }  //end sequence 1
      if (!streamer.finish_consecutive())
        return false;
      if (!streamer.finish_member(*prop))
        return false;
      break;
      case 4:
      if (!streamer.start_member(*prop))
        return false;
      if (!max(streamer, instance.is_bigendian()))
        return false;
      if (!streamer.finish_member(*prop))
        return false;
      break;
      case 5:
      if (!streamer.start_member(*prop))
        return false;
      if (!max(streamer, instance.point_step()))
        return false;
      if (!streamer.finish_member(*prop))
        return false;
      break;
      case 6:
      if (!streamer.start_member(*prop))
        return false;
      if (!max(streamer, instance.row_step()))
        return false;
      if (!streamer.finish_member(*prop))
        return false;
      break;
      case 7:
      if (!streamer.start_member(*prop))
        return false;
      if (!streamer.start_consecutive(false, true))
        return false;
      {
      uint32_t se_1 = 1048576;
      if (!max(streamer, se_1))
        return false;
      if (se_1 > 0 &&
          !max(streamer, uint8_t(), se_1))
        return false;
      }  //end sequence 1
      if (!streamer.finish_consecutive())
        return false;
      if (!streamer.finish_member(*prop))
        return false;
      break;
      case 8:
      if (!streamer.start_member(*prop))
        return false;
      if (!max(streamer, instance.is_dense()))
        return false;
      if (!streamer.finish_member(*prop))
        return false;
      break;
    }
    prop = streamer.next_entity(prop);
  }
  return streamer.finish_struct(*props);
}

template<typename S, std::enable_if_t<std::is_base_of<cdr_stream, S>::value, bool> = true >
bool max(S& str, const ::odom_msgs::PointCloud2& instance, bool as_key) {
  auto &props = get_type_props<::odom_msgs::PointCloud2>();
  str.set_mode(cdr_stream::stream_mode::max, as_key);
  return max(str, instance, props.data()); 
}

template<>
propvec &get_type_props<::odom_msgs::OdometryPointCloud>();

template<typename T, std::enable_if_t<std::is_base_of<cdr_stream, T>::value, bool> = true >
bool write(T& streamer, const ::odom_msgs::OdometryPointCloud& instance, entity_properties_t *props) {
  (void)instance;
  if (!streamer.start_struct(*props))
    return false;
  auto prop = streamer.first_entity(props);
  while (prop) {
    switch (prop->m_id) {
      case 0:
      if (!streamer.start_member(*prop))
        return false;
      if (!write(streamer, instance.odom(), prop))
        return false;
      if (!streamer.finish_member(*prop))
        return false;
      break;
      case 1:
      if (!streamer.start_member(*prop))
        return false;
      if (!write(streamer, instance.pcl(), prop))
        return false;
      if (!streamer.finish_member(*prop))
        return false;
      break;
    }
    prop = streamer.next_entity(prop);
  }
  return streamer.finish_struct(*props);
}

template<typename S, std::enable_if_t<std::is_base_of<cdr_stream, S>::value, bool> = true >
bool write(S& str, const ::odom_msgs::OdometryPointCloud& instance, bool as_key) {
  auto &props = get_type_props<::odom_msgs::OdometryPointCloud>();
  str.set_mode(cdr_stream::stream_mode::write, as_key);
  return write(str, instance, props.data()); 
}

template<typename T, std::enable_if_t<std::is_base_of<cdr_stream, T>::value, bool> = true >
bool read(T& streamer, ::odom_msgs::OdometryPointCloud& instance, entity_properties_t *props) {
  (void)instance;
  if (!streamer.start_struct(*props))
    return false;
  auto prop = streamer.first_entity(props);
  while (prop) {
    switch (prop->m_id) {
      case 0:
      if (!streamer.start_member(*prop))
        return false;
      if (!read(streamer, instance.odom(), prop))
        return false;
      if (!streamer.finish_member(*prop))
        return false;
      break;
      case 1:
      if (!streamer.start_member(*prop))
        return false;
      if (!read(streamer, instance.pcl(), prop))
        return false;
      if (!streamer.finish_member(*prop))
        return false;
      break;
    }
    prop = streamer.next_entity(prop);
  }
  return streamer.finish_struct(*props);
}

template<typename S, std::enable_if_t<std::is_base_of<cdr_stream, S>::value, bool> = true >
bool read(S& str, ::odom_msgs::OdometryPointCloud& instance, bool as_key) {
  auto &props = get_type_props<::odom_msgs::OdometryPointCloud>();
  str.set_mode(cdr_stream::stream_mode::read, as_key);
  return read(str, instance, props.data()); 
}

template<typename T, std::enable_if_t<std::is_base_of<cdr_stream, T>::value, bool> = true >
bool move(T& streamer, const ::odom_msgs::OdometryPointCloud& instance, entity_properties_t *props) {
  (void)instance;
  if (!streamer.start_struct(*props))
    return false;
  auto prop = streamer.first_entity(props);
  while (prop) {
    switch (prop->m_id) {
      case 0:
      if (!streamer.start_member(*prop))
        return false;
      if (!move(streamer, instance.odom(), prop))
        return false;
      if (!streamer.finish_member(*prop))
        return false;
      break;
      case 1:
      if (!streamer.start_member(*prop))
        return false;
      if (!move(streamer, instance.pcl(), prop))
        return false;
      if (!streamer.finish_member(*prop))
        return false;
      break;
    }
    prop = streamer.next_entity(prop);
  }
  return streamer.finish_struct(*props);
}

template<typename S, std::enable_if_t<std::is_base_of<cdr_stream, S>::value, bool> = true >
bool move(S& str, const ::odom_msgs::OdometryPointCloud& instance, bool as_key) {
  auto &props = get_type_props<::odom_msgs::OdometryPointCloud>();
  str.set_mode(cdr_stream::stream_mode::move, as_key);
  return move(str, instance, props.data()); 
}

template<typename T, std::enable_if_t<std::is_base_of<cdr_stream, T>::value, bool> = true >
bool max(T& streamer, const ::odom_msgs::OdometryPointCloud& instance, entity_properties_t *props) {
  (void)instance;
  if (!streamer.start_struct(*props))
    return false;
  auto prop = streamer.first_entity(props);
  while (prop) {
    switch (prop->m_id) {
      case 0:
      if (!streamer.start_member(*prop))
        return false;
      if (!max(streamer, instance.odom(), prop))
        return false;
      if (!streamer.finish_member(*prop))
        return false;
      break;
      case 1:
      if (!streamer.start_member(*prop))
        return false;
      if (!max(streamer, instance.pcl(), prop))
        return false;
      if (!streamer.finish_member(*prop))
        return false;
      break;
    }
    prop = streamer.next_entity(prop);
  }
  return streamer.finish_struct(*props);
}

template<typename S, std::enable_if_t<std::is_base_of<cdr_stream, S>::value, bool> = true >
bool max(S& str, const ::odom_msgs::OdometryPointCloud& instance, bool as_key) {
  auto &props = get_type_props<::odom_msgs::OdometryPointCloud>();
  str.set_mode(cdr_stream::stream_mode::max, as_key);
  return max(str, instance, props.data()); 
}

} //namespace cdr
} //namespace core
} //namespace cyclonedds
} //namespace eclipse
} //namespace org

#endif // DDSCXX_ODOM_PCL_HPP
